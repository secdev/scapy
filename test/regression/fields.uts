% Regression tests for Scapy

# More information at http://www.secdev.org/projects/UTscapy/

############
############
+ Fields

= Helper

def expect_exception(e, c):
    try:
        c()
        return False
    except e:
        return True

= FieldLenField with BitField
class Test(Packet):
    name = "Test"
    fields_desc = [
        FieldLenField("BitCount", None, fmt="H", count_of="Values"),
        FieldLenField("ByteCount", None, fmt="B", length_of="Values"),
        FieldListField("Values", [], BitField("data", 0x0, size=1),
                       count_from=lambda pkt: pkt.BitCount),
    ]

pkt = Test(raw(Test(Values=[0, 0, 0, 0, 1, 1, 1, 1])))
assert(pkt.BitCount == 8)
assert(pkt.ByteCount == 1)

= PacketListField

class TestPacket(Packet):
  name = 'TestPacket'
  fields_desc = [ PacketListField('list', [], 0) ]

a = TestPacket()
a.list.append(1)
assert(len(a.list) == 1)

b = TestPacket()
assert(len(b.list) == 0)

= PacketField

class InnerPacket(Packet):
    fields_desc = [ StrField("f_name", "test") ]

class TestPacket(Packet):
    fields_desc = [ PacketField("inner", InnerPacket(), InnerPacket) ]

p = TestPacket()
print(p.inner.f_name)
assert p.inner.f_name == b"test"

p = TestPacket()
p.inner.f_name = b"scapy"
assert p.inner.f_name == b"scapy"

p = TestPacket()
assert p.inner.f_name == b"test"

+ UUIDField

= Parsing a human-readable UUID
f = UUIDField('f', '01234567-89ab-cdef-0123-456789abcdef')
f.addfield(None, b'', f.default) == hex_bytes('0123456789abcdef0123456789abcdef')

= Parsing a machine-encoded UUID
f = UUIDField('f', bytearray.fromhex('0123456789abcdef0123456789abcdef'))
f.addfield(None, b'', f.default) == hex_bytes('0123456789abcdef0123456789abcdef')

= Parsing a tuple of values
f = UUIDField('f', (0x01234567, 0x89ab, 0xcdef, 0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef))
f.addfield(None, b'', f.default) == hex_bytes('0123456789abcdef0123456789abcdef')

= Handle None values
f = UUIDField('f', None)
f.addfield(None, b'', f.default) == hex_bytes('00000000000000000000000000000000')

= Get a UUID for dissection
from uuid import UUID
f = UUIDField('f', None)
f.getfield(None, bytearray.fromhex('0123456789abcdef0123456789abcdef01')) == (b'\x01', UUID('01234567-89ab-cdef-0123-456789abcdef'))

= Verify little endian UUIDField
* The endianness of a UUIDField should be apply by block on each block in parenthesis '(01234567)-(89ab)-(cdef)-(01)(23)-(45)(67)(89)(ab)(cd)(ef)'
f = UUIDField('f', '01234567-89ab-cdef-0123-456789abcdef', uuid_fmt=UUIDField.FORMAT_LE)
f.addfield(None, b'', f.default) == hex_bytes('67452301ab89efcd0123456789abcdef')

= Verify reversed UUIDField
* This should reverse the entire value as 128-bits
f = UUIDField('f', '01234567-89ab-cdef-0123-456789abcdef', uuid_fmt=UUIDField.FORMAT_REV)
f.addfield(None, b'', f.default) == hex_bytes('efcdab8967452301efcdab8967452301')

+ RandUUID

= RandUUID setup

RANDUUID_TEMPLATE = '01234567-89ab-*-01*-*****ef'
RANDUUID_FIXED = uuid.uuid4()

= RandUUID default behaviour

u = RandUUID()._fix()
u.version == 4

= RandUUID incorrect implicit args

expect_exception(ValueError, lambda: RandUUID(node=0x1234, name="scapy"))
expect_exception(ValueError, lambda: RandUUID(node=0x1234, namespace=uuid.uuid4()))
expect_exception(ValueError, lambda: RandUUID(clock_seq=0x1234, name="scapy"))
expect_exception(ValueError, lambda: RandUUID(clock_seq=0x1234, namespace=uuid.uuid4()))
expect_exception(ValueError, lambda: RandUUID(name="scapy"))
expect_exception(ValueError, lambda: RandUUID(namespace=uuid.uuid4()))

= RandUUID v4 UUID (correct args)

u = RandUUID(version=4)._fix()
u.version == 4

u2 = RandUUID(version=4)._fix()
u2.version == 4

str(u) != str(u2)

= RandUUID v4 UUID (incorrect args)

expect_exception(ValueError, lambda: RandUUID(version=4, template=RANDUUID_TEMPLATE))
expect_exception(ValueError, lambda: RandUUID(version=4, node=0x1234))
expect_exception(ValueError, lambda: RandUUID(version=4, clock_seq=0x1234))
expect_exception(ValueError, lambda: RandUUID(version=4, namespace=uuid.uuid4()))
expect_exception(ValueError, lambda: RandUUID(version=4, name="scapy"))

= RandUUID v1 UUID

u = RandUUID(version=1)._fix()
u.version == 1

u = RandUUID(version=1, node=0x1234)._fix()
u.version == 1
u.node == 0x1234

u = RandUUID(version=1, clock_seq=0x1234)._fix()
u.version == 1
u.clock_seq == 0x1234

u = RandUUID(version=1, node=0x1234, clock_seq=0x1bcd)._fix()
u.version == 1
u.node == 0x1234
u.clock_seq == 0x1bcd

= RandUUID v1 UUID (implicit version)

u = RandUUID(node=0x1234)._fix()
u.version == 1
u.node == 0x1234

u = RandUUID(clock_seq=0x1234)._fix()
u.version == 1
u.clock_seq == 0x1234

u = RandUUID(node=0x1234, clock_seq=0x1bcd)._fix()
u.version == 1
u.node == 0x1234
u.clock_seq == 0x1bcd

= RandUUID v1 UUID (incorrect args)

expect_exception(ValueError, lambda: RandUUID(version=1, template=RANDUUID_TEMPLATE))
expect_exception(ValueError, lambda: RandUUID(version=1, namespace=uuid.uuid4()))
expect_exception(ValueError, lambda: RandUUID(version=1, name="scapy"))

= RandUUID v5 UUID

u = RandUUID(version=5, namespace=RANDUUID_FIXED, name="scapy")._fix()
u.version == 5

u2 = RandUUID(version=5, namespace=RANDUUID_FIXED, name="scapy")._fix()
u2.version == 5
u.bytes == u2.bytes

# implicit v5
u2 = RandUUID(namespace=RANDUUID_FIXED, name="scapy")._fix()
u.bytes == u2.bytes

= RandUUID v5 UUID (incorrect args)

expect_exception(ValueError, lambda: RandUUID(version=5, template=RANDUUID_TEMPLATE))
expect_exception(ValueError, lambda: RandUUID(version=5, node=0x1234))
expect_exception(ValueError, lambda: RandUUID(version=5, clock_seq=0x1234))

= RandUUID v3 UUID

u = RandUUID(version=3, namespace=RANDUUID_FIXED, name="scapy")._fix()
u.version == 3

u2 = RandUUID(version=3, namespace=RANDUUID_FIXED, name="scapy")._fix()
u2.version == 3
u.bytes == u2.bytes

# implicit v5
u2 = RandUUID(namespace=RANDUUID_FIXED, name="scapy")._fix()
u.bytes != u2.bytes

= RandUUID v3 UUID (incorrect args)

expect_exception(ValueError, lambda: RandUUID(version=5, template=RANDUUID_TEMPLATE))
expect_exception(ValueError, lambda: RandUUID(version=5, node=0x1234))
expect_exception(ValueError, lambda: RandUUID(version=5, clock_seq=0x1234))

= RandUUID looks like a UUID with str
re.match(r'[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}', str(RandUUID()), re.I) is not None

= RandUUID with a static part
* RandUUID template can contain static part such a 01234567-89ab-*-01*-*****ef
re.match(r'01234567-89ab-[0-9a-f]{4}-01[0-9a-f]{2}-[0-9a-f]{10}ef', str(RandUUID('01234567-89ab-*-01*-*****ef')), re.I) is not None

= RandUUID with a range part
* RandUUID template can contain a part with a range of values such a 01234567-89ab-*-01*-****c0:c9ef
re.match(r'01234567-89ab-[0-9a-f]{4}-01[0-9a-f]{2}-[0-9a-f]{8}c[0-9]ef', str(RandUUID('01234567-89ab-*-01*-****c0:c9ef')), re.I) is not None

