% Regression tests for Scapy Answering Machines

# More information at http://www.secdev.org/projects/UTscapy/


############
############
+ Answering Machines

= Generic answering machine mocker
import mock
@mock.patch("scapy.ansmachine.sniff")
def test_am(cls_name, packet_query, check_reply, mock_sniff, **kargs):
    packet_query = packet_query.__class__(bytes(packet_query))
    def sniff(*args,**kargs):
        kargs["prn"](packet_query)
    mock_sniff.side_effect = sniff
    am = cls_name(**kargs)
    am.send_reply = lambda x: check_reply(x.__class__(bytes(x)))
    am()


= BOOT_am
def check_BOOTP_am_reply(packet):
    assert BOOTP in packet and packet[BOOTP].op == 2
    assert packet[BOOTP].yiaddr == "192.168.1.128" and packet[BOOTP].giaddr == "192.168.1.1"

test_am(BOOTP_am,
        Ether()/IP()/UDP()/BOOTP(op=1),
        check_BOOTP_am_reply)


= DHCP_am
def check_DHCP_am_reply(packet):
    assert DHCP in packet and len(packet[DHCP].options)
    assert ("domain", b"localnet") in packet[DHCP].options

test_am(DHCP_am,
        Ether()/IP()/UDP()/BOOTP(op=1)/DHCP(options=[('message-type', 'request')]),
        check_DHCP_am_reply,
        domain="localnet")


= ARP_am
def check_ARP_am_reply(packet):
    assert ARP in packet and packet[ARP].psrc == "10.28.7.1"
    assert packet[ARP].hwsrc == "00:01:02:03:04:05"

test_am(ARP_am,
        Ether()/ARP(pdst="10.28.7.1"),
        check_ARP_am_reply,
        IP_addr="10.28.7.1",
        ARP_addr="00:01:02:03:04:05")

= ICMPEcho_am
def check_ICMP_am_reply(packet):
    packet.show()
    assert IP in packet and ICMP in packet
    assert packet[IP].dst == "1.1.1.1"
    assert packet[ICMP].seq == 12

test_am(ICMPEcho_am,
        Ether()/IP(src="1.1.1.1", dst="2.2.2.2")/ICMP(seq=12),
        check_ICMP_am_reply)

= DNS_am
def check_DNS_am_reply(packet):
    assert DNS in packet and packet[DNS].ancount == 1
    assert packet[DNS].an[0].rdata == "192.168.1.1"
    assert packet[DNS].qd[0].qname == b"www.secdev.org."

test_am(DNS_am,
        IP()/UDP()/DNS(qd=DNSQR(qname="www.secdev.org")),
        check_DNS_am_reply,
        joker="192.168.1.1")

def check_DNS_am_reply2(packet):
    assert DNS in packet and packet[DNS].ancount == 2
    assert packet[DNS].an[0].rdata == "128.0.0.1"
    assert packet[DNS].an[1].rdata == "::1"

test_am(DNS_am,
        IP(b'E\x00\x00H\x00\x01\x00\x00@\x11|\xa2\x7f\x00\x00\x01\x7f\x00\x00\x01\x005\x005\x004\xe8\x9a\x00\x00\x01\x00\x00\x02\x00\x00\x00\x00\x00\x00\x06gaagle\x03com\x00\x00\x01\x00\x01\x06google\x03com\x00\x00\x1c\x00\x01'),
        check_DNS_am_reply2,
        match={"google.com": ("127.0.0.1", "::1"), "gaagle.com": "128.0.0.1"},
        joker=False)

= DHCPv6_am - Basic Instantiaion
~ osx netaccess
a = DHCPv6_am()
a.usage()

a.parse_options(dns="2001:500::1035", domain="localdomain, local", duid=None,
        iface=conf.iface, advpref=255, sntpservers=None,
        sipdomains=None, sipservers=None, 
        nisdomain=None, nisservers=None, 
        nispdomain=None, nispservers=None,
        bcmcsdomains=None, bcmcsservers=None,
        debug=1)

= DHCPv6_am - SOLICIT
~ osx netaccess
req = IPv6(dst="::1")/UDP()/DHCP6(msgtype=1)/DHCP6OptClientId(duid=DUID_LLT())
assert a.is_request(req)
res = a.make_reply(req)
assert not a.is_request(res)
assert res[DHCP6_Advertise]
assert res[DHCP6OptPref].prefval == 255
assert res[DHCP6OptReconfAccept]
a.print_reply(req, res)

= DHCPv6_am - INFO-REQUEST
~ osx netaccess
req = IPv6(dst="::1")/UDP()/DHCP6(msgtype=11)/DHCP6OptClientId(duid=DUID_LLT())
assert a.is_request(req)
res = a.make_reply(req)
assert not a.is_request(res)
assert res[DHCP6_Reply]
assert "local" in res[DHCP6OptDNSDomains].dnsdomains
a.print_reply(req, res)

= DHCPv6_am - REQUEST
~ osx netaccess
req = IPv6(dst="::1")/UDP()/DHCP6(msgtype=3)/DHCP6OptClientId(duid=DUID_LLT())/DHCP6OptServerId(duid=a.duid)
assert a.is_request(req)
res = a.make_reply(req)
assert not a.is_request(res)
assert res[UDP].dport == 546
assert res[DHCP6_Solicit]
a.print_reply(req, res)

= WiFi_am
import mock
@mock.patch("scapy.layers.dot11.sniff")
def test_WiFi_am(packet_query, check_reply, mock_sniff, **kargs):
    def sniff(*args,**kargs):
        kargs["prn"](packet_query)
    mock_sniff.side_effect = sniff
    am = WiFi_am(**kargs)
    am.send_reply = check_reply
    am()

def check_WiFi_am_reply(packet):
    assert isinstance(packet, list) and len(packet) == 2
    assert TCP in packet[0] and Raw in packet[0] and raw(packet[0][Raw]) == b"5c4pY"

test_WiFi_am(Dot11(FCfield="to-DS")/IP()/TCP()/"Scapy",
             check_WiFi_am_reply,
             iffrom="scapy0", ifto="scapy1", replace="5c4pY", pattern="Scapy")


= NBNS_am
def check_NBNS_am_reply(name):
    def check(packet):
        assert NBNSQueryResponse in packet and packet[NBNSQueryResponse].RR_NAME.strip() == bytes_encode(name)
    return check

for server_name in (None, "", b"test", "test"):
    test_am(NBNS_am,
            Ether()/IP()/UDP()/NBNSHeader()/NBNSQueryRequest(QUESTION_NAME="test"),
            check_NBNS_am_reply("test"),
            server_name=server_name)

test_am(NBNS_am,
        Ether()/IP()/UDP()/NBNSHeader()/NBNSQueryRequest(QUESTION_NAME=b"\x85"),
        check_NBNS_am_reply(b"\x85"),
        server_name=b"\x85")
