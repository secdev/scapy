#!/bin/bash


function test_tls_server {
  msg=$1
  suite=$2
  version=$3
  EXIT_CODE=test_tls_server_tmp_code
  OSSL_STDO=test_tls_server_tmp_openssl_stdout
  OSSL_STDE=test_tls_server_tmp_openssl_stderr
  SCAPY_STDE=test_tls_server_tmp_scapy_stderr

  echo "1" > $EXIT_CODE
  ($TRAVIS_SUDO python travis_test_server.py "$msg" 2>$SCAPY_STDE; echo $? > $EXIT_CODE) &
  sleep 2         # wait for the server to start

  echo -n "$msg" | sudo openssl s_client -cipher $suite $version 1>$OSSL_STDO 2>$OSSL_STDE
  sleep 0.5       # wait for the connection to be established, then torn down

  if [[ -z $version ]];
  then
    version=""
  else
    version="and option $version"
  fi

  if [ $(<$EXIT_CODE) == "0" ];
  then
    echo "PASSED - TLS server test with cipher suite $suite $version"
    rm -f $EXIT_CODE $OSSL_STDO $OSSL_STDE $SCAPY_STDE
  else
    echo "FAILED - TLS server test with cipher suite $suite $version"
    echo -e "\n###\nHere are scapy writings to stderr:\n"
    cat $SCAPY_STDE
    echo -e "\nHere are openssl writings to stdout & stderr:\n"
    cat $OSSL_STDO
    cat $OSSL_STDE
    echo -e "\n###\n"
    rm -f $EXIT_CODE $OSSL_STDO $OSSL_STDE $SCAPY_STDE
    exit 1
  fi
}


function test_tls_client {
  # we test our TLS client against our own TLS server, because s_server scripting is broken
  # be careful, as this might not detect every error (e.g. if key derivation was
  # identically non-standard on both sides, this would not be detected)
  msg=$1
  suite=$2
  version=$3
  EXIT_CODE=test_tls_client_tmp_code
  SRV_STDO=test_tls_client_tmp_server_stdout
  SRV_STDE=test_tls_client_tmp_server_stderr
  CLI_STDO=test_tls_client_tmp_client_stdout
  CLI_STDE=test_tls_client_tmp_client_stderr

  ($TRAVIS_SUDO python travis_test_server.py "$msg" 1>$SRV_STDO 2>$SRV_STDE; echo $? > $EXIT_CODE) &
  sleep 1         # wait for the server to start

  $TRAVIS_SUDO python travis_test_client.py "$msg" $suite $version 1>$CLI_STDO 2>$CLI_STDE
  sleep 0.5

  if [[ -z $version ]];
  then
    version=""
  else
    version="and version $version"
  fi

  if [ $(<$EXIT_CODE) == "0" ];
  then
    echo "PASSED - TLS client test with cipher suite $suite $version"
    rm -f $CLI_STDO $CLI_STDE $SRV_STDO $SRV_STDE $EXIT_CODE
  else
    echo "FAILED - TLS client test with cipher suite $suite $version"
    echo -e "\n###\nHere are scapy client writings to stdout & stderr:\n"
    cat $CLI_STDO
    cat $CLI_STDE
    echo -e "\nHere are scapy server writings to stdout & stderr:\n"
    cat $SRV_STDO
    cat $SRV_STDE
    echo -e "\n###\n"
    rm -f $CLI_STDO $CLI_STDE $SRV_STDO $SRV_STDE $EXIT_CODE
    exit 1
  fi
}


echo "TLS server automaton tests"
test_tls_server "Testing TLS server with TLS 1.0 and TLS_RSA_WITH_RC4_128_SHA" "RC4-SHA" "-tls1"
test_tls_server "Testing TLS server with TLS 1.2 and TLS_DHE_RSA_WITH_AES_128_CBC_SHA256" "DHE-RSA-AES128-SHA256" "-tls1_2"
test_tls_server "Testing TLS server with TLS 1.2 and TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384" "ECDHE-RSA-AES256-GCM-SHA384" "-tls1_2"
echo
sleep 1

echo "TLS client automaton tests"
test_tls_client "Testing TLS client with TLS 1.0 and TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA" "0088" "0301"
test_tls_client "Testing TLS client with TLS 1.1 and TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA" "c013" "0302"
test_tls_client "Testing TLS server with TLS 1.2 and TLS_DHE_RSA_WITH_AES_128_GCM_SHA256" "009e" "0303"
test_tls_client "Testing TLS server with SSLv3 and TLS_RSA_EXPORT_WITH_RC4_40_MD5" "0003" "0300"


