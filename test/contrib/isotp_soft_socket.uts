% Regression tests for ISOTPSoftSocket
~ automotive_comm

+ Configuration
~ conf

= Imports

from scapy.modules.six.moves.queue import Queue, Empty
from io import BytesIO
import scapy.modules.six as six

with open(scapy_path("test/contrib/automotive/interface_mockup.py")) as f:
    exec(f.read())

= Definition of utility functions

# hexadecimal to bytes convenience function
if six.PY2:
    dhex = lambda s: "".join(s.split()).decode('hex')
else:
    dhex = bytes.fromhex


+ Test sniffer
= Test sniffer with multiple frames

test_frames = [
    (0x241, "EA 10 28 01 02 03 04 05"),
    (0x641, "EA 30 03 00"            ),
    (0x241, "EA 21 06 07 08 09 0A 0B"),
    (0x241, "EA 22 0C 0D 0E 0F 10 11"),
    (0x241, "EA 23 12 13 14 15 16 17"),
    (0x641, "EA 30 03 00"            ),
    (0x241, "EA 24 18 19 1A 1B 1C 1D"),
    (0x241, "EA 25 1E 1F 20 21 22 23"),
    (0x241, "EA 26 24 25 26 27 28"   ),
]

with new_can_socket(iface0) as s, new_can_socket(iface0) as tx_sock:
    for f in test_frames:
        tx_sock.send(CAN(identifier=f[0], data=dhex(f[1])))
    sniffed = sniff(opened_socket=s, session=ISOTPSession, timeout=1, prn=lambda x: x.show2(), count=1)

assert sniffed[0]['ISOTP'].data == bytearray(range(1, 0x29))
assert(sniffed[0]['ISOTP'].src == 0x641)
assert(sniffed[0]['ISOTP'].exsrc is 0xEA)
assert(sniffed[0]['ISOTP'].dst == 0x241)
assert(sniffed[0]['ISOTP'].exdst is 0xEA)

+ ISOTPSoftSocket tests

= Create ISOTPSoftSocket
cans = TestSocket(CAN)
stim = TestSocket(CAN)
cans.pair(stim)
s = ISOTPSoftSocket(cans, sid=0x641, did=0x241)

= Single-frame receive
stim.send(CAN(identifier=0x241, data=dhex("05 01 02 03 04 05")))
msg = s.recv()
assert(msg.data == dhex("01 02 03 04 05"))

= Single-frame send
s.send(ISOTP(dhex("01 02 03 04 05")))
msg = stim.sniff(count=1, timeout=1)[0]
assert(msg.data == dhex("05 01 02 03 04 05"))

= Two frame receive
stim.send(CAN(identifier=0x241, data=dhex("10 09 01 02 03 04 05 06")))
c = stim.sniff(count=1, timeout=1)[0]
assert (c.data == dhex("30 00 00"))
stim.send(CAN(identifier=0x241, data=dhex("21 07 08 09 00 00 00 00")))
msg = s.recv()

assert(msg.data == dhex("01 02 03 04 05 06 07 08 09"))


= 20000 bytes receive
data = dhex("01 02 03 04 05")*4000

cf = ISOTP(data, dst=0x241).fragment()
ff = cf.pop(0)
stim.send(ff)
c = stim.sniff(count=1, timeout=1)[0]
assert (c.data == dhex("30 00 00"))
for f in cf:
    stim.send(f)

msg = s.recv()

assert(msg.data == data)

= 20000 bytes send

data = dhex("01 02 03 04 05")*4000
msg = ISOTP(data, dst=0x641)
ready = threading.Event()
fragments = msg.fragment()
ack = CAN(identifier=0x241, data=dhex("30 00 00"))

def sender():
    ready.wait(timeout=5)
    s.send(msg)

thread = threading.Thread(target=sender, name="sender")
thread.start()

ready.set()
ff = stim.sniff(count=1, timeout=1)[0]
assert (bytes(ff) == bytes(fragments[0]))
stim.send(ack)
cfs = stim.sniff(count=len(fragments) - 1, timeout=1)
for fragment, cf in zip(fragments[1:], cfs):
    assert (bytes(fragment) == bytes(cf))

thread.join(15)
assert not thread.is_alive()

= Close ISOTPSoftSocket

s.close()
s = None

= Create and close ISOTP soft socket
with ISOTPSoftSocket(TestSocket(CAN), sid=0x641, did=0x241) as s:
    assert(s.impl.rx_thread.running)

assert(not s.impl.rx_thread.running)


= Verify that all threads will die when GC collects the socket
~ not_pypy
import gc
cans = TestSocket(CAN)
s = ISOTPSoftSocket(cans, sid=0x641, did=0x241)
assert(s.impl.rx_thread.running)
impl = s.impl
s = None
cans.close()
r = gc.collect()
assert(not impl.rx_thread.running)

= Test on_recv function with single frame
with ISOTPSoftSocket(TestSocket(CAN), sid=0x641, did=0x241) as s:
    s.ins.on_recv(CAN(identifier=0x241, data=dhex("05 01 02 03 04 05")))
    msg, ts = s.ins.rx_queue.recv()
    assert(msg == dhex("01 02 03 04 05"))

= Test on_recv function with empty frame
with ISOTPSoftSocket(TestSocket(CAN), sid=0x641, did=0x241) as s:
    s.ins.on_recv(CAN(identifier=0x241, data=b""))
    assert(s.ins.rx_queue.empty())

= Test on_recv function with single frame and extended addressing
with ISOTPSoftSocket(TestSocket(CAN), sid=0x641, did=0x241, extended_rx_addr=0xea) as s:
    cf = CAN(identifier=0x241, data=dhex("EA 05 01 02 03 04 05"))
    s.ins.on_recv(cf)
    msg, ts = s.ins.rx_queue.recv()
    assert(msg == dhex("01 02 03 04 05"))
    assert ts == cf.time

= CF is sent when first frame is received
cans = TestSocket(CAN)
can_out = TestSocket(CAN)
cans.pair(can_out)
with ISOTPSoftSocket(cans, sid=0x641, did=0x241) as s:
    s.ins.on_recv(CAN(identifier=0x241, data=dhex("10 20 01 02 03 04 05 06")))
    can = can_out.sniff(timeout=1, count=1)[0]
    assert(can.identifier == 0x641)
    assert(can.data == dhex("30 00 00"))

cans.close()

+ Testing ISOTPSoftSocket with an actual CAN socket

= Verify that packets are not lost if they arrive before the sniff() is called
with new_can_socket(iface0) as ss, new_can_socket0() as sr:
    tx_func = lambda: ss.send(CAN(identifier=0x111, data=b"\x01\x23\x45\x67"))
    p = sr.sniff(count=1, timeout=0.2, started_callback=tx_func)
    assert(len(p)==1)
    tx_func = lambda: ss.send(CAN(identifier=0x111, data=b"\x89\xab\xcd\xef"))
    p = sr.sniff(count=1, timeout=0.2, started_callback=tx_func)
    assert(len(p)==1)

= Send single frame ISOTP message, using begin_send
with new_can_socket(iface0) as isocan, \
        ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s, \
        new_can_socket0() as cans:
    can = cans.sniff(timeout=2, count=1, started_callback=lambda: s.begin_send(ISOTP(data=dhex("01 02 03 04 05"))))
    assert(can[0].identifier == 0x641)
    assert(can[0].data == dhex("05 01 02 03 04 05"))

= Send many single frame ISOTP messages, using begin_send

with new_can_socket0() as isocan, \
        ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s, \
        new_can_socket0() as cans:
    for i in range(100):
        data = dhex("01 02 03 04 05") + struct.pack("B", i)
        expected = struct.pack("B", len(data)) + data
        can = cans.sniff(timeout=4, count=1, started_callback=lambda: s.begin_send(ISOTP(data=data)))
        assert(can[0].identifier == 0x641)
        print(can[0].data, data)
        assert(can[0].data == expected)


= Send two-frame ISOTP message, using begin_send
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    with new_can_socket(iface0) as cans:
        can = cans.sniff(timeout=1, count=1, started_callback=lambda: s.begin_send(ISOTP(data=dhex("01 02 03 04 05 06 07 08"))))
        assert can[0].identifier == 0x641
        assert can[0].data == dhex("10 08 01 02 03 04 05 06")
        can = cans.sniff(timeout=1, count=1, started_callback=lambda: cans.send(CAN(identifier = 0x241, data=dhex("30 00 00"))))
        assert can[0].identifier == 0x641
        assert can[0].data == dhex("21 07 08")

cans.close()

= Send single frame ISOTP message
with new_can_socket(iface0) as cans:
    with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
        s.send(ISOTP(data=dhex("01 02 03 04 05")))
        can = cans.sniff(timeout=1, count=1)
        assert(can[0].identifier == 0x641)
        assert(can[0].data == dhex("05 01 02 03 04 05"))


= Send two-frame ISOTP message
acker_ready = threading.Event()
def acker():
    with new_can_socket(iface0) as acks:
        acker_ready.set()
        can_pkt = acks.sniff(timeout=1, count=1)
        can = can_pkt[0]
        acks.send(CAN(identifier = 0x241, data=dhex("30 00 00")))

thread = Thread(target=acker)
thread.start()
acker_ready.wait(timeout=5)
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    with new_can_socket(iface0) as cans:
        s.send(ISOTP(data=dhex("01 02 03 04 05 06 07 08")))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x641)
        assert(can.data == dhex("10 08 01 02 03 04 05 06"))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x241)
        assert(can.data == dhex("30 00 00"))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x641)
        assert(can.data == dhex("21 07 08"))

thread.join(15)
assert not thread.is_alive()


= Send two-frame ISOTP message with bs

acker_ready = threading.Event()
def acker():
    with new_can_socket(iface0) as acks:
        acker_ready.set()
        can_pkt = acks.sniff(timeout=1, count=1)
        acks.send(CAN(identifier = 0x241, data=dhex("30 20 00")))

thread = Thread(target=acker)
thread.start()
acker_ready.wait(timeout=5)
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    with new_can_socket(iface0) as cans:
        s.send(ISOTP(data=dhex("01 02 03 04 05 06 07 08")))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x641)
        assert(can.data == dhex("10 08 01 02 03 04 05 06"))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x241)
        assert(can.data == dhex("30 20 00"))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x641)
        assert(can.data == dhex("21 07 08"))

thread.join(15)
assert not thread.is_alive()


= Send two-frame ISOTP message with ST
acker_ready = threading.Event()
def acker():
    with new_can_socket0() as acks:
        acker_ready.set()
        acks.sniff(timeout=1, count=1)
        acks.send(CAN(identifier = 0x241, data=dhex("30 00 10")))

thread = Thread(target=acker)
thread.start()
acker_ready.wait(timeout=5)
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    with new_can_socket(iface0) as cans:
        s.send(ISOTP(data=dhex("01 02 03 04 05 06 07 08")))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x641)
        assert(can.data == dhex("10 08 01 02 03 04 05 06"))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x241)
        assert(can.data == dhex("30 00 10"))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x641)
        assert(can.data == dhex("21 07 08"))

thread.join(15)
assert not thread.is_alive()

= Receive a single frame ISOTP message
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier = 0x241, data = dhex("05 01 02 03 04 05")))
    isotp = s.recv()
    assert(isotp.data == dhex("01 02 03 04 05"))
    assert(isotp.src == 0x641)
    assert(isotp.dst == 0x241)
    assert(isotp.exsrc == None)
    assert(isotp.exdst == None)


= Receive a single frame ISOTP message, with extended addressing
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241, extended_addr=0xc0, extended_rx_addr=0xea) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier = 0x241, data = dhex("EA 05 01 02 03 04 05")))
    isotp = s.recv()
    assert(isotp.data == dhex("01 02 03 04 05"))
    assert(isotp.src == 0x641)
    assert(isotp.dst == 0x241)
    assert(isotp.exsrc == 0xc0)
    assert(isotp.exdst == 0xea)


= Receive frames from CandumpReader
candump_fd = BytesIO(b'''  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA''')

with ISOTPSoftSocket(CandumpReader(candump_fd), sid=0x241, did=0x541, listen_only=True) as s:
    pkts = s.sniff(timeout=2, count=6)
    assert(len(pkts) == 6)
    isotp = pkts[0]
    print(repr(isotp))
    print(hex(isotp.src))
    print(hex(isotp.dst))
    assert(isotp.data == dhex("DE AD BE EF AA AA AA AA AA AA"))
    assert(isotp.src == 0x241)
    assert(isotp.dst == 0x541)

= Receive frames from CandumpReader with ISOTPSniffer without extended addressing
candump_fd = BytesIO(b'''  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA''')

pkts = sniff(opened_socket=CandumpReader(candump_fd), session=ISOTPSession, timeout=1, session_kwargs={"use_ext_addr": False})
assert(len(pkts) == 6)
isotp = pkts[0]
assert(isotp.data == dhex("DE AD BE EF AA AA AA AA AA AA"))
assert (isotp.dst == 0x541)

= Receive frames from CandumpReader with ISOTPSniffer
* all flow control frames are detected as single frame with extended address

candump_fd = BytesIO(b'''  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA''')

pkts = sniff(opened_socket=CandumpReader(candump_fd), session=ISOTPSession, timeout=1)
assert(len(pkts) == 12)
isotp = pkts[1]
assert(isotp.data == dhex("DE AD BE EF AA AA AA AA AA AA"))
assert (isotp.dst == 0x541)
isotp = pkts[0]
assert(isotp.data == dhex(""))
assert (isotp.dst == 0x241)

= Receive frames from CandumpReader with ISOTPSniffer and count
* all flow control frames are detected as single frame with extended address

candump_fd = BytesIO(b'''  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA
  vcan0  541   [8]  10 0A DE AD BE EF AA AA
  vcan0  241   [3]  30 00 00
  vcan0  541   [5]  21 AA AA AA AA''')

pkts = sniff(opened_socket=CandumpReader(candump_fd), session=ISOTPSession, timeout=1, count=2)
assert(len(pkts) == 2)
isotp = pkts[1]
assert(isotp.data == dhex("DE AD BE EF AA AA AA AA AA AA"))
assert (isotp.dst == 0x541)
isotp = pkts[0]
assert(isotp.data == dhex(""))
assert (isotp.dst == 0x241)

= ISOTPSession tests

ses = ISOTPSession()
ses.on_packet_received(None)
ses.on_packet_received([None, None])
assert True

= Receive a two-frame ISOTP message
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier = 0x241, data = dhex("10 0B 01 02 03 04 05 06")))
        cans.send(CAN(identifier = 0x241, data = dhex("21 07 08 09 10 11")))
    isotp = s.recv()
    assert(isotp.data == dhex("01 02 03 04 05 06 07 08 09 10 11"))

= Check what happens when a CAN frame with wrong identifier gets received
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier = 0x141, data = dhex("05 01 02 03 04 05")))
    assert(s.ins.rx_queue.empty())

+ Testing ISOTPSoftSocket timeouts

= Check if not sending the last CF will make the socket timeout
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier = 0x241, data = dhex("10 11 01 02 03 04 05 06")))
        cans.send(CAN(identifier = 0x241, data = dhex("21 07 08 09 0A 0B 0C 0D")))
    isotp = s.sniff(timeout=0.1)

assert(len(isotp) == 0)

= Check if not sending the first CF will make the socket timeout
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier = 0x241, data = dhex("10 11 01 02 03 04 05 06")))
    isotp = s.sniff(timeout=0.1)

assert(len(isotp) == 0)

= Check if not sending the first FC will make the socket timeout
exception = None
isotp = ISOTP(data=dhex("01 02 03 04 05 06 07 08 09 0A"))

with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    try:
        s.send(isotp)
        assert(False)
    except Scapy_Exception as ex:
        exception = ex

assert(str(exception) == "TX state was reset due to timeout" or str(exception) == "ISOTP send not completed in 30s")

= Check if not sending the second FC will make the socket timeout
exception = None
isotp = ISOTP(data=b"\xa5" * 120)
test_sem = threading.Semaphore(0)
evt = threading.Event()

def acker():
    with new_can_socket(iface0) as cans:
        evt.set()
        can = cans.sniff(timeout=0.1, count=1)[0]
        cans.send(CAN(identifier = 0x241, data=dhex("30 04 00")))

thread = Thread(target=acker)
thread.start()
evt.wait(timeout=5)

with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    try:
        s.send(isotp)
    except Scapy_Exception as ex:
        exception = ex

cans.close()
thread.join(15)
assert not thread.is_alive()

assert(exception is not None)
print(exception)
assert(str(exception) == "TX state was reset due to timeout")

= Check if reception of an overflow FC will make a send fail
exception = None
isotp = ISOTP(data=b"\xa5" * 120)
test_sem = threading.Semaphore(0)
evt = threading.Event()

def acker():
    with new_can_socket(iface0) as cans:
        evt.set()
        can = cans.sniff(timeout=1, count=1)[0]
        cans.send(CAN(identifier = 0x241, data=dhex("32 00 00")))

thread = Thread(target=acker)
thread.start()
evt.wait(timeout=5)

with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    try:
        s.send(isotp)
    except Scapy_Exception as ex:
        exception = ex

thread.join(15)
assert not thread.is_alive()

assert(exception is not None)

assert(str(exception) == "Overflow happened at the receiver side")

= Close the Socket
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241) as s:
    s.close()

+ More complex operations

= ISOTPSoftSocket sr1
drain_bus(iface0)
drain_bus(iface1)

evt = threading.Event()
msg = ISOTP(b'\x11\x22\x33\x11\x22\x33\x11\x22\x33\x11\x22\x33')
rx2 = None
evt2 = threading.Event()

def sender(sock):
    global evt, rx2, msg
    evt2.set()
    evt.wait(timeout=5)
    rx2 = sock.sr1(msg, timeout=3, verbose=True)

with new_can_socket0() as isocan_tx, ISOTPSoftSocket(isocan_tx, 0x123, 0x321) as sock_tx, \
    new_can_socket0() as isocan_rx, ISOTPSoftSocket(isocan_rx, 0x321, 0x123) as sock_rx:
    txThread = threading.Thread(target=sender, args=(sock_tx,))
    txThread.start()
    evt2.wait(timeout=1)
    rx = sock_rx.sniff(timeout=3, count=1, started_callback=evt.set)[0]
    sock_rx.send(msg)
    sent = True
    txThread.join(timeout=5)
    assert not txThread.is_alive()

assert(rx == msg)
assert(sent)
assert(rx2 is not None)
assert(rx2 == msg)

= ISOTPSoftSocket sr1 and ISOTP test vice versa
drain_bus(iface0)
drain_bus(iface1)

rx2 = None
sent = False
evt = threading.Event()
msg = ISOTP(b'\x11\x22\x33\x11\x22\x33\x11\x22\x33\x11\x22\x33')

with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, 0x123, 0x321) as txSock:
    def receiver():
        global rx2, sent
        with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, 0x321, 0x123) as rxSock:
            evt.set()
            rx2 = rxSock.sniff(count=1, timeout=3)
            rxSock.send(msg)
            sent = True
    rxThread = threading.Thread(target=receiver, name="receiver")
    rxThread.start()
    evt.wait(timeout=5)
    rx = txSock.sr1(msg, timeout=5,verbose=True)
    rxThread.join(timeout=5)
    assert not rxThread.is_alive()

assert(rx is not None)
assert(rx == msg)
assert(len(rx2) == 1)
assert(rx2[0] == msg)
assert(sent)

= ISOTPSoftSocket sniff

msg = ISOTP(b'\x11\x22\x33\x11\x22\x33\x11\x22\x33\x11\x22\x33')
with new_can_socket0() as isocan1, ISOTPSoftSocket(isocan1, 0x123, 0x321) as sock, \
        new_can_socket0() as isocan, ISOTPSoftSocket(isocan, 0x321, 0x123) as rx_sock:
    msg.data += b'0'
    sock.send(msg)
    time.sleep(0.01)
    msg.data += b'1'
    sock.send(msg)
    time.sleep(0.01)
    msg.data += b'2'
    sock.send(msg)
    time.sleep(0.01)
    msg.data += b'3'
    sock.send(msg)
    time.sleep(0.01)
    msg.data += b'4'
    sock.send(msg)
    time.sleep(0.01)
    rx = rx_sock.sniff(count=5, timeout=5)

msg = ISOTP(b'\x11\x22\x33\x11\x22\x33\x11\x22\x33\x11\x22\x33')
msg.data += b'0'
assert(rx[0] == msg)
msg.data += b'1'
assert(rx[1] == msg)
msg.data += b'2'
assert(rx[2] == msg)
msg.data += b'3'
assert(rx[3] == msg)
msg.data += b'4'
assert(rx[4] == msg)

+ ISOTPSoftSocket MITM attack tests

= bridge and sniff with isotp soft sockets set up vcan0 and vcan1 for package forwarding vcan1
drain_bus(iface0)
drain_bus(iface1)

succ = False

with new_can_socket0() as can0_0, \
        new_can_socket0() as can0_1, \
        new_can_socket1() as can1_0, \
        new_can_socket1() as can1_1, \
        ISOTPSoftSocket(can0_0, sid=0x241, did=0x641) as isoTpSocket0, \
        ISOTPSoftSocket(can1_0, sid=0x541, did=0x141) as isoTpSocket1, \
        ISOTPSoftSocket(can0_1, sid=0x641, did=0x241) as bSocket0, \
        ISOTPSoftSocket(can1_1, sid=0x141, did=0x141) as bSocket1:
    evt = threading.Event()
    def forwarding(pkt):
        global forwarded
        forwarded += 1
        return pkt
    def bridge():
        global forwarded, succ
        forwarded = 0
        bridge_and_sniff(if1=bSocket0, if2=bSocket1, xfrm12=forwarding, xfrm21=forwarding, timeout=0.5,
                         started_callback=evt.set, count=1)
        succ = True
    threadBridge = threading.Thread(target=bridge)
    threadBridge.start()
    evt.wait(timeout=5)
    packetsVCan1 = isoTpSocket1.sniff(timeout=0.5, count=1, started_callback=lambda: isoTpSocket0.send(ISOTP(b'Request')))
    threadBridge.join(timeout=5)
    assert not threadBridge.is_alive()

assert forwarded == 1
assert len(packetsVCan1) == 1
assert succ

drain_bus(iface0)
drain_bus(iface1)

= bridge and sniff with isotp soft sockets and multiple long packets

drain_bus(iface0)
drain_bus(iface1)

N = 3
T = 20

succ = False
with new_can_socket0() as can0_0, \
        new_can_socket0() as can0_1, \
        new_can_socket1() as can1_0, \
        new_can_socket1() as can1_1, \
        ISOTPSoftSocket(can0_0, sid=0x241, did=0x641) as isoTpSocket0, \
        ISOTPSoftSocket(can1_0, sid=0x541, did=0x141) as isoTpSocket1, \
        ISOTPSoftSocket(can0_1, sid=0x641, did=0x241) as bSocket0, \
        ISOTPSoftSocket(can1_1, sid=0x141, did=0x541) as bSocket1:
    evt = threading.Event()
    def forwarding(pkt):
        global forwarded
        forwarded += 1
        return pkt
    def bridge():
        global forwarded, succ
        forwarded = 0
        bridge_and_sniff(if1=bSocket0, if2=bSocket1, xfrm12=forwarding, xfrm21=forwarding,
                         timeout=T, count=N, started_callback=evt.set)
        succ = True
    threadBridge = threading.Thread(target=bridge)
    threadBridge.start()
    evt.wait(timeout=5)
    for _ in range(N):
        isoTpSocket0.send(ISOTP(b'RequestASDF1234567890'))
    packetsVCan1 = isoTpSocket1.sniff(timeout=T, count=N)
    threadBridge.join(timeout=5)
    assert not threadBridge.is_alive()

assert forwarded == N
assert len(packetsVCan1) == N
assert succ

drain_bus(iface0)
drain_bus(iface1)

= bridge and sniff with isotp soft sockets set up vcan0 and vcan1 for package change vcan1

drain_bus(iface0)
drain_bus(iface1)

succ = False
with new_can_socket0() as can0_0, \
        new_can_socket0() as can0_1, \
        new_can_socket1() as can1_0, \
        new_can_socket1() as can1_1, \
        ISOTPSoftSocket(can0_0, sid=0x241, did=0x641) as isoTpSocket0, \
        ISOTPSoftSocket(can1_0, sid=0x641, did=0x241) as isoTpSocket1, \
        ISOTPSoftSocket(can0_1, sid=0x641, did=0x241) as bSocket0, \
        ISOTPSoftSocket(can1_1, sid=0x241, did=0x641) as bSocket1:
    evt = threading.Event()
    def forwarding(pkt):
        pkt.data = 'changed'
        return pkt
    def bridge():
        global succ
        bridge_and_sniff(if1=bSocket0, if2=bSocket1, xfrm12=forwarding, xfrm21=forwarding, timeout=5,
                         started_callback=evt.set, count=1)
        succ = True
    threadBridge = threading.Thread(target=bridge)
    threadBridge.start()
    evt.wait(timeout=5)
    packetsVCan1 = isoTpSocket1.sniff(timeout=2, count=1, started_callback=lambda: isoTpSocket0.send(ISOTP(b'Request')))
    threadBridge.join(timeout=5)
    assert not threadBridge.is_alive()

assert len(packetsVCan1) == 1
assert packetsVCan1[0].data == b'changed'
assert succ

drain_bus(iface0)
drain_bus(iface1)

= Two ISOTPSoftSockets at the same time, sending and receiving

with new_can_socket0() as cs1, ISOTPSoftSocket(cs1, sid=0x641, did=0x241) as s1, \
        new_can_socket0() as cs2, ISOTPSoftSocket(cs2, sid=0x241, did=0x641) as s2:
    isotp = ISOTP(data=b"\x10\x25" * 43)
    s2.send(isotp)
    result = s1.sniff(count=1, timeout=5)

assert len(result) == 1
assert(result[0].data == isotp.data)


= Two ISOTPSoftSockets at the same time, sending and receiving with tx_gap

with new_can_socket0() as cs1, ISOTPSoftSocket(cs1, sid=0x641, did=0x241, stmin=1) as s1, \
        new_can_socket0() as cs2, ISOTPSoftSocket(cs2, sid=0x241, did=0x641) as s2:
    isotp = ISOTP(data=b"\x10\x25" * 43)
    s2.send(isotp)
    result = s1.sniff(count=1, timeout=5)

assert len(result) == 1
assert(result[0].data == isotp.data)


= Two ISOTPSoftSockets at the same time, multiple sends/receives
with new_can_socket0() as cs1, ISOTPSoftSocket(cs1, sid=0x641, did=0x241) as s1, \
        new_can_socket0() as cs2, ISOTPSoftSocket(cs2, sid=0x241, did=0x641) as s2:
    for i in range(1, 40, 5):
        isotp = ISOTP(data=bytearray(range(i, i * 2)))
        s2.send(isotp)
        result = s1.sniff(count=1, timeout=5)
        assert len(result)
        assert (result[0].data == isotp.data)


= Send a single frame ISOTP message with padding
with new_can_socket0() as cs1, ISOTPSoftSocket(cs1, sid=0x641, did=0x241, padding=True) as s:
    with new_can_socket(iface0) as cans:
        s.send(ISOTP(data=dhex("01")))
        res = cans.sniff(timeout=1, count=1)[0]
    assert(res.length == 8)


= Send a two-frame ISOTP message with padding
acker_ready = threading.Event()
def acker():
    with new_can_socket(iface0) as acks:
        acker_ready.set()
        can = acks.sniff(timeout=1, count=1)[0]
        acks.send(CAN(identifier = 0x241, data=dhex("30 00 00")))

with new_can_socket(iface0) as cans:
    ack_thread = Thread(target=acker)
    ack_thread.start()
    acker_ready.wait(timeout=5)
    with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241, padding=True) as s:
        s.send(ISOTP(data=dhex("01 02 03 04 05 06 07 08")))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x641)
        assert(can.data == dhex("10 08 01 02 03 04 05 06"))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x241)
        assert(can.data == dhex("30 00 00"))
        can = cans.sniff(timeout=1, count=1)[0]
        assert(can.identifier == 0x641)
        assert(can.data == dhex("21 07 08 CC CC CC CC CC"))
    ack_thread.join(timeout=5)
    assert not ack_thread.is_alive()


= Receive a padded single frame ISOTP message with padding disabled
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241, padding=False) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier=0x241, data=dhex("02 05 06 00 00 00 00 00")))
        res = s.recv()
        assert(res.data == dhex("05 06"))


= Receive a padded single frame ISOTP message with padding enabled
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241, padding=True) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier=0x241, data=dhex("02 05 06 00 00 00 00 00")))
        res = s.recv()
        assert(res.data == dhex("05 06"))


= Receive a non-padded single frame ISOTP message with padding enabled
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241, padding=True) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier=0x241, data=dhex("02 05 06")))
        res = s.recv()
        assert(res.data == dhex("05 06"))


= Receive a padded two-frame ISOTP message with padding enabled
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241, padding=True) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier=0x241, data=dhex("10 09 01 02 03 04 05 06")))
        cans.send(CAN(identifier=0x241, data=dhex("21 07 08 09 00 00 00 00")))
        res = s.recv()
        assert(res.data == dhex("01 02 03 04 05 06 07 08 09"))


= Receive a padded two-frame ISOTP message with padding disabled
with new_can_socket0() as isocan, ISOTPSoftSocket(isocan, sid=0x641, did=0x241, padding=False) as s:
    with new_can_socket(iface0) as cans:
        cans.send(CAN(identifier=0x241, data=dhex("10 09 01 02 03 04 05 06")))
        cans.send(CAN(identifier=0x241, data=dhex("21 07 08 09 00 00 00 00")))
        res = s.recv()
        res.show()
        assert(res.data == dhex("01 02 03 04 05 06 07 08 09"))

+ Cleanup

= Cleanup reference to ISOTPSoftSocket to let the thread end
s = None

= Delete vcan interfaces

assert cleanup_interfaces()
