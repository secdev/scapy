% knx layer test campaign

+ Syntax check
= Import the knx layer
from scapy.contrib.knx import *

+ Test KNX Header
= Header default values
pkt = KNX()
assert raw(pkt) == b'\x06\x10\x00\x00\x00\x06'

= KNX Header payload length calculation
pkt = KNX(service_identifier=0x0203)/KNXDescriptionRequest()
assert raw(pkt)[4:6] == b'\x00\x0e'

= KNX Header Guess Payload KNXSearchRequest
p = KNX(b'\x06\x10\x02\x01\x00\x0e\x08\x01\x00\x00\x00\x00\x00\x00')
assert isinstance(p.payload, KNXSearchRequest)

= KNX Header Guess Payload KNXSearchResponse
p = KNX(b'\x06\x10\x02\x02\x00F\x08\x01\x00\x00\x00\x00\x00\x006\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02')
assert isinstance(p.payload, KNXSearchResponse)

= KNX Header Guess Payload KNXDescriptionRequest
p = KNX(b'\x06\x10\x02\x03\x00\x0e\x08\x01\x00\x00\x00\x00\x00\x00')
assert isinstance(p.payload, KNXDescriptionRequest)

= KNX Header Guess Payload KNXDescriptionResponse
p = KNX(b'\x06\x10\x02\x04\x00>6\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02')
assert isinstance(p.payload, KNXDescriptionResponse)

= KNX Header Guess Payload KNXConnectRequest
p = KNX(b'\x06\x10\x02\x05\x00\x18\x08\x01\x00\x00\x00\x00\x00\x00\x08\x01\x00\x00\x00\x00\x00\x00\x02\x03')
assert isinstance(p.payload, KNXConnectRequest)

= KNX Header Guess Payload KNXConnectResponse
p = KNX(b'\x06\x10\x02\x06\x00\x12\x00\x00\x08\x01\x00\x00\x00\x00\x00\x00\x02\x03')
assert isinstance(p.payload, KNXConnectResponse)

= KNX Header Guess Payload KNXConnectionstateRequest
p = KNX(b'\x06\x10\x02\x07\x00\x10\x00\x00\x08\x01\x00\x00\x00\x00\x00\x00')
assert isinstance(p.payload, KNXConnectionstateRequest)

= KNX Header Guess Payload KNXConnectionstateResponse
p = KNX(b'\x06\x10\x02\x08\x00\x08\x00\x00')
assert isinstance(p.payload, KNXConnectionstateResponse)

= KNX Header Guess Payload KNXDisconnectRequest
p = KNX(b'\x06\x10\x02\t\x00\x10\x01\x00\x08\x01\x00\x00\x00\x00\x00\x00')
assert isinstance(p.payload, KNXDisconnectRequest)

= KNX Header Guess Payload KNXDisconnectResponse
p = KNX(b'\x06\x10\x02\n\x00\x08\x00\x00')
assert isinstance(p.payload, KNXDisconnectResponse)

= KNX Header Guess Payload KNXConfigurationRequest
p = KNX(b'\x06\x10\x03\x10\x00\x15\x04\x01\x00\x00\x00\x00\xbc\xe0\x00\x00\n\x03\x01\x00\x80')
assert isinstance(p.payload, KNXConfigurationRequest)

= KNX Header Guess Payload KNXConfigurationACK
p = KNX(b'\x06\x10\x03\x11\x00\n\x04\x01\x00\x00')
assert isinstance(p.payload, KNXConfigurationACK)

= KNX Header Guess Payload KNXTunnelingRequest
p = KNX(b'\x06\x10\x04 \x00\x15\x04\x01\x00\x00\x00\x00\xbc\xe0\x00\x00\n\x03\x01\x00\x80')
assert isinstance(p.payload, KNXTunnelingRequest)

= KNX Header Guess Payload KNXTunnelingACK
p = KNX(b'\x06\x10\x04!\x00\n\x04\x01\x00\x00')
assert isinstance(p.payload, KNXTunnelingACK)

+ Test KNX packet parsing
= KNX Search Request
pkt = KNX(b'\x06\x10\x02\x01\x00\x0e\x08\x01\x00\x00\x00\x00\x00\x00')
assert pkt.service_identifier == 0x0201
assert pkt.discovery_endpoint.ip_address == "0.0.0.0"

= KNX Search response
pkt = KNX(b'\x06\x10\x02\x02\x00F\x08\x01\x00\x00\x00\x00\x00\x006\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02')
assert pkt.service_identifier == 0x0202
assert pkt.device_info.description_type == 1

+ Test KNX packet building
= KNX Search Request
pkt = KNX()/KNXSearchRequest()
pkt.discovery_endpoint.ip_address = "192.168.1.1"
assert raw(pkt) == b'\x06\x10\x02\x01\x00\x0e\x08\x01\xc0\xa8\x01\x01\x00\x00'

= KNX Search Response
pkt = KNX()/KNXSearchResponse()
pkt.control_endpoint.port = 3671
pkt.device_info.device_multicast_address = "224.0.23.12"
pkt.device_info.device_mac_address = "ff:ff:ff:ff:ff:ff"

assert raw(pkt) == b'\x06\x10\x02\x02\x00F\x08\x01\x00\x00\x00\x00\x0eW6\x01\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x00\x17\x0c\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02'

= KNX Individual address parsing
test_addr = DIBDeviceInfo()
test_addr.knx_address = "1.1.1"
assert test_addr.knx_address == 0x1101

= CEMI individual address in a field that takes multiple types
test_addr = CEMI(message_code=0x11) # L_Data.req
test_addr.cemi_data.address_type = 0 # Individual address
test_addr.cemi_data.destination_address = "1.1.1"

= CEMI group address in a field that takes multiple types
test_addr = CEMI(message_code=0x11) # L_Data.req
test_addr.cemi_data.address_type = 1 # Group address
test_addr.cemi_data.destination_address = "1/1/1"
