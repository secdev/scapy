% Regression tests for enumerators

+ Load general modules

= Load contribution layer

from scapy.contrib.automotive.enumerator import *
from scapy.contrib.automotive.uds import *


+ Basic checks
= Enumerator basecls checks

pkts = [
    Enumerator.ScanResult("s1", UDS(b"\x20abcd"), UDS(b"\x60abcd")),
    Enumerator.ScanResult("s2", UDS(b"\x20abcd"), None),
    Enumerator.ScanResult("s1", UDS(b"\x21abcd"), UDS(b"\x7fabcd")),
    Enumerator.ScanResult("s2", UDS(b"\x21abcd"), UDS(b"\x61abcd")),
]

pkts[0].req.sent_time = 1.0
pkts[1].req.sent_time = 2.0
pkts[2].req.sent_time = 3.0
pkts[3].req.sent_time = 4.0


pkts[0].resp.time = 1.9
pkts[2].resp.time = 3.1
pkts[3].resp.time = 4.5


e = Enumerator(None)
e.results = pkts


= Enumerator not completed check

assert e.completed == False


= Enumerator stats check

e.update_stats()
assert e.stats["answered"] == 3
assert e.stats["unanswered"] == 1
assert round(e.stats["answertime_max"], 1) == 0.9
assert round(e.stats["answertime_min"], 1) == 0.1
assert round(e.stats["answertime_avg"], 1) == 0.5
assert e.stats["negative_resps"] == 1


= Enumerator filtered results

assert len(e.filtered_results) == 3
assert e.filtered_results[0] == pkts[0]
assert e.filtered_results[1] == pkts[2]


= Enumerator scanned states

assert len(e.scanned_states) == 2
assert {"s1", "s2"} == e.scanned_states

= Enumerator show

def show_negative_response_details(self, dump=False):
    pass


def get_table_entry(tup):
    state, req, res = tup
    label = Enumerator.get_label(res)
    return state, "0x%02x: %s" % (req.service, req.sprintf("%UDS.service%")), label

e.show_negative_response_details = show_negative_response_details
e.get_table_entry = get_table_entry

e.show(filtered=False)

dump = e.show(dump=True, filtered=False)
assert "NegativeResponse" in dump
assert "PositiveResponse" in dump
assert "PR:" in dump
assert "NR:" in dump
assert "s1" in dump
assert "s2" in dump
assert "Times between request and response:\tMIN: 0.100000\tMAX: 0.900000\tAVG: 0.500000" in dump


= Enumerator get_label

assert Enumerator.get_label(pkts[0].resp) == "PR: PositiveResponse"
assert Enumerator.get_label(pkts[1].resp) == "Timeout"
assert Enumerator.get_label(pkts[2].resp) == "NR: NegativeResponse"
assert Enumerator.get_label(pkts[3].resp, lambda: "positive") == "positive"
assert Enumerator.get_label(pkts[3].resp, lambda: "positive" + hex(pkts[3].req.service)) == "positive" + "0x21"

= Enumerator completed

e.state_completed["s1"] = True
e.state_completed["s2"] = True

assert e.completed
