% Regression tests for ECU_am

+ Configuration
~ conf

= Imports
load_layer("can")
conf.contribs['CAN']['swap-bytes'] = False
import os, threading, six, subprocess, sys
from subprocess import call
from scapy.consts import LINUX

= Definition of constants, utility functions and mock classes
iface0 = "vcan0"
iface1 = "vcan1"

# function to exit when the can-isotp kernel module is not available
ISOTP_KERNEL_MODULE_AVAILABLE = False
def exit_if_no_isotp_module():
    if not ISOTP_KERNEL_MODULE_AVAILABLE:
        sys.stderr.write("TEST SKIPPED: can-isotp not available" + os.linesep)
        warning("Can't test ISOTP native socket because kernel module is not loaded")
        exit(0)


= Initialize a virtual CAN interface
~ vcan_socket needs_root linux
if 0 != call(["cansend", iface0,  "000#"]):
    # vcan0 is not enabled
    if 0 != call(["sudo", "modprobe", "vcan"]):
        raise Exception("modprobe vcan failed")
    if 0 != call(["sudo", "ip", "link", "add", "name", iface0, "type", "vcan"]):
        print("add %s failed: Maybe it was already up?" % iface0)
    if 0 != call(["sudo", "ip", "link", "set", "dev", iface0, "up"]):
        raise Exception("could not bring up %s" % iface0)

if 0 != call(["cansend", iface0,  "000#"]):
    raise Exception("cansend doesn't work")

if 0 != call(["cansend", iface1,  "000#"]):
    # vcan1 is not enabled
    if 0 != call(["sudo", "modprobe", "vcan"]):
        raise Exception("modprobe vcan failed")
    if 0 != call(["sudo", "ip", "link", "add", "name", iface1, "type", "vcan"]):
        print("add %s failed: Maybe it was already up?" % iface1)
    if 0 != call(["sudo", "ip", "link", "set", "dev", iface1, "up"]):
        raise Exception("could not bring up %s" % iface1)

if 0 != call(["cansend", iface1,  "000#"]):
    raise Exception("cansend doesn't work")

print("CAN should work now")

= Import CANSocket

from scapy.contrib.cansocket_python_can import *

new_can_socket = lambda iface: CANSocket(bustype='virtual', channel=iface)
new_can_socket0 = lambda: CANSocket(bustype='virtual', channel=iface0, timeout=0.01)
new_can_socket1 = lambda: CANSocket(bustype='virtual', channel=iface1, timeout=0.01)

# utility function for draining a can interface, asserting that no packets are there
def drain_bus(iface=iface0, assert_empty=True):
    with new_can_socket(iface) as s:
        pkts = s.sniff(timeout=0.1)
        if assert_empty:
            assert len(pkts) == 0

print("CAN sockets should work now")

= Overwrite definition for vcan_socket systems native sockets
~ vcan_socket not_pypy needs_root linux

if six.PY3 and LINUX:
    from scapy.contrib.cansocket_native import *
    new_can_socket = lambda iface: CANSocket(iface)
    new_can_socket0 = lambda: CANSocket(iface0)
    new_can_socket1 = lambda: CANSocket(iface1)


= Overwrite definition for vcan_socket systems python-can sockets
~ vcan_socket needs_root linux
if "python_can" in CANSocket.__module__:
    new_can_socket = lambda iface: CANSocket(bustype='socketcan', channel=iface, bitrate=250000, timeout=0.01)
    new_can_socket0 = lambda: CANSocket(bustype='socketcan', channel=iface0, bitrate=250000, timeout=0.01)
    new_can_socket1 = lambda: CANSocket(bustype='socketcan', channel=iface1, bitrate=250000, timeout=0.01)

= Verify that a CAN socket can be created and closed
s = new_can_socket(iface0)
s.close()


= Check if can-isotp and can-utils are installed on this system
~ linux
p1 = subprocess.Popen(['lsmod'], stdout = subprocess.PIPE)
p2 = subprocess.Popen(['grep', '^can_isotp'], stdout = subprocess.PIPE, stdin=p1.stdout)
p1.stdout.close()
if p1.wait() == 0 and p2.wait() == 0 and b"can_isotp" in p2.stdout.read():
    p = subprocess.Popen(["isotpsend", "-s1", "-d0", iface0], stdin = subprocess.PIPE)
    p.communicate(b"01")
    if p.returncode == 0:
        ISOTP_KERNEL_MODULE_AVAILABLE = True


+ Syntax check

= Import isotp

conf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': ISOTP_KERNEL_MODULE_AVAILABLE}
load_contrib("isotp")

if six.PY3 and ISOTP_KERNEL_MODULE_AVAILABLE:
    from scapy.contrib.isotp import ISOTPNativeSocket
    ISOTPSocket = ISOTPNativeSocket
    assert ISOTPSocket == ISOTPNativeSocket
else:
    from scapy.contrib.isotp import ISOTPSoftSocket
    ISOTPSocket = ISOTPSoftSocket
    assert ISOTPSocket == ISOTPSoftSocket

############
############
+ Load general modules

= Load contribution layer

load_contrib('automotive.uds')
load_contrib('automotive.ecu')


+ Simulator tests

= Simple check with RDBI and Negative Response
drain_bus(iface0)

example_responses = \
    [ECUResponse(session=1, security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=0x1234) / Raw(b"deadbeef"))]

success = False

with new_can_socket0() as isocan1, ISOTPSocket(isocan1, sid=0x700, did=0x600, basecls=UDS) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, sid=0x600, did=0x700, basecls=UDS) as tester:
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=UDS, verbose=False)
    sim = threading.Thread(target=answering_machine, kwargs={'timeout': 60, 'stop_filter': lambda p: p.service==0xff})
    sim.start()
    time.sleep(0.1)
    try:
        resp = tester.sr1(UDS()/UDS_RDBI(identifiers=[0x123]), timeout=1, verbose=False)
        assert resp.negativeResponseCode == 0x10
        assert resp.requestServiceId == 34
        resp = tester.sr1(UDS(service=0x22), timeout=1, verbose=False)
        assert resp.negativeResponseCode == 0x10
        assert resp.requestServiceId == 34
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[0x1234]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 0x1234
        assert resp.load == b"deadbeef"
        success = True
    except Exception as ex:
        print(ex)
    finally:
        tester.send(UDS(service=0xff))
        sim.join(timeout=10)

assert success

= Simple check with different Sessions
drain_bus(iface0)

example_responses = \
    [ECUResponse(session=2, security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=2) / Raw(b"deadbeef1")),
     ECUResponse(session=range(3,5), security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=3) / Raw(b"deadbeef2")),
     ECUResponse(session=[5,6,7], security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=5) / Raw(b"deadbeef3")),
     ECUResponse(session=lambda x: 8 < x <= 10, security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=9) / Raw(b"deadbeef4"))]

success = False

with new_can_socket0() as isocan1, ISOTPSocket(isocan1, sid=0x700, did=0x600, basecls=UDS) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, sid=0x600, did=0x700, basecls=UDS) as tester:
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=UDS)
    sim = threading.Thread(target=answering_machine, kwargs={'timeout': 60, 'stop_filter': lambda p: p.service==0xff})
    sim.start()
    time.sleep(0.1)
    try:
        resp = tester.sr1(UDS()/UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.negativeResponseCode == 0x10
        assert resp.requestServiceId == 34
        answering_machine.ecu_state.current_session = 2
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 2
        assert resp.load == b"deadbeef1"
        answering_machine.ecu_state.current_session = 4
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 3
        assert resp.load == b"deadbeef2"
        answering_machine.ecu_state.current_session = 6
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 5
        assert resp.load == b"deadbeef3"
        answering_machine.ecu_state.current_session = 9
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 9
        assert resp.load == b"deadbeef4"
        success = True
    except Exception as ex:
        print(ex)
    finally:
        tester.send(UDS(service=0xff))
        sim.join(timeout=10)

assert success

= Simple check with different Sessions and diagnosticSessionControl
drain_bus(iface0)

example_responses = \
    [ECUResponse(session=2, security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=2) / Raw(b"deadbeef1")),
     ECUResponse(session=range(3,5), security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=3) / Raw(b"deadbeef2")),
     ECUResponse(session=[5,6,7], security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=5) / Raw(b"deadbeef3")),
     ECUResponse(session=lambda x: 8 < x <= 10, security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=9) / Raw(b"deadbeef4")),
     ECUResponse(session=range(0,8), security_level=lambda x: x==0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=1, sessionParameterRecord=b"dead")),
     ECUResponse(session=range(0,8), security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=2, sessionParameterRecord=b"dead")),
     ECUResponse(session=range(0,8), security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=3, sessionParameterRecord=b"dead")),
     ECUResponse(session=range(0,8), security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=4, sessionParameterRecord=b"dead")),
     ECUResponse(session=range(0,8), security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=5, sessionParameterRecord=b"dead")),
     ECUResponse(session=range(0,8), security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=6, sessionParameterRecord=b"dead")),
     ECUResponse(session=range(0,8), security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=7, sessionParameterRecord=b"dead")),
     ECUResponse(session=range(0,8), security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=8, sessionParameterRecord=b"dead")),
     ECUResponse(session=range(8,10), security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=9, sessionParameterRecord=b"dead1")),
     ECUResponse(session=range(8,10), security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=9, sessionParameterRecord=b"dead2")),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_NR(negativeResponseCode=0x7f, requestServiceId=0x10))]

success = False

with new_can_socket0() as isocan1, ISOTPSocket(isocan1, sid=0x700, did=0x600, basecls=UDS) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, sid=0x600, did=0x700, basecls=UDS) as tester:
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=UDS)
    sim = threading.Thread(target=answering_machine, kwargs={'timeout': 60, 'stop_filter': lambda p: p.service==0xff})
    sim.start()
    time.sleep(0.1)
    try:
        resp = tester.sr1(UDS()/UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.negativeResponseCode == 0x10
        assert resp.requestServiceId == 34
        resp = tester.sr1(UDS()/UDS_DSC(diagnosticSessionType=2), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 2
        assert resp.sessionParameterRecord == b"dead"
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 2
        assert resp.load == b"deadbeef1"
        resp = tester.sr1(UDS()/UDS_DSC(diagnosticSessionType=4), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 4
        assert resp.sessionParameterRecord == b"dead"
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 3
        assert resp.load == b"deadbeef2"
        resp = tester.sr1(UDS()/UDS_DSC(diagnosticSessionType=6), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 6
        assert resp.sessionParameterRecord == b"dead"
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 5
        assert resp.load == b"deadbeef3"
        resp = tester.sr1(UDS()/UDS_DSC(diagnosticSessionType=8), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 8
        assert resp.sessionParameterRecord == b"dead"
        resp = tester.sr1(UDS() / UDS_DSC(diagnosticSessionType=9), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 9
        assert resp.sessionParameterRecord == b"dead1"
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 9
        assert resp.load == b"deadbeef4"
        success = True
    except Exception as ex:
        print(ex)
    finally:
        tester.send(UDS(service=0xff))
        sim.join(timeout=10)

assert success

= Simple check with different Sessions and diagnosticSessionControl and answers hook
drain_bus(iface0)

def custom_answers(resp, req):
    if req.service + 0x40 != resp.service:
        return False
    if hasattr(req, "diagnosticSessionType"):
        if 0 < req.diagnosticSessionType <= 8:
            resp.diagnosticSessionType = req.diagnosticSessionType
            return resp.answers(req)
    return False

example_responses = \
    [ECUResponse(session=2,                     security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=2) / Raw(b"deadbeef1")),
     ECUResponse(session=range(3,5),            security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=3) / Raw(b"deadbeef2")),
     ECUResponse(session=[5,6,7],               security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=5) / Raw(b"deadbeef3")),
     ECUResponse(session=lambda x: 8 < x <= 10, security_level=0, responses=UDS() / UDS_RDBIPR(dataIdentifier=9) / Raw(b"deadbeef4")),
     ECUResponse(session=range(0,8),            security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=1, sessionParameterRecord=b"dead"), answers=custom_answers),
     ECUResponse(session=range(8,10),           security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=9, sessionParameterRecord=b"dead1")),
     ECUResponse(session=range(8,10),           security_level=0, responses=UDS() / UDS_DSCPR(diagnosticSessionType=9, sessionParameterRecord=b"dead2")),
     ECUResponse(session=range(0,255),          security_level=0, responses=UDS() / UDS_NR(negativeResponseCode=0x7f, requestServiceId=0x10))]

success = False

with new_can_socket0() as isocan1, ISOTPSocket(isocan1, sid=0x700, did=0x600, basecls=UDS) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, sid=0x600, did=0x700, basecls=UDS) as tester:
    answering_machine = ECU_am(supported_responses=example_responses,
                               main_socket=ecu, basecls=UDS)
    sim = threading.Thread(target=answering_machine, kwargs={'timeout': 60, 'stop_filter': lambda p: p.service==0xff})
    sim.start()
    time.sleep(0.1)
    try:
        resp = tester.sr1(UDS()/UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.negativeResponseCode == 0x10
        assert resp.requestServiceId == 34
        resp = tester.sr1(UDS()/UDS_DSC(diagnosticSessionType=2), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 2
        assert resp.sessionParameterRecord == b"dead"
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 2
        assert resp.load == b"deadbeef1"
        resp = tester.sr1(UDS()/UDS_DSC(diagnosticSessionType=4), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 4
        assert resp.sessionParameterRecord == b"dead"
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 3
        assert resp.load == b"deadbeef2"
        resp = tester.sr1(UDS()/UDS_DSC(diagnosticSessionType=6), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 6
        assert resp.sessionParameterRecord == b"dead"
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 5
        assert resp.load == b"deadbeef3"
        resp = tester.sr1(UDS()/UDS_DSC(diagnosticSessionType=8), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 8
        assert resp.sessionParameterRecord == b"dead"
        resp = tester.sr1(UDS() / UDS_DSC(diagnosticSessionType=9), timeout=1, verbose=False)
        assert resp.service == 0x50
        assert resp.diagnosticSessionType == 9
        assert resp.sessionParameterRecord == b"dead1"
        resp = tester.sr1(UDS() / UDS_RDBI(identifiers=[2, 3, 5, 9]), timeout=1, verbose=False)
        assert resp.service == 0x62
        assert resp.dataIdentifier == 9
        assert resp.load == b"deadbeef4"
        success = True
    except Exception as ex:
        print(ex)
    finally:
        tester.send(UDS(service=0xff))
        sim.join(timeout=10)

assert success

= Simple check with security access and answers hook
drain_bus(iface0)

security_seed = b"abcd"

def custom_answers(resp, req):
    global security_seed
    if req.service + 0x40 != resp.service or req.service != 0x27:
        return False
    if req.securityAccessType == 1:
        resp.securitySeed = security_seed
        return resp.answers(req)
    elif req.securityAccessType == 2:
        return resp.answers(req) and req.securityKey == security_seed + security_seed
    return False

example_responses = \
    [ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_SAPR(securityAccessType=1, securitySeed=b"1234"), answers=custom_answers),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_SAPR(securityAccessType=2), answers=custom_answers),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_NR(negativeResponseCode=0x35, requestServiceId=0x27)),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_NR(negativeResponseCode=0x7f, requestServiceId=0x10))]

success = False

with new_can_socket0() as isocan1, ISOTPSocket(isocan1, sid=0x700, did=0x600, basecls=UDS) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, sid=0x600, did=0x700, basecls=UDS) as tester:
    answering_machine = ECU_am(supported_responses=example_responses,
                               main_socket=ecu, basecls=UDS)
    sim = threading.Thread(target=answering_machine, kwargs={'timeout': 10, 'stop_filter': lambda p: p.service==0xff})
    sim.start()
    time.sleep(0.1)
    try:
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=1), timeout=1, verbose=False)
        assert resp.service == 0x67
        assert resp.securitySeed == b"abcd"
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=2, securityKey=resp.securitySeed), timeout=1, verbose=False)
        assert resp.service == 0x7f
        assert resp.negativeResponseCode == 0x35
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=1), timeout=1, verbose=False)
        assert resp.service == 0x67
        assert resp.securitySeed == b"abcd"
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=2, securityKey=resp.securitySeed+resp.securitySeed), timeout=1, verbose=False)
        assert resp.service == 0x67
        success = True
    except Exception as ex:
        print(ex)
    finally:
        tester.send(UDS(service=0xff))
        sim.join(timeout=10)

assert success

= Simple check with security access and answers hook and request-correctly-received message
drain_bus(iface0)

security_seed = b"abcd"

def custom_answers(resp, req):
    global security_seed
    if req.service + 0x40 != resp.service or req.service != 0x27:
        return False
    if req.securityAccessType == 1:
        resp.securitySeed = security_seed
        return resp.answers(req)
    elif req.securityAccessType == 2:
        return resp.answers(req) and req.securityKey == security_seed + security_seed
    return False

example_responses = \
    [ECUResponse(session=range(0,255), security_level=0, responses=[UDS()/UDS_NR(negativeResponseCode=0x78, requestServiceId=0x27), UDS() / UDS_SAPR(securityAccessType=1, securitySeed=b"1234")], answers=custom_answers),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_SAPR(securityAccessType=2), answers=custom_answers),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_NR(negativeResponseCode=0x35, requestServiceId=0x27)),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_NR(negativeResponseCode=0x7f, requestServiceId=0x10))]

success = False

with new_can_socket0() as isocan1, ISOTPSocket(isocan1, sid=0x700, did=0x600, basecls=UDS) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, sid=0x600, did=0x700, basecls=UDS) as tester:
    answering_machine = ECU_am(supported_responses=example_responses,
                               main_socket=ecu, basecls=UDS)
    sim = threading.Thread(target=answering_machine, kwargs={'timeout': 10, 'stop_filter': lambda p: p.service==0xff})
    sim.start()
    time.sleep(0.1)
    try:
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=1), timeout=2, verbose=False)
        assert resp.service == 0x67
        assert resp.securitySeed == b"abcd"
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=2, securityKey=resp.securitySeed), timeout=2, verbose=False)
        assert resp.service == 0x7f
        assert resp.negativeResponseCode == 0x35
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=1), timeout=2, verbose=False)
        assert resp.service == 0x67
        assert resp.securitySeed == b"abcd"
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=2, securityKey=resp.securitySeed+resp.securitySeed), timeout=2, verbose=False)
        assert resp.service == 0x67
        success = True
    except Exception as ex:
        print(ex)
    finally:
        tester.send(UDS(service=0xff))
        sim.join(timeout=10)

assert success

= Simple check with security access and answers hook and request-correctly-received message 2
drain_bus(iface0)

security_seed = b"abcd"

def custom_answers(resp, req):
    global security_seed
    if req.service + 0x40 != resp.service or req.service != 0x27:
        return False
    if req.securityAccessType == 1:
        resp.securitySeed = security_seed
        return resp.answers(req)
    elif req.securityAccessType == 2:
        return resp.answers(req) and req.securityKey == security_seed + security_seed
    return False

example_responses = \
    [ECUResponse(session=range(0,255), security_level=0, responses=[UDS()/UDS_NR(negativeResponseCode=0x78, requestServiceId=0x27), UDS() / UDS_SAPR(securityAccessType=1, securitySeed=b"1234")], answers=custom_answers),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_SAPR(securityAccessType=2), answers=custom_answers),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_NR(negativeResponseCode=0x35, requestServiceId=0x27)),
     ECUResponse(session=range(0,255), security_level=0, responses=UDS() / UDS_NR(negativeResponseCode=0x7f, requestServiceId=0x10))]

conf.contribs['UDS']['treat-response-pending-as-answer'] = True

success = False

with new_can_socket0() as isocan1, ISOTPSocket(isocan1, sid=0x700, did=0x600, basecls=UDS) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, sid=0x600, did=0x700, basecls=UDS) as tester:
    answering_machine = ECU_am(supported_responses=example_responses,
                               main_socket=ecu, basecls=UDS)
    sim = threading.Thread(target=answering_machine, kwargs={'timeout':5, 'stop_filter': lambda p: p.service==0xff})
    sim.start()
    time.sleep(0.1)
    try:
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=1), timeout=1, verbose=False)
        assert resp.service == 0x7f
        assert resp.negativeResponseCode == 0x78
        resp = tester.sniff(timeout=2, count=1, verbose=False)[0]
        assert resp.service == 0x67
        assert resp.securitySeed == b"abcd"
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=2, securityKey=resp.securitySeed), timeout=3, verbose=False)
        assert resp.service == 0x7f
        assert resp.negativeResponseCode == 0x35
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=1), timeout=1, verbose=False)
        assert resp.service == 0x7f
        assert resp.negativeResponseCode == 0x78
        resp = tester.sniff(timeout=2, count=1, verbose=False)[0]
        assert resp.service == 0x67
        assert resp.securitySeed == b"abcd"
        resp = tester.sr1(UDS() / UDS_SA(securityAccessType=2, securityKey=resp.securitySeed+resp.securitySeed), timeout=1, verbose=False)
        assert resp.service == 0x67
        success = True
    except Exception as ex:
        print(ex)
    finally:
        tester.send(UDS(service=0xff))
        sim.join(timeout=10)

assert success

conf.contribs['UDS']['treat-response-pending-as-answer'] = False

+ Cleanup

= Delete vcan interfaces
~ vcan_socket needs_root linux

if 0 != call(["sudo", "ip", "link", "delete", iface0]):
        raise Exception("%s could not be deleted" % iface0)

if 0 != call(["sudo", "ip", "link", "delete", iface1]):
        raise Exception("%s could not be deleted" % iface1)
