% Regression tests for the Ecu utility

# More information at http://www.secdev.org/projects/UTscapy/

############
############

+ Setup
~ conf command

= Load modules

import copy
import itertools

load_contrib("isotp", globals_dict=globals())
load_contrib("automotive.uds", globals_dict=globals())
load_contrib("automotive.gm.gmlan", globals_dict=globals())
load_layer("can", globals_dict=globals())
conf.contribs["CAN"]["swap-bytes"] = True

= Load Ecu module

load_contrib("automotive.ecu", globals_dict=globals())

+ EcuState Basic checks

= Check EcuState basic functionality

state = EcuState()
state["session"] = 2
state["securityAccess"] = 4
print(repr(state))
assert repr(state) == "securityAccess4session2"

= More complex tests

state = EcuState(ses=4)
assert state.ses == 4
state.ses = 5
assert state.ses == 5

= Even more complex tests

state = EcuState(myinfo="42")

state.ses = 5
assert state.ses == 5

state["ses"] = None
assert state.ses is None

state.ses = 5
assert 5 == state.ses

assert "42" == state.myinfo
assert repr(state) == "myinfo42ses5"



= Copy tests

state = EcuState(myinfo="42")
state.ses = 5

ns = copy.copy(state)

ns.ses = 6

assert ns.ses == 6
assert state.ses == 5
assert ns.myinfo == "42"


= Move tests

state = EcuState(myinfo="42")
state.ses = 5

ns = state

ns.ses = 6

assert ns.ses == 6
assert state.ses == 6
assert ns.myinfo == "42"

= equal tests

state = EcuState(myinfo="42")
state.ses = 5

ns = copy.copy(state)

assert state == ns
assert hash(state) == hash(ns)

ns.ses = 6

assert state != ns
assert hash(state) != hash(ns)

ns.ses = 5

assert state == ns
assert hash(state) == hash(ns)

ns.sa = 5

assert state != ns
assert hash(state) != hash(ns)


= hash tests

state = EcuState(myinfo="42")
state.ses = 5

ns = copy.copy(state)

assert hash(state) == hash(ns)

ns.ses = 6

assert hash(state) != hash(ns)

ns.ses = 5

assert hash(state) == hash(ns)

ns.sa = 5

assert hash(state) != hash(ns)

= command tests

state = EcuState(myinfo="42")
state.ses = 5

state.command()
assert "EcuState(myinfo='42', ses=5)" == state.command()

= less than tests

s1 = EcuState()
s2 = EcuState()

s1.a = 1
s2.a = 2

assert s1 < s2

s1.b = 4

assert s1 > s2

s2.b = 1

assert s1 < s2

s1.a = 2

assert s1 > s2

= less than tests 2

s1 = EcuState()
s2 = EcuState()

s1.c = "x"
s2.c = 4
exception = False

try:
    assert s1 < s2
except TypeError:
    exception = True

assert exception

= less than tests 3

s1 = EcuState()
s2 = EcuState()


s1.A = 1
s1.a = 2

s2.A = 2
s2.a = 1

assert s1 < s2

= less than tests 4

s1 = EcuState()
s2 = EcuState()


s1.A = 1
s1.a = 2

s2.A = 2
s2.b = 100

assert s1 < s2

= less than tests 5

s1 = EcuState()
s2 = EcuState()


s1.A = 100
s1.a = 2

s2.A = 2
s2.b = 100

assert s1 > s2

= less than tests 6

s1 = EcuState()
s2 = EcuState()


s1.A = 100
s1.B = 200

s2.a = 2
s2.b = 1

assert s1 < s2

= contains test

s1 = EcuState(ses=[1,2,3])
s2 = EcuState(ses=1)

assert s1 != s2
assert s2 in s1
assert s1 not in s2

s1 = EcuState(ses=[2,3])
s2 = EcuState(ses=1)

assert s1 != s2
assert s2 not in s1
assert s1 not in s2


s1 = EcuState(ses=[1,2,3], security=5)
s2 = EcuState(ses=1)

assert s1 != s2
assert s2 not in s1
assert s1 not in s2

s1 = EcuState(ses=range(3), security=5)
s2 = EcuState(ses=1, security=5)

assert s1 != s2
assert s2 in s1
assert s1 not in s2

s1 = EcuState(ses=range(3), security=(x for x in range(1, 10, 2)))
s2 = EcuState(ses=1, security=5)

assert s1 != s2
assert s2 in s1
assert s1 not in s2

s1 = EcuState(ses=[1,2,3])
s2 = EcuState(ses=[1,2,3])

assert s1 in s2
assert s2 in s1
assert s1 == s2

s1 = EcuState(ses=range(3), security=range(5))
for ses, sec in itertools.product(range(3), range(5)):
    s2 = EcuState(ses=ses, security=sec)
    assert s1 != s2
    assert s2 in s1
    assert s1 not in s2


s1 = EcuState(ses=[0, 1, 2], security=[43, 44])
for ses, sec in itertools.product(range(3), range(43, 45)):
    s2 = EcuState(ses=ses, security=sec)
    assert s1 != s2
    assert s2 in s1
    assert s1 not in s2

s1 = EcuState(ses=[0, 1, 2], security=["a", "b"])
for ses, sec in itertools.product(range(3), (x for x in "ab")):
    s2 = EcuState(ses=ses, security=sec)
    assert s1 != s2
    assert s2 in s1
    try:
        assert s1 not in s2
    except TypeError:
        assert True

s1 = [EcuState(ses=1), EcuState(ses=2), EcuState(ses=3)]
s2 = EcuState(ses=3)

assert s2 in s1
assert s1 not in s2

+ Basic checks

= Check default init parameters

ecu = Ecu()
assert ecu.current_session == 1
assert ecu.current_security_level == 0
assert ecu.communication_control == 0

= Check init parameters

ecu = Ecu(init_session=5, init_security_level=4, init_communication_control=2)
assert ecu.current_session == 5
assert ecu.current_security_level == 4
assert ecu.communication_control == 2

= Check reset

ecu = Ecu(init_session=5, init_security_level=4, init_communication_control=2)
ecu.reset()
assert ecu.current_session == 1
assert ecu.current_security_level == 0
assert ecu.communication_control == 0

+ Simple operations

= Log all commands applied to an Ecu
~ docs
* This example shows the logging mechanism of an Ecu object.
* The log of an Ecu is a dictionary of applied UDS commands.
* The key for this dictionary the UDS service name. The value consists of a list
* of tuples, containing a timestamp and a log value

msgs = [UDS(service=16) / UDS_DSC(diagnosticSessionType=3),  # no_docs
        UDS(service=16) / UDS_DSC(diagnosticSessionType=4),  # no_docs
        UDS(service=16) / UDS_DSC(diagnosticSessionType=5),  # no_docs
        UDS(service=16) / UDS_DSC(diagnosticSessionType=6),  # no_docs
        UDS(service=16) / UDS_DSC(diagnosticSessionType=2)]  # no_docs

ecu = Ecu(verbose=False, store_supported_responses=False)
ecu.update(PacketList(msgs))
assert len(ecu.log["DiagnosticSessionControl"]) == 5  # no_docs
timestamp, value = ecu.log["DiagnosticSessionControl"][0]
assert timestamp > 0  # no_docs
assert value == "extendedDiagnosticSession"  # no_docs
assert ecu.log["DiagnosticSessionControl"][-1][1] == "programmingSession"  # no_docs


= Trace all commands applied to an Ecu
~ docs
* This example shows the trace mechanism of an Ecu object.
* Traces of the current state of the Ecu object and the received message are
* print on stdout. Some messages, depending on the protocol, will change the
* internal state of the Ecu.

msgs = [UDS(service=16) / UDS_DSC(diagnosticSessionType=3),  # no_docs
        UDS(service=80) / UDS_DSCPR(diagnosticSessionType=3, sessionParameterRecord=b'\\x002\\x01\\xf4')]  # no_docs

ecu = Ecu(verbose=True, logging=False, store_supported_responses=False)
ecu.update(PacketList(msgs))
assert ecu.current_session == 3  # no_docs
assert ecu.current_security_level == 0  # no_docs
assert ecu.communication_control == 0  # no_docs


= Generate supported responses of an Ecu
~ docs
* This example shows a mechanism to clone a real world Ecu by analyzing a list of Packets.

msgs = [UDS(service=16) / UDS_DSC(diagnosticSessionType=3),  # no_docs
        UDS(service=80) / UDS_DSCPR(diagnosticSessionType=3, sessionParameterRecord=b'\\x002\\x01\\xf4'),  # no_docs
        UDS(service=16) / UDS_DSC(diagnosticSessionType=4)]  # no_docs

ecu = Ecu(verbose=False, logging=False, store_supported_responses=True)
ecu.update(PacketList(msgs))
supported_responses = ecu.supported_responses
unanswered_packets = ecu.unanswered_packets
assert ecu.current_session == 3  # no_docs
assert ecu.current_security_level == 0  # no_docs
assert ecu.communication_control == 0  # no_docs
assert len(supported_responses) == 1  # no_docs
assert len(unanswered_packets) == 1  # no_docs
response = supported_responses[0]  # no_docs
assert response.in_correct_session(1)  # no_docs
assert response.has_security_access(0)  # no_docs
assert response.responses[-1].service == 80  # no_docs
assert unanswered_packets[0].diagnosticSessionType == 4  # no_docs


+ Advanced checks

= Analyze multiple UDS messages
~ docs
* This example shows how to load ``UDS`` messages from a ``.pcap`` file containing ``CAN`` messages
* A ``PcapReader`` object is used as socket and an ``ISOTPSession`` parses ``CAN`` frames to ``ISOTP`` frames
* which are then casted to ``UDS`` objects through the ``basecls`` parameter

with PcapReader("test/contrib/automotive/ecu_trace.pcap.gz") as sock:
     udsmsgs = sniff(session=ISOTPSession, session_kwargs={"use_ext_addr":False, "basecls":UDS}, count=50, opened_socket=sock, timeout=3)

assert len(udsmsgs) == 50  # no_docs

ecu = Ecu()
ecu.update(udsmsgs)
response = ecu.supported_responses[0]  # no_docs
assert response.in_correct_session(1)  # no_docs
assert response.has_security_access(0)  # no_docs
assert response.responses[0].service == 80  # no_docs
assert response.responses[0].diagnosticSessionType == 3  # no_docs
response = ecu.supported_responses[1]  # no_docs
assert response.in_correct_session(3)  # no_docs
assert response.has_security_access(0)  # no_docs
assert response.responses[0].service == 80  # no_docs
assert response.responses[0].diagnosticSessionType == 2  # no_docs
response = ecu.supported_responses[4]  # no_docs
assert response.in_correct_session(2)  # no_docs
assert response.has_security_access(18)  # no_docs
assert response.responses[0].service == 110  # no_docs
assert response.responses[0].dataIdentifier == 61786  # no_docs
assert len(ecu.log["TransferData"]) == 2


= Analyze on the fly with EcuSession
~ docs
* This example shows the usage of a EcuSession in sniff. An ISOTPSocket or any
* socket like object which returns entire messages of the right protocol can be used.
* A ``EcuSession`` is used as supersession in an ``ISOTPSession``. To obtain the ``Ecu`` object from a ``EcuSession``,
* the ``EcuSession`` has to be created outside of sniff.

session = EcuSession()

with PcapReader("test/contrib/automotive/ecu_trace.pcap.gz") as sock:
     udsmsgs = sniff(session=ISOTPSession, session_kwargs={"supersession": session, "use_ext_addr":False, "basecls":UDS}, count=50, opened_socket=sock, timeout=3)

assert len(udsmsgs) == 50  # no_docs

ecu = session.ecu
response = ecu.supported_responses[0]  # no_docs
assert response.in_correct_session(1)  # no_docs
assert response.has_security_access(0)  # no_docs
assert response.responses[0].service == 80  # no_docs
assert response.responses[0].diagnosticSessionType == 3  # no_docs
response = ecu.supported_responses[1]  # no_docs
assert response.in_correct_session(3)  # no_docs
assert response.has_security_access(0)  # no_docs
assert response.responses[0].service == 80  # no_docs
assert response.responses[0].diagnosticSessionType == 2  # no_docs
response = ecu.supported_responses[4]  # no_docs
assert response.in_correct_session(2)  # no_docs
assert response.has_security_access(18)  # no_docs
assert response.responses[0].service == 110  # no_docs
assert response.responses[0].dataIdentifier == 61786  # no_docs
assert len(ecu.log["TransferData"]) == 2  # no_docs


= Analyze on the fly with EcuSession GMLAN1

session = EcuSession()

with CandumpReader("test/contrib/automotive/gmlan_trace.candump") as sock:
    gmlanmsgs = sniff(session=ISOTPSession, session_kwargs={"supersession": session, "did":[0x241, 0x641, 0x101], "basecls":GMLAN}, count=2, opened_socket=sock, timeout=3)
    ecu = session.ecu
    print("Check 1 after change to diagnostic mode")
    assert len(ecu.supported_responses) == 1
    assert ecu.current_session == 3
    assert ecu.current_security_level == 0
    gmlanmsgs = sniff(session=ISOTPSession, session_kwargs={"supersession": session, "did":[0x241, 0x641, 0x101], "basecls":GMLAN}, count=8, opened_socket=sock, timeout=3)
    ecu = session.ecu
    print("Check 2 after some more messages were read")
    assert len(ecu.supported_responses) == 4
    assert ecu.current_session == 3
    assert ecu.current_security_level == 0
    gmlanmsgs = sniff(session=ISOTPSession, session_kwargs={"supersession": session, "did":[0x241, 0x641, 0x101], "basecls":GMLAN}, count=10, opened_socket=sock, timeout=3)
    ecu = session.ecu
    print("Check 3 after change to programming mode (bootloader)")
    assert len(ecu.supported_responses) == 5
    assert ecu.current_session == 2
    assert ecu.current_security_level == 0
    gmlanmsgs = sniff(session=ISOTPSession, session_kwargs={"supersession": session, "did":[0x241, 0x641, 0x101], "basecls":GMLAN}, count=16, opened_socket=sock, timeout=3)
    ecu = session.ecu
    print("Check 4 after gaining security access")
    assert len(ecu.supported_responses) == 7
    assert ecu.current_session == 2
    assert ecu.current_security_level == 2

= Analyze on the fly with EcuSession GMLAN logging test

session = EcuSession(verbose=False, store_supported_responses=False)

conf.contribs['GMLAN']['GMLAN_ECU_AddressingScheme'] = 4

with CandumpReader("test/contrib/automotive/gmlan_trace.candump") as sock:
     gmlanmsgs = sniff(session=ISOTPSession, session_kwargs={"supersession": session, "did":[0x241, 0x641, 0x101], "basecls":GMLAN}, count=200, opened_socket=sock, timeout=6)

ecu = session.ecu
assert len(ecu.supported_responses) == 0

assert len([m for m in gmlanmsgs if m.sprintf("%GMLAN.service%") == "TransferData"]) == len(ecu.log["TransferData"])
assert len([m for m in gmlanmsgs if m.sprintf("%GMLAN.service%") == "RequestDownload"]) == len(ecu.log["RequestDownload"])
assert len([m for m in gmlanmsgs if m.sprintf("%GMLAN.service%") == "ReadDataByIdentifier"]) == len(ecu.log["ReadDataByIdentifier"])

assert len(ecu.log["SecurityAccess"]) == 2
assert len(ecu.log["SecurityAccessPositiveResponse"]) == 2

assert ecu.log["TransferData"][-1][1][0] == "downloadAndExecuteOrExecute"
