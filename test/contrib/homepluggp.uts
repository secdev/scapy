% Regression tests for Scapy

+Syntax check
= Import the homepluggq layer

from scapy.contrib.homepluggp import *
import binascii
#from scapy.all import 

# HomePlugGP

############
############
+ Basic tests

* Those test are here mainly to check nothing has been broken

= Building packets packet
~Â basic HomePlugAV VS_ATTENUATION_CHARACTERISTICS_MME CM_SLAC_PARM_REQ CM_SLAC_PARM_CNF CM_START_ATTEN_CHAR_IND CM_ATTEN_CHAR_IND CM_ATTEN_CHAR_RSP CM_MNBC_SOUND_IND CM_SLAC_MATCH_REQ CM_SLAC_MATCH_CNF CM_SET_KEY_REQ CM_SET_KEY_CNF CM_ATTENUATION_CHARACTERISTICS_MME

HomePlugAV()/VS_ATTENUATION_CHARACTERISTICS_MME()
HomePlugAV()/CM_SLAC_PARM_REQ()
HomePlugAV()/CM_SLAC_PARM_CNF()
HomePlugAV()/CM_START_ATTEN_CHAR_IND()
HomePlugAV()/CM_ATTEN_CHAR_IND()
HomePlugAV()/CM_ATTEN_CHAR_RSP()
HomePlugAV()/CM_MNBC_SOUND_IND()
HomePlugAV()/CM_SLAC_MATCH_REQ()
HomePlugAV()/CM_SLAC_MATCH_CNF()
HomePlugAV()/CM_SET_KEY_REQ()
HomePlugAV()/CM_SET_KEY_CNF()
HomePlugAV()/CM_ATTENUATION_CHARACTERISTICS_MME()

= Some important parsing
~ field
_xstr = binascii.unhexlify("0108600000010000000000000000040000000227cfe35f01e50a01c8a074ad04537cb54b88b62d49b35b51000000c1f2")
pkt = HomePlugAV(_xstr)
assert pkt.NewKey == binascii.unhexlify("a074ad04537cb54b88b62d49b35b5100")
assert pkt.NetworkID == binascii.unhexlify("cfe35f01e50a01")

= Some important manipulations
~ field
pkt = HomePlugAV()/CM_MNBC_SOUND_IND()
pkt.RandomValue="AAAAAAAAAA"
print (str(pkt))
print (binascii.unhexlify("00766000b05200000000000000000000000000000000000000000000000000000000000000000000000041414141414141414141000000000000"))
assert str(pkt) == str(binascii.unhexlify("00766000b05200000000000000000000000000000000000000000000000000000000000000000000000041414141414141414141000000000000"))
