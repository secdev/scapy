% Regression tests for obdscanner
~ vcan_socket needs_root linux

+ Configuration
~ conf

= Imports
load_layer("can", globals_dict=globals())
import scapy.modules.six as six
import subprocess, sys
from subprocess import call
from scapy.contrib.automotive.ecu import *

print("Set delay to lower utilization")
conf.contribs['ECU_am']['send_delay'] = 0.004
= Definition of constants, utility functions and mock classes
iface0 = "vcan0"
iface1 = "vcan1"

# function to exit when the can-isotp kernel module is not available
ISOTP_KERNEL_MODULE_AVAILABLE = False
def exit_if_no_isotp_module():
    if not ISOTP_KERNEL_MODULE_AVAILABLE:
        err = "TEST SKIPPED: can-isotp not available\n"
        sys.__stderr__.write(err)
        warning("Can't test ISOTP native socket because kernel module is not loaded")
        exit(0)


def temporary_skip_unstable_test():
    err = "TEST SKIPPED: Unstable unit test. Stabilize me!\n"
    sys.__stderr__.write(err)
    warning("Unstable unit test. FIXME!")
    exit(0)


= Initialize a virtual CAN interface
if 0 != call(["cansend", iface0,  "000#"]):
    # vcan0 is not enabled
    if 0 != call(["sudo", "modprobe", "vcan"]):
        raise Exception("modprobe vcan failed")
    if 0 != call(["sudo", "ip", "link", "add", "name", iface0, "type", "vcan"]):
        print("add %s failed: Maybe it was already up?" % iface0)
    if 0 != call(["sudo", "ip", "link", "set", "dev", iface0, "up"]):
        raise Exception("could not bring up %s" % iface0)

if 0 != call(["cansend", iface0,  "000#"]):
    raise Exception("cansend doesn't work")

if 0 != call(["cansend", iface1,  "000#"]):
    # vcan1 is not enabled
    if 0 != call(["sudo", "modprobe", "vcan"]):
        raise Exception("modprobe vcan failed")
    if 0 != call(["sudo", "ip", "link", "add", "name", iface1, "type", "vcan"]):
        print("add %s failed: Maybe it was already up?" % iface1)
    if 0 != call(["sudo", "ip", "link", "set", "dev", iface1, "up"]):
        raise Exception("could not bring up %s" % iface1)

if 0 != call(["cansend", iface1,  "000#"]):
    raise Exception("cansend doesn't work")

print("CAN should work now")


if six.PY3 and not conf.use_pypy:
    from scapy.contrib.cansocket_native import *
else:
    from scapy.contrib.cansocket_python_can import *


if "python_can" in CANSocket.__module__:
    new_can_socket = lambda iface: CANSocket(bustype='socketcan', channel=iface)
    new_can_socket0 = lambda: CANSocket(bustype='socketcan', channel=iface0, timeout=0.01)
    new_can_socket1 = lambda: CANSocket(bustype='socketcan', channel=iface1, timeout=0.01)
    can_socket_string_list = ["-i", "socketcan", "-c", iface0]
else:
    new_can_socket = lambda iface: CANSocket(iface)
    new_can_socket0 = lambda: CANSocket(iface0)
    new_can_socket1 = lambda: CANSocket(iface1)
    can_socket_string_list = ["-c", iface0]

# utility function for draining a can interface, asserting that no packets are there
def drain_bus(iface=iface0, assert_empty=True):
    with new_can_socket(iface) as s:
        pkts = s.sniff(timeout=0.1)
        if assert_empty:
            assert len(pkts) == 0

= Verify that a CAN socket can be created and closed
s = new_can_socket(iface0)
s.close()


= Check if can-isotp and can-utils are installed on this system
p1 = subprocess.Popen(['lsmod'], stdout = subprocess.PIPE)
p2 = subprocess.Popen(['grep', '^can_isotp'], stdout = subprocess.PIPE, stdin=p1.stdout)
p1.stdout.close()
if p1.wait() == 0 and p2.wait() == 0 and b"can_isotp" in p2.stdout.read():
    p = subprocess.Popen(["isotpsend", "-s1", "-d0", iface0], stdin = subprocess.PIPE)
    p.communicate(b"01")
    if p.returncode == 0:
        ISOTP_KERNEL_MODULE_AVAILABLE = True


+ Syntax check

= Import isotp
conf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': ISOTP_KERNEL_MODULE_AVAILABLE}

if six.PY3:
    import importlib
    if "scapy.contrib.isotp" in sys.modules:
        importlib.reload(scapy.contrib.isotp)

load_contrib("isotp", globals_dict=globals())

if six.PY3 and ISOTP_KERNEL_MODULE_AVAILABLE:
    assert ISOTPSocket == ISOTPNativeSocket
else:
    assert ISOTPSocket == ISOTPSoftSocket

+ Usage tests

= Test wrong usage
print(sys.executable)
result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
returncode = result.wait()
std_out, std_err = result.communicate()
assert returncode != 0

expected_output = plain_str(b'usage:')
assert expected_output in plain_str(std_err)


= Test show help
result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py", "--help"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
assert result.wait() == 0
std_out, std_err = result.communicate()
expected_output = plain_str(b'Scan for all possible obd service classes and their subfunctions.')
assert expected_output in plain_str(std_out)


= Test wrong socket for Python2 or Windows
if six.PY2:
    version = subprocess.Popen(["python2", "--version"], stdout=subprocess.PIPE)
    result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py", "-c", "vcan0", "-s", "0x600", "-d", "0x601", "-t", "0.001"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    assert result.wait() == 1
    expected_output = plain_str(b'Please provide all required arguments.')
    std_out, std_err = result.communicate()
    assert expected_output in plain_str(std_err)

= Test Python2 call
if six.PY2:
    result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py", "-i", "socketcan", "-c", "vcan0", "-s", "0x600", "-d", "0x601", "-v", "-t", "0.001"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    returncode = result.wait()
    std_out, std_err = result.communicate()
    assert returncode == 0
    expected_output = plain_str(b'Starting OBD-Scan...')
    assert expected_output in plain_str(std_out)

= Test Python2 call with python-can args
if six.PY2:
    result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py", "-i", "socketcan", "-c", "vcan0", "-s", "0x600", "-d", "0x601", "-v", "-a", "bitrate=250000", "-t", "0.001"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    returncode = result.wait()
    std_out, std_err = result.communicate()
    assert returncode == 0
    expected_output = plain_str(b'Starting OBD-Scan...')
    assert expected_output in plain_str(std_out)

+ Scan tests

= Load contribution layer

from scapy.contrib.automotive.obd.obd import *

+ Simulate scanner

= Test DTC scan

drain_bus(iface0)

s3 = OBD()/OBD_S03_PR(dtcs=[OBD_DTC()])

example_responses = [ECUResponse(session=range(0,255), security_level=0, responses=s3)]

with new_can_socket0() as isocan, ISOTPSocket(isocan, 0x7e8, 0x7e0, basecls=OBD, padding=True) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, 0x7e0, 0x7e8, basecls=OBD, padding=True) as tester:
    conf.verb = -1
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=OBD, verbose=False)
    sim = threading.Thread(target=answering_machine, kwargs={'verbose': False, 'timeout': 15, 'stop_filter': lambda p: bytes(p) == b"\x01\xff\xff\xff\xff"})
    sim.start()
    try:
        result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py"] + can_socket_string_list + ["-s", "0x7e0", "-d", "0x7e8", "-t", "0.30"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        std_out1, std_err1 = result.communicate()
        result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py"] + can_socket_string_list + ["-s", "0x7e0", "-d", "0x7e8", "-t", "0.30"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        std_out2, std_err2 = result.communicate()
    except Exception as e:
        print(e)
    finally:
        tester.send(b"\x01\xff\xff\xff\xff")
        sim.join(timeout=10)
    expected_output = b"1 requests were sent, 1 answered"
    assert bytes_encode(expected_output) in bytes_encode(std_out1) or bytes_encode(expected_output) in bytes_encode(std_out2) 

= Test supported PIDs scan

drain_bus(iface0)

s1_pid00 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID00(supported_pids="PID03+PID0B+PID0F")])
s6_mid00 = OBD()/OBD_S06_PR(data_records=[OBD_S06_PR_Record()/OBD_MID00(supported_mids="")])
s8_tid00 = OBD()/OBD_S08_PR(data_records=[OBD_S08_PR_Record()/OBD_TID00(supported_tids="")])
s9_iid00 = OBD()/OBD_S09_PR(data_records=[OBD_S09_PR_Record()/OBD_IID00(supported_iids="")])

s1_pid03 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID03(fuel_system1=0, fuel_system2=2)])
s1_pid0B = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID0B(data=100)])
s1_pid0F = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID0F(data=50)])

# Create answers for 'supported PIDs scan'
example_responses = \
    [ECUResponse(session=range(0, 255), security_level=0, responses=s3),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s6_mid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s8_tid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s9_iid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid03),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid0B),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid0F)]



with new_can_socket0() as isocan, ISOTPSocket(isocan, 0x7e8, 0x7e0, basecls=OBD, padding=True) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, 0x7e0, 0x7e8, basecls=OBD, padding=True) as tester:
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=OBD, verbose=False)
    sim = threading.Thread(target=answering_machine, kwargs={'verbose': False, 'timeout': 100, 'stop_filter': lambda p: bytes(p) == b"\x01\xff\xff\xff\xff"})
    sim.start()
    try:
        result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py"] + can_socket_string_list + ["-s", "0x7e0", "-d", "0x7e8", "-t", "0.30"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        std_out1, std_err1 = result.communicate()
        result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py"] + can_socket_string_list + ["-s", "0x7e0", "-d", "0x7e8", "-t", "0.30"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        std_out2, std_err2 = result.communicate()
    except Exception as e:
        print(e)
    finally:
        tester.send(b"\x01\xff\xff\xff\xff")
        sim.join(timeout=10)
    expected_output = ["5 requests were sent, 4 answered", "2 requests were sent, 1 answered", "1 requests were sent, 1 answered"]
    for out in expected_output:
        assert bytes_encode(out) in bytes_encode(std_out1) or bytes_encode(out) in bytes_encode(std_out2)  

= Test only Service 01 PIDs scan

drain_bus(iface0)

s1_pid00 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID00(supported_pids="PID03+PID0B+PID0F")])
s6_mid00 = OBD()/OBD_S06_PR(data_records=[OBD_S06_PR_Record()/OBD_MID00(supported_mids="")])
s8_tid00 = OBD()/OBD_S08_PR(data_records=[OBD_S08_PR_Record()/OBD_TID00(supported_tids="")])
s9_iid00 = OBD()/OBD_S09_PR(data_records=[OBD_S09_PR_Record()/OBD_IID00(supported_iids="")])

s1_pid03 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID03(fuel_system1=0, fuel_system2=2)])
s1_pid0B = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID0B(data=100)])
s1_pid0F = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID0F(data=50)])

# Create answers for 'supported PIDs scan'
example_responses = \
    [ECUResponse(session=range(0, 255), security_level=0, responses=s3),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s6_mid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s8_tid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s9_iid00),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid03),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid0B),
     ECUResponse(session=range(0, 255), security_level=0, responses=s1_pid0F)]



with new_can_socket0() as isocan, ISOTPSocket(isocan, 0x7e8, 0x7e0, basecls=OBD, padding=True) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, 0x7e0, 0x7e8, basecls=OBD, padding=True) as tester:
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=OBD, verbose=False)
    sim = threading.Thread(target=answering_machine, kwargs={'verbose': False, 'timeout': 100, 'stop_filter':  lambda p: bytes(p) == b"\x01\xff\xff\xff\xff"})
    sim.start()
    try:
        result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py"] + can_socket_string_list + ["-s", "0x7e0", "-d", "0x7e8", "-t", "0.30", "-1"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        std_out1, std_err1 = result.communicate()
        result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py"] + can_socket_string_list + ["-s", "0x7e0", "-d", "0x7e8", "-t", "0.30", "-1"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        std_out2, std_err2 = result.communicate()
    except Exception as e:
        print(e)
    finally:
        tester.send(b"\x01\xff\xff\xff\xff")
        sim.join(timeout=10)
    expected_output = ["5 requests were sent, 4 answered"]
    for out in expected_output:
        assert bytes_encode(out) in bytes_encode(std_out1) or bytes_encode(out) in bytes_encode(std_out2)


= Test full scan

drain_bus(iface0)

# Add unsupported PID
s1_pid01 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID01()])
example_responses.append(ECUResponse(session=range(0,255), security_level=0, responses=s1_pid01))

with new_can_socket0() as isocan, ISOTPSocket(isocan, 0x7e8, 0x7e0, basecls=OBD, padding=True) as ecu, \
        new_can_socket0() as isocan2, ISOTPSocket(isocan2, 0x7e0, 0x7e8, basecls=OBD, padding=True) as tester:
    answering_machine = ECU_am(supported_responses=example_responses, main_socket=ecu, basecls=OBD, verbose=False)
    sim = threading.Thread(target=answering_machine, kwargs={'verbose': False, 'timeout': 100, 'stop_filter': lambda p: bytes(p) == b"\x01\xff\xff\xff\xff"})
    sim.start()
    try:
        result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py"] + can_socket_string_list + ["-s", "0x7e0", "-d", "0x7e8", "-t", "0.30", "-f", "-1", "-3"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        std_out1, std_err1 = result.communicate()
        result = subprocess.Popen([sys.executable, "scapy/tools/automotive/obdscanner.py"] + can_socket_string_list + ["-s", "0x7e0", "-d", "0x7e8", "-t", "0.30", "-f", "-1", "-3"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        std_out2, std_err2 = result.communicate()
    except Exception as e:
        print(e)
    finally:
        tester.send(b"\x01\xff\xff\xff\xff")
        sim.join(timeout=10)
    expected_output = ["256 requests were sent", "1 requests were sent, 1 answered"]
    for out in expected_output:
        assert bytes_encode(out) in bytes_encode(std_out1) or bytes_encode(out) in bytes_encode(std_out2)

+ Cleanup

= Cleanup

if 0 != call(["sudo", "ip", "link", "delete", "vcan0"]):
        raise Exception("vcan0 could not be deleted")

if 0 != call(["sudo", "ip", "link", "delete", "vcan1"]):
        raise Exception("vcan1 could not be deleted")
