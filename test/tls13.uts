% Tests for TLS 1.3
#
# Try me with :
# bash test/run_tests -t test/tls13.uts -F


+ Read a protected TLS 1.3 session
# /!\ These tests will not catch our 'INTEGRITY CHECK FAILED's. /!\
# We deem the knowledge of the plaintext sufficient for passing...


#~ crypto



= Reading test session - Loading unparsed TLS 1.3 records
import binascii
def clean(s):
    return binascii.unhexlify(''.join(c for c in s if c.isalnum()))

clientHello = clean("""
         16 03 01 00 c4 01 00 00 c0 03 03 cb
         34 ec b1 e7 81 63 ba 1c 38 c6 da cb 19 6a 6d ff a2 1a 8d 99 12
         ec 18 a2 ef 62 83 02 4d ec e7 00 00 06 13 01 13 03 13 02 01 00
         00 91 00 00 00 0b 00 09 00 00 06 73 65 72 76 65 72 ff 01 00 01
         00 00 0a 00 14 00 12 00 1d 00 17 00 18 00 19 01 00 01 01 01 02
         01 03 01 04 00 23 00 00 00 33 00 26 00 24 00 1d 00 20 99 38 1d
         e5 60 e4 bd 43 d2 3d 8e 43 5a 7d ba fe b3 c0 6e 51 c1 3c ae 4d
         54 13 69 1e 52 9a af 2c 00 2b 00 03 02 03 04 00 0d 00 20 00 1e
         04 03 05 03 06 03 02 03 08 04 08 05 08 06 04 01 05 01 06 01 02
         01 04 02 05 02 06 02 02 02 00 2d 00 02 01 01 00 1c 00 02 40 01
      """)


serverHello = clean("""
         16 03 03 00 5a 02 00 00 56 03 03 a6
         af 06 a4 12 18 60 dc 5e 6e 60 24 9c d3 4c 95 93 0c 8a c5 cb 14
         34 da c1 55 77 2e d3 e2 69 28 00 13 01 00 00 2e 00 33 00 24 00
         1d 00 20 c9 82 88 76 11 20 95 fe 66 76 2b db f7 c6 72 e1 56 d6
         cc 25 3b 83 3d f1 dd 69 b1 b0 4e 75 1f 0f 00 2b 00 02 03 04
      """)

serverEncHS = clean("""
         17 03 03 02 a2 d1 ff 33 4a 56 f5 bf
         f6 59 4a 07 cc 87 b5 80 23 3f 50 0f 45 e4 89 e7 f3 3a f3 5e df
         78 69 fc f4 0a a4 0a a2 b8 ea 73 f8 48 a7 ca 07 61 2e f9 f9 45
         cb 96 0b 40 68 90 51 23 ea 78 b1 11 b4 29 ba 91 91 cd 05 d2 a3
         89 28 0f 52 61 34 aa dc 7f c7 8c 4b 72 9d f8 28 b5 ec f7 b1 3b
         d9 ae fb 0e 57 f2 71 58 5b 8e a9 bb 35 5c 7c 79 02 07 16 cf b9
         b1 18 3e f3 ab 20 e3 7d 57 a6 b9 d7 47 76 09 ae e6 e1 22 a4 cf
         51 42 73 25 25 0c 7d 0e 50 92 89 44 4c 9b 3a 64 8f 1d 71 03 5d
         2e d6 5b 0e 3c dd 0c ba e8 bf 2d 0b 22 78 12 cb b3 60 98 72 55
         cc 74 41 10 c4 53 ba a4 fc d6 10 92 8d 80 98 10 e4 b7 ed 1a 8f
         d9 91 f0 6a a6 24 82 04 79 7e 36 a6 a7 3b 70 a2 55 9c 09 ea d6
         86 94 5b a2 46 ab 66 e5 ed d8 04 4b 4c 6d e3 fc f2 a8 94 41 ac
         66 27 2f d8 fb 33 0e f8 19 05 79 b3 68 45 96 c9 60 bd 59 6e ea
         52 0a 56 a8 d6 50 f5 63 aa d2 74 09 96 0d ca 63 d3 e6 88 61 1e
         a5 e2 2f 44 15 cf 95 38 d5 1a 20 0c 27 03 42 72 96 8a 26 4e d6
         54 0c 84 83 8d 89 f7 2c 24 46 1a ad 6d 26 f5 9e ca ba 9a cb bb
         31 7b 66 d9 02 f4 f2 92 a3 6a c1 b6 39 c6 37 ce 34 31 17 b6 59
         62 22 45 31 7b 49 ee da 0c 62 58 f1 00 d7 d9 61 ff b1 38 64 7e
         92 ea 33 0f ae ea 6d fa 31 c7 a8 4d c3 bd 7e 1b 7a 6c 71 78 af
         36 87 90 18 e3 f2 52 10 7f 24 3d 24 3d c7 33 9d 56 84 c8 b0 37
         8b f3 02 44 da 8c 87 c8 43 f5 e5 6e b4 c5 e8 28 0a 2b 48 05 2c
         f9 3b 16 49 9a 66 db 7c ca 71 e4 59 94 26 f7 d4 61 e6 6f 99 88
         2b d8 9f c5 08 00 be cc a6 2d 6c 74 11 6d bd 29 72 fd a1 fa 80
         f8 5d f8 81 ed be 5a 37 66 89 36 b3 35 58 3b 59 91 86 dc 5c 69
         18 a3 96 fa 48 a1 81 d6 b6 fa 4f 9d 62 d5 13 af bb 99 2f 2b 99
         2f 67 f8 af e6 7f 76 91 3f a3 88 cb 56 30 c8 ca 01 e0 c6 5d 11
         c6 6a 1e 2a c4 c8 59 77 b7 c7 a6 99 9b bf 10 dc 35 ae 69 f5 51
         56 14 63 6c 0b 9b 68 c1 9e d2 e3 1c 0b 3b 66 76 30 38 eb ba 42
         f3 b3 8e dc 03 99 f3 a9 f2 3f aa 63 97 8c 31 7f c9 fa 66 a7 3f
         60 f0 50 4d e9 3b 5b 84 5e 27 55 92 c1 23 35 ee 34 0b bc 4f dd
         d5 02 78 40 16 e4 b3 be 7e f0 4d da 49 f4 b4 40 a3 0c b5 d2 af
         93 98 28 fd 4a e3 79 4e 44 f9 4d f5 a6 31 ed e4 2c 17 19 bf da
         bf 02 53 fe 51 75 be 89 8e 75 0e dc 53 37 0d 2b
      """)

clientEncHS = clean("""
         17 03 03 00 35 75 ec 4d c2 38 cc e6
         0b 29 80 44 a7 1e 21 9c 56 cc 77 b0 51 7f e9 b9 3c 7a 4b fc 44
         d8 7f 38 f8 03 38 ac 98 fc 46 de b3 84 bd 1c ae ac ab 68 67 d7
         26 c4 05 46
   """)


= Reading TLS 1.3 session - TLS parsing (no encryption) does not throw any error
# We will need to distinguish between connection ends. See next XXX below.
from scapy.layers.tls.record import TLS
t1 = TLS(clientHello)
t2 = TLS(serverHello, tls_session=t1.tls_session.mirror())

= Reading TLS 1.3 session - TLS Record header
# We leave the possibility for some attributes to be either '' or None.
assert(t1.type == 0x16)
assert(t1.version == 0x0301)
assert(t1.len == 196)
assert(not t1.iv)
assert(not t1.mac)
assert(not t1.pad and not t1.padlen)
len(t1.msg) == 1


= Reading TLS 1.3 session - TLS Record __getitem__
from scapy.layers.tls.handshake import TLSClientHello
TLSClientHello in t1


= Reading TLS 1.3 session - ClientHello
ch = t1.msg[0]
assert(isinstance(ch, TLSClientHello))
assert(ch.msgtype == 1)
assert(ch.msglen == 192)
assert(ch.version == 0x0303)
assert(ch.gmt_unix_time == 0xcb34ecb1)
assert(ch.random_bytes == b'\xe7\x81c\xba\x1c8\xc6\xda\xcb\x19jm\xff\xa2\x1a\x8d\x99\x12\xec\x18\xa2\xefb\x83\x02M\xec\xe7')
assert(ch.sidlen == 0)
assert(not ch.sid)
assert(ch.cipherslen == 6)
assert(ch.ciphers == [4865, 4867, 4866])
assert(ch.complen == 1)
assert(ch.comp == [0])


= Reading TLS 1.3 session - ClientHello extensions
from scapy.layers.tls.extensions import (TLS_Ext_ServerName,
TLS_Ext_RenegotiationInfo, TLS_Ext_SupportedGroups, 
TLS_Ext_SessionTicket, TLS_Ext_SupportedVersion_CH,
TLS_Ext_SignatureAlgorithms, TLS_Ext_PSKKeyExchangeModes, 
TLS_Ext_RecordSizeLimit) 

from scapy.layers.tls.keyexchange_tls13 import TLS_Ext_KeyShare_CH

assert(ch.extlen == 145)
ext = ch.ext
assert(len(ext) == 9)
assert(isinstance(ext[0], TLS_Ext_ServerName))
assert(ext[0].type == 0)
assert(ext[0].len == 11)
assert(ext[0].servernameslen == 9)
assert(len(ext[0].servernames) == 1)
assert(ext[0].servernames[0].nametype == 0)
assert(ext[0].servernames[0].namelen == 6)
assert(ext[0].servernames[0].servername == b"server")
assert(isinstance(ext[1], TLS_Ext_RenegotiationInfo))
assert(not ext[1].renegotiated_connection)
assert(isinstance(ext[2], TLS_Ext_SupportedGroups))
assert(ext[2].groups == [29, 23, 24, 25, 256, 257, 258, 259, 260])
assert(isinstance(ext[3], TLS_Ext_SessionTicket))
assert(not ext[3].ticket)
assert(isinstance(ext[4], TLS_Ext_KeyShare_CH))
assert(ext[4].client_shares_len == 36)
assert(len(ext[4].client_shares) == 1)
assert(ext[4].client_shares[0].group == 29)
assert(ext[4].client_shares[0].kxlen == 32)
assert(ext[4].client_shares[0].key_exchange == b'\x998\x1d\xe5`\xe4\xbdC\xd2=\x8eCZ}\xba\xfe\xb3\xc0nQ\xc1<\xaeMT\x13i\x1eR\x9a\xaf,')
assert(isinstance(ext[5],TLS_Ext_SupportedVersion_CH))
assert(ext[5].len == 3)
assert(ext[5].versionslen == 2)
assert(ext[5].versions == [772])
assert(isinstance(ext[6], TLS_Ext_SignatureAlgorithms))
assert(ext[6].sig_algs_len == 30)
assert(len(ext[6].sig_algs) == 15)
assert(ext[6].sig_algs[0] == 1027)
assert(ext[6].sig_algs[-1] == 514)
assert(isinstance(ext[7], TLS_Ext_PSKKeyExchangeModes))
assert(ext[7].kxmodeslen == 1)
assert(ext[7].kxmodes[0] == 1)
assert(isinstance(ext[8], TLS_Ext_RecordSizeLimit))
assert(ext[8].record_size_limit == 16385)


= Reading TLS 1.3 session - ServerHello
from scapy.layers.tls.handshake import TLS13ServerHello
from scapy.layers.tls.extensions import TLS_Ext_SupportedVersion_SH
from scapy.layers.tls.keyexchange_tls13 import TLS_Ext_KeyShare_SH

assert(TLS13ServerHello in t2)
sh = t2.msg[0]
ext = sh.ext
assert(isinstance(sh, TLS13ServerHello))
assert(sh.random_bytes == b'\xa6\xaf\x06\xa4\x12\x18`\xdc^n`$\x9c\xd3L\x95\x93\x0c\x8a\xc5\xcb\x144\xda\xc1Uw.\xd3\xe2i(')
assert(sh.cipher == 0x1301)
assert(len(sh.ext) == 2)
assert(isinstance(ext[0], TLS_Ext_KeyShare_SH))
assert(ext[0].len == 36)
assert(ext[0].server_share.group == 29)
assert(ext[0].server_share.key_exchange == b'\xc9\x82\x88v\x11 \x95\xfefv+\xdb\xf7\xc6r\xe1V\xd6\xcc%;\x83=\xf1\xddi\xb1\xb0Nu\x1f\x0f')
assert(isinstance(ext[1], TLS_Ext_SupportedVersion_SH))
assert(ext[1].version == 0x0304)


= Reading TLS 1.3 session - TLS parsing (with encryption) does not throw any error
from scapy.layers.tls.record_tls13 import TLS13
t3 = TLS13(serverEncHS, tls_session=t2.tls_session)


= Reading TLS 1.3 session - TLS13 Record header
assert(t3.type == 0x17)
assert(t3.version == 0x0303)
assert(t3.len == 674)


= Reading TLS 1.3 session - TLS13 Record __getitem__
TLS13 in t3

= Reading TLS 1.3 session - TLS13 ApplicationData
from scapy.layers.tls.record_tls13 import TLSInnerPlaintext
TLSInnerPlaintext in t3
assert(len(t3.auth_tag) == 16)
assert(t3.auth_tag == b'\xbf\x02S\xfeQu\xbe\x89\x8eu\x0e\xdcS7\r+')


+ Decrypt a TLS 1.3 session


= Decrypt a TLS 1.3 session - Parse client Hello
~ crypto_advanced

from scapy.layers.tls.extensions import TLS_Ext_SessionTicket
# Values from RFC8448, section 3
x25519_clt_priv = clean("""
         49 af 42 ba 7f 79 94 85 2d 71 3e f2 78
         4b cb ca a7 91 1d e2 6a dc 56 42 cb 63 45 40 e7 ea 50 05
      """)

x25519_clt_pub = clean("""
      99 38 1d e5 60 e4 bd 43 d2 3d 8e 43 5a 7d
      ba fe b3 c0 6e 51 c1 3c ae 4d 54 13 69 1e 52 9a af 2c
   """)

t = TLS(clientHello)
assert(len(t.msg) == 1)
assert(t.msg[0].msgtype == 1)
assert(t.msg[0].extlen == 145)
assert(len(t.msg[0].ext) == 9)
e = t.msg[0].ext
assert(isinstance(e[0], TLS_Ext_ServerName))
assert(isinstance(e[1], TLS_Ext_RenegotiationInfo))
assert(isinstance(e[2], TLS_Ext_SupportedGroups))
assert(isinstance(e[3],TLS_Ext_SessionTicket))
assert(e[3].len == 0)
assert(isinstance(e[4], TLS_Ext_KeyShare_CH))
assert(len(e[4].client_shares) == 1)
assert(e[4].client_shares[0].group == 29)
assert(e[4].client_shares[0].key_exchange == x25519_clt_pub)
assert(isinstance(e[5], TLS_Ext_SupportedVersion_CH))
assert(isinstance(e[6], TLS_Ext_SignatureAlgorithms))
assert(isinstance(e[7], TLS_Ext_PSKKeyExchangeModes))
assert(e[7].kxmodeslen == 1)
assert(len(e[7].kxmodes) == 1)
assert(e[7].kxmodes[0] == 1)
assert(isinstance(e[8], TLS_Ext_RecordSizeLimit))


= Decrypt a TLS 1.3 session - Parse server Hello
~ crypto_advanced

from cryptography.hazmat.primitives.asymmetric.x25519 import X25519PrivateKey
from scapy.layers.tls.crypto.pkcs1 import pkcs_os2ip

# Values from RFC8448, section 3
x25519_srv_priv = clean("""
        b1 58 0e ea df 6d d5 89 b8 ef 4f 2d 56
        52 57 8c c8 10 e9 98 01 91 ec 8d 05 83 08 ce a2 16 a2 1e
""")

x25519_srv_pub = clean("""
        c9 82 88 76 11 20 95 fe 66 76 2b db f7 c6
        72 e1 56 d6 cc 25 3b 83 3d f1 dd 69 b1 b0 4e 75 1f 0f     
""") 

privkey = X25519PrivateKey.from_private_bytes(x25519_clt_priv)
t.tls_session.tls13_client_privshares["x25519"] = privkey

t = TLS(serverHello, tls_session=t.tls_session.mirror())

assert(len(t.msg) == 1)
assert(isinstance(t.msg[0], TLS13ServerHello))
assert(len(t.msg[0].ext) == 2)
e = t.msg[0].ext
assert(isinstance(e[0], TLS_Ext_KeyShare_SH))
assert(e[0].server_share.group == 29)
assert(e[0].server_share.key_exchange == x25519_srv_pub)
assert(isinstance(e[1], TLS_Ext_SupportedVersion_SH))


= Decrypt a TLS 1.3 session - Handshake traffic secret derivation 
~ crypto_advanced

# Values from RFC8448, section 3
early_secret = clean("""
    33 ad 0a 1c 60 7e c0 3b 09 e6 cd 98 93 68 0c
    e2 10 ad f3 00 aa 1f 26 60 e1 b2 2e 10 f1 70 f9 2a
""")

ecdhe_secret = clean("""
    8b d4 05 4f b5 5b 9d 63 fd fb ac f9 f0 4b 9f 0d
    35 e6 d6 3f 53 75 63 ef d4 62 72 90 0f 89 49 2d
""")

handshake_secret = clean("""
        1d c8 26 e9 36 06 aa 6f dc 0a ad c1 2f 74 1b
        01 04 6a a6 b9 9f 69 1e d2 21 a9 f0 ca 04 3f be ac
""")

client_handshake_traffic_secret = clean("""
        b3 ed db 12 6e 06 7f 35 a7 80 b3 ab f4 5e
        2d 8f 3b 1a 95 07 38 f5 2e 96 00 74 6a 0e 27 a5 5a 21
""")

server_handshake_traffic_secret = clean("""
        b6 7b 7d 69 0c c1 6c 4e 75 e5 42 13 cb 2d
        37 b4 e9 c9 12 bc de d9 10 5d 42 be fd 59 d3 91 ad 38
""")

assert(len(t.tls_session.tls13_derived_secrets) == 5)
assert(t.tls_session.tls13_early_secret is not None)
assert(t.tls_session.tls13_early_secret == early_secret)
assert(t.tls_session.tls13_dhe_secret == ecdhe_secret)
assert(t.tls_session.tls13_handshake_secret is not None)
assert(t.tls_session.tls13_handshake_secret == handshake_secret)
assert( 'client_handshake_traffic_secret' in t.tls_session.tls13_derived_secrets)
assert( t.tls_session.tls13_derived_secrets['client_handshake_traffic_secret'] == client_handshake_traffic_secret)
assert( 'server_handshake_traffic_secret' in t.tls_session.tls13_derived_secrets)
assert(t.tls_session.tls13_derived_secrets['server_handshake_traffic_secret'] == server_handshake_traffic_secret)


= Decrypt a TLS 1.3 session - Server handshake traffic key calculation 
~ crypto_advanced

# Values from RFC8448, section 3
server_hs_traffic_key = clean("""
             3f ce 51 60 09 c2 17 27 d0 f2 e4 e8 6e
             e4 03 bc
""")

server_hs_traffic_iv = clean("""
             5d 31 3e b2 67 12 76 ee 13 00 0b 30
""")

assert(t.tls_session.prcs.cipher.key == server_hs_traffic_key)
assert(t.tls_session.prcs.cipher.fixed_iv == server_hs_traffic_iv)

= Decrypt a TLS 1.3 session - Decrypt and parse server encrypted handshake
~ crypto_advanced

# Values from RFC8448, section 3
server_finished = clean("""
         88 63 e6 bf b0 42 0a 92 7f a2 7f 34 33 6a
         70 ae 42 6e 96 8e 3e b8 84 94 5b 96 85 6d ba 39 76 d1
   """)

t = TLS13(serverEncHS, tls_session=t.tls_session)
assert(t.deciphered_len == 658)
assert(t.inner.type == 22)
assert(len(t.inner.msg) == 4)
assert(t.auth_tag == b'\xbf\x02S\xfeQu\xbe\x89\x8eu\x0e\xdcS7\r+')

m = t.inner.msg

= Decrypt a TLS 1.3 session - Parse decrypted EncryptedExtension
~ crypto_advanced

from scapy.layers.tls.handshake import TLSEncryptedExtensions
assert(isinstance(m[0], TLSEncryptedExtensions))
assert(m[0].msgtype == 8)
assert(m[0].msglen == 36)
assert(m[0].extlen == 34)
assert(len(m[0].ext) == 3)
assert(isinstance(m[0].ext[0], TLS_Ext_SupportedGroups))
assert(m[0].ext[0].groupslen == 18)
assert(m[0].ext[0].groups == [29, 23, 24, 25, 256, 257, 258, 259, 260])
assert(isinstance(m[0].ext[1], TLS_Ext_RecordSizeLimit))
assert(m[0].ext[1].record_size_limit == 16385)
assert(isinstance(m[0].ext[2], TLS_Ext_ServerName))
assert(m[0].ext[2].len == 0)

= Decrypt a TLS 1.3 session - Parse decrypted TLS13Certificate
~ crypto_advanced

from scapy.layers.tls.cert import Cert
from scapy.layers.tls.handshake import (_ASN1CertAndExt, TLS13Certificate)

assert(isinstance(m[1], TLS13Certificate))
assert(m[1].msgtype == 11)
assert(m[1].msglen == 441)
assert(m[1].cert_req_ctxt_len == 0)
assert(m[1].cert_req_ctxt == b'')
assert(m[1].certslen == 437)
assert(len(m[1].certs) == 1)
assert(isinstance(m[1].certs[0], _ASN1CertAndExt))
assert(m[1].certs[0].cert[0] == 432)
assert(isinstance(m[1].certs[0].cert[1], Cert))
assert(m[1].certs[0].cert[1].cA == False)
assert(m[1].certs[0].cert[1].isSelfSigned() == True)
assert(m[1].certs[0].cert[1].issuer['commonName'] == 'rsa')
assert(m[1].certs[0].cert[1].keyUsage == ['digitalSignature', 'keyEncipherment'])
assert(m[1].certs[0].cert[1].notAfter_str == 'Jul 30 01:23:59 2026 GMT')
assert(m[1].certs[0].cert[1].notBefore_str == 'Jul 30 01:23:59 2016 GMT')
assert(m[1].certs[0].cert[1].serial == 2)
assert(m[1].certs[0].cert[1].sigAlg == 'sha256WithRSAEncryption')
assert(m[1].certs[0].cert[1].signatureLen == 128)
assert(m[1].certs[0].cert[1].subject['commonName'] == 'rsa')
assert(m[1].certs[0].cert[1].version == 3)


= Decrypt a TLS 1.3 session - Parse decrypted TLSCertificateVerify
~ crypto_advanced

from scapy.layers.tls.handshake import TLSCertificateVerify
from scapy.layers.tls.keyexchange import _TLSSignature
assert(isinstance(m[2], TLSCertificateVerify))
assert(isinstance(m[2], TLSCertificateVerify))
assert(m[2].msgtype == 15)
assert(m[2].msglen == 132)
assert(isinstance(m[2].sig, _TLSSignature))
assert(m[2].sig.sig_alg == 2052)
assert(m[2].sig.sig_len == 128)
assert(m[2].sig.sig_val == b"Zt|]\x88\xfa\x9b\xd2\xe5Z\xb0\x85\xa6\x10\x15\xb7!\x1f\x82L\xd4\x84\x14Z\xb3\xffR\xf1\xfd\xa8G{\x0bz\xbc\x90\xdbx\xe2\xd3:\\\x14\x1a\x07\x86S\xfak\xefx\x0c^\xa2H\xee\xaa\xa7\x85\xc4\xf3\x94\xca\xb6\xd3\x0b\xbe\x8dHY\xeeQ\x1f`)W\xb1T\x11\xac\x02vqE\x9eFD\\\x9e\xa5\x8c\x18\x1e\x81\x8e\x95\xb8\xc3\xfb\x0b\xf3'\x84\t\xd3\xbe\x15*=\xa5\x04>\x06=\xdae\xcd\xf5\xae\xa2\rS\xdf\xac\xd4/t\xf3")

= Decrypt a TLS 1.3 session - Parse decrypted TLSFinished
~ crypto_advanced
from scapy.layers.tls.handshake import TLSFinished
# Values from RFC8448, section 3
server_finished = clean("""
         9b 9b 14 1d 90 63 37 fb d2 cb dc e7 1d f4
         de da 4a b4 2c 30 95 72 cb 7f ff ee 54 54 b7 8f 07 18
   """)
assert(isinstance(m[3], TLSFinished))
assert(m[3].msgtype == 20)
assert(m[3].msglen == 32)
assert(m[3].vdata == server_finished)


= Decrypt a TLS 1.3 session - Client handshake traffic key calculation
~ crypto_advanced
# Values from RFC8448, section 3
client_hs_traffic_key = clean("""
         db fa a6 93 d1 76 2c 5b 66 6a f5 d9 50
         25 8d 01
   """)
client_hs_traffic_iv = clean("""
          5b d3 c7 1b 83 6e 0b 76 bb 73 26 5f
   """)

assert(t.tls_session.pwcs.cipher.key == client_hs_traffic_key)
assert(t.tls_session.pwcs.cipher.fixed_iv == client_hs_traffic_iv)

= Decrypt a TLS 1.3 session - Decrypt and parse client encrypted handshake 
~ crypto_advanced
# Values from RFC8448, section 3
client_finished = clean("""
         a8 ec 43 6d 67 76 34 ae 52 5a c1 fc eb e1
         1a 03 9e c1 76 94 fa c6 e9 85 27 b6 42 f2 ed d5 ce 61
   """)

t = TLS13(clientEncHS, tls_session=t.tls_session.mirror())
assert(t.deciphered_len == 37)
assert(t.inner.type == 22)
assert(len(t.inner.msg) == 1)
m = t.inner.msg
assert(isinstance(m[0], TLSFinished))
assert(m[0].vdata == client_finished)

= Decrypt a TLS 1.3 session - Application traffic secret derivation
~ crypto_advanced
# Values from RFC8448, section 3
master_secret = clean("""
         18 df 06 84 3d 13 a0 8b f2 a4 49 84 4c 5f 8a
         47 80 01 bc 4d 4c 62 79 84 d5 a4 1d a8 d0 40 29 19
   """)

client_application_traffic_secret_0 = clean("""
         9e 40 64 6c e7 9a 7f 9d c0 5a f8 88 9b ce
         65 52 87 5a fa 0b 06 df 00 87 f7 92 eb b7 c1 75 04 a5
   """)

server_application_traffic_secret_0 = clean("""
         a1 1a f9 f0 55 31 f8 56 ad 47 11 6b 45 a9
         50 32 82 04 b4 f4 4b fb 6b 3a 4b 4f 1f 3f cb 63 16 43
   """)


exporter_master_secret = clean("""
         fe 22 f8 81 17 6e da 18 eb 8f 44 52 9e 67
         92 c5 0c 9a 3f 89 45 2f 68 d8 ae 31 1b 43 09 d3 cf 50
   """)

resumption_master_secret = clean("""
         7d f2 35 f2 03 1d 2a 05 12 87 d0 2b 02 41
         b0 bf da f8 6c c8 56 23 1f 2d 5a ba 46 c4 34 ec 19 6c
   """)


assert(t.tls_session.tls13_master_secret is not None)
assert(t.tls_session.tls13_master_secret == master_secret)

assert(len(t.tls_session.tls13_derived_secrets) == 9)
assert('client_traffic_secrets' in  t.tls_session.tls13_derived_secrets)
assert(len(t.tls_session.tls13_derived_secrets['client_traffic_secrets']) == 1)
assert(t.tls_session.tls13_derived_secrets['client_traffic_secrets'][0] == client_application_traffic_secret_0)

assert('server_traffic_secrets' in  t.tls_session.tls13_derived_secrets)
assert(len(t.tls_session.tls13_derived_secrets['server_traffic_secrets']) == 1)
assert(t.tls_session.tls13_derived_secrets['server_traffic_secrets'][0] == server_application_traffic_secret_0)

assert('exporter_secret' in t.tls_session.tls13_derived_secrets)
assert(t.tls_session.tls13_derived_secrets['exporter_secret'] == exporter_master_secret)

assert('resumption_secret' in t.tls_session.tls13_derived_secrets)
assert(t.tls_session.tls13_derived_secrets['resumption_secret'] == resumption_master_secret)

= Decrypt a TLS 1.3 session - Application traffic keys calculation 
~ crypto_advanced
# Values from RFC8448, section 3
client_ap_traffic_key = clean("""
         17 42 2d da 59 6e d5 d9 ac d8 90 e3 c6
         3f 50 51
   """)

client_ap_traffic_iv = clean("""
          5b 78 92 3d ee 08 57 90 33 e5 23 d9
   """)

server_ap_traffic_key = clean("""
         9f 02 28 3b 6c 9c 07 ef c2 6b b9 f2 ac
         92 e3 56
   """)

server_ap_traffic_iv = clean("""
        cf 78 2b 88 dd 83 54 9a ad f1 e9 84
   """)

assert(t.tls_session.rcs.cipher.key == client_ap_traffic_key)
assert(t.tls_session.rcs.cipher.fixed_iv == client_ap_traffic_iv)
assert(t.tls_session.wcs.cipher.key == server_ap_traffic_key)
assert(t.tls_session.wcs.cipher.fixed_iv == server_ap_traffic_iv)

= Decrypt a TLS 1.3 session - Decrypt and parse server NewSessionTicket
~ crypto_advanced
from scapy.layers.tls.extensions import TLS_Ext_EarlyDataIndicationTicket
# Value from RFC8448, section 3
serverEncTicket = clean("""
         17 03 03 00 de 3a 6b 8f 90 41 4a 97
         d6 95 9c 34 87 68 0d e5 13 4a 2b 24 0e 6c ff ac 11 6e 95 d4 1d
         6a f8 f6 b5 80 dc f3 d1 1d 63 c7 58 db 28 9a 01 59 40 25 2f 55
         71 3e 06 1d c1 3e 07 88 91 a3 8e fb cf 57 53 ad 8e f1 70 ad 3c
         73 53 d1 6d 9d a7 73 b9 ca 7f 2b 9f a1 b6 c0 d4 a3 d0 3f 75 e0
         9c 30 ba 1e 62 97 2a c4 6f 75 f7 b9 81 be 63 43 9b 29 99 ce 13
         06 46 15 13 98 91 d5 e4 c5 b4 06 f1 6e 3f c1 81 a7 7c a4 75 84
         00 25 db 2f 0a 77 f8 1b 5a b0 5b 94 c0 13 46 75 5f 69 23 2c 86
         51 9d 86 cb ee ac 87 aa c3 47 d1 43 f9 60 5d 64 f6 50 db 4d 02
         3e 70 e9 52 ca 49 fe 51 37 12 1c 74 bc 26 97 68 7e 24 87 46 d6
         df 35 30 05 f3 bc e1 86 96 12 9c 81 53 55 6b 3b 6c 67 79 b3 7b
         f1 59 85 68 4f
         """)
t = TLS13(serverEncTicket, tls_session=t.tls_session.mirror())

assert(t.deciphered_len == 206)
assert(t.inner.type == 22)
assert(t.auth_tag == b'\x9c\x81SUk;lgy\xb3{\xf1Y\x85hO')
assert(len(t.inner.msg) == 1)
m = t.inner.msg[0]
assert(m.msgtype == 4)
assert(m.ticket_lifetime == 30)
assert(m.ticket_age_add == 4208372421)
assert(m.noncelen == 2)
assert(len(m.ticket_nonce) == 2)
assert(m.ticket_nonce == b'\x00\x00')
assert(m.ticket == b',\x03]\x82\x93Y\xee_\xf7\xafN\xc9\x00\x00\x00\x00&*d\x94\xdcHm,\x8a4\xcb3\xfa\x90\xbf\x1b\x00p\xad<I\x88\x83\xc96|\t\xa2\xbexZ\xbcU\xcd"`\x97\xa3\xa9\x82\x11r\x83\xf8*\x03\xa1C\xef\xd3\xff]\xd3md\xe8a\xbe\x7f\xd6\x1d(\'\xdb\'\x9c\xce\x14Pw\xd4T\xa3fMNm\xa4\xd2\x9e\xe07%\xa6\xa4\xda\xfc\xd0\xfcg\xd2\xae\xa7\x05)Q>=\xa2g\x7f\xa5\x90l[?}\x8f\x92\xf2(\xbd\xa4\r\xdar\x14p\xf9\xfb\xf2\x97\xb5\xae\xa6\x17do\xac\\\x03\'.\x97\x07\'\xc6!\xa7\x91A\xef_}\xe6P^[\xfb\xc3\x88\xe93Ci@\x93\x93J\xe4\xd3W')
assert(len(m.ext) == 1)
assert(isinstance(m.ext[0], TLS_Ext_EarlyDataIndicationTicket))
assert(m.ext[0].max_early_data_size == 1024)


= Decrypt a TLS 1.3 session - Compute the PSK associated with the ticket
~ crypto_advanced
from scapy.layers.tls.crypto.hkdf import TLS13_HKDF
hash_len = t.tls_session.rcs.ciphersuite.hash_alg.hash_len
hkdf = TLS13_HKDF(t.tls_session.rcs.ciphersuite.hash_alg.name.lower())
tls13_psk_secret = hkdf.expand_label(t.tls_session.tls13_derived_secrets['resumption_secret'],
                                     b"resumption",
                                     m.ticket_nonce,
                                     hash_len)

# Value from RFC8448, section 3
psk_resumption = clean("""
         4e cd 0e b6 ec 3b 4d 87 f5 d6 02 8f 92 2c
         a4 c5 85 1a 27 7f d4 13 11 c9 e6 2d 2c 94 92 e1 c4 f3
      """)

assert(hash_len == 32) 
assert(tls13_psk_secret == psk_resumption)

= Decrypt a TLS 1.3 session - Decrypt and parse client Application Data
~ crypto_advanced
from scapy.layers.tls.record import TLSApplicationData
# Values from RFC8448, section 3
payload = clean("""
         00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e
         0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23
         24 25 26 27 28 29 2a 2b 2c 2d 2e 2f 30 31
   """)


clientEncAppData = clean("""
         17 03 03 00 43 a2 3f 70 54 b6 2c 94
         d0 af fa fe 82 28 ba 55 cb ef ac ea 42 f9 14 aa 66 bc ab 3f 2b
         98 19 a8 a5 b4 6b 39 5b d5 4a 9a 20 44 1e 2b 62 97 4e 1f 5a 62
         92 a2 97 70 14 bd 1e 3d ea e6 3a ee bb 21 69 49 15 e4
      """)
t = TLS13(clientEncAppData, tls_session=t.tls_session.mirror())

assert(t.deciphered_len == 51)
assert(len(t.inner.msg) == 1)
assert(t.inner.type == 23)
m = t.inner.msg[0]
assert(isinstance(m, TLSApplicationData))
assert(m.data == payload)

= Decrypt a TLS 1.3 session - Decrypt and parse server Application Data
~ crypto_advanced
# Values from RFC8448, section 3
payload = clean("""
         00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e
         0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21 22 23
         24 25 26 27 28 29 2a 2b 2c 2d 2e 2f 30 31
   """)

serverEncAppData = clean("""
         17 03 03 00 43 2e 93 7e 11 ef 4a c7
         40 e5 38 ad 36 00 5f c4 a4 69 32 fc 32 25 d0 5f 82 aa 1b 36 e3
         0e fa f9 7d 90 e6 df fc 60 2d cb 50 1a 59 a8 fc c4 9c 4b f2 e5
         f0 a2 1c 00 47 c2 ab f3 32 54 0d d0 32 e1 67 c2 95 5d
      """)

t = TLS13(serverEncAppData, tls_session=t.tls_session.mirror())
assert(t.deciphered_len == 51)
assert(len(t.inner.msg) == 1)
assert(t.inner.type == 23)
m = t.inner.msg[0]
assert(isinstance(m, TLSApplicationData))
assert(m.data == payload)

= Decrypt a TLS 1.3 session - Decrypt client Alert
~ crypto_advanced
from scapy.layers.tls.record import TLSAlert
# Value from RFC8448, section 3
clientEncAlert = clean("""
         17 03 03 00 13 c9 87 27 60 65 56 66
         b7 4d 7f f1 15 3e fd 6d b6 d0 b0 e3
   """)

t = TLS13(clientEncAlert, tls_session=t.tls_session.mirror())
assert(t.deciphered_len == 3)
assert(len(t.inner.msg) == 1)
assert(t.inner.type == 21)
m = t.inner.msg[0]
assert(isinstance(m, TLSAlert))
assert(m.level == 1)
assert(m.descr == 0)

= Decrypt a TLS 1.3 session - Decrypt server Alert
~ crypto_advanced
# Value from RFC8448, section 3
serverEncAlert = clean("""
         17 03 03 00 13 b5 8f d6 71 66 eb f5
         99 d2 47 20 cf be 7e fa 7a 88 64 a9
   """)
t = TLS13(serverEncAlert, tls_session=t.tls_session.mirror())
assert(t.deciphered_len == 3)
assert(len(t.inner.msg) == 1)
assert(t.inner.type == 21)
m = t.inner.msg[0]
assert(isinstance(m, TLSAlert))
assert(m.level == 1)
assert(m.descr == 0)