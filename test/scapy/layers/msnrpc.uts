% MS-NRPC tests

+ [MS-NRPC] test vectors

= [MS-NRPC] test vectors - sect 4.2

from scapy.layers.tls.crypto.hash import Hash_MD4
from scapy.layers.msrpce.msnrpc import ComputeSessionKeyStrongKey

# Clear-text SharedSecret:
ClearSharedSecret = bytes.fromhex("2e002f002c006e004c003e004f004c005a003600730074005e0058004b0065004d0025002e0049002d00740045006000570056006a0043005b00300036003f005d003a00510076005f0054006e0055006f003a003a00420077002c0067006000760023004a004d0036004d007100530050007500550028006e00710034003e0079006a005b0064005c002b005600700052005f00790078007500630021006700300054003600350076007a005700410042005f004200220069003c003c0053002b00340027005e003a0021002c003b002500470073002d00280022003a0020006d003e00210043004c0066006e004e00")

# OWF of SharedSecret:
SharedSecret = Hash_MD4().digest(ClearSharedSecret)
assert SharedSecret.hex() == "31a590170a351fd51148b2a10af2c305"

# Client Challenge:

ClientChallenge = bytes.fromhex("3a0390a46d0c3d4f")

# Server Challenge:
ServerChallenge = bytes.fromhex("0c4c13d16041c860")

# Session Key:
assert ComputeSessionKeyStrongKey(SharedSecret, ClientChallenge, ServerChallenge).hex() == "eefe8f40007a2eeb6843d0d30a5be2e3"

= [MS-NRPC] test vectors - sect 4.3

from unittest import mock
from scapy.layers.msrpce.msnrpc import NetlogonSSP

# Input
SessionKey = bytes.fromhex("0cb6948805f797bf2a82807973b89537")
Confounder = bytes.fromhex("717f5076c5902bcd")
ClearTextMessage = bytes.fromhex("3000000000000000000000000000000030000000000000005c005c00570049004e002d00450055003400550047003800370048003200490056002e00320033003000360066006500760032002e006e00740074006500730074002e006d006900630072006f0073006f00660074002e0063006f006d0000000000020000000000100000000000000000000000000000001000000000000000570049004e002d004400310049005400420046004d003400410038005500000085bb1511fd09786d3b61b06400000000000000000000000001000000000000000000000000000000")
# Expected
FullNetlogonSignatureHeader = bytes.fromhex("13001a00ffff0000b37c1f0ec86468f086761f2f86f4f4c1632d1f547d2cf6ff")
EncryptedMessage = bytes.fromhex("c930c9a079d95c78bea6a3150908c11f4b68e41219bcb91680ead287da211eec66bc27df2bc9a0f4ecf25c88624e493c59cdec6bc7b08bed84b97c33138ae3c8377cb327f3ea6076da91c5d23dbf1b2f4066a455332716b7b64f2ec9a944702d20a85035de3b231a5216b7a6c9102bd17c7d6ab1b379445eb5a5276e360d3bcef93b5359d36b0006b0c10bc2fec73777816a383a4614494b7b18bc34cd5447681eb48f8132a0a08a50d752826cff068c76959d49767557e503d509fa3c18b0860a22a7e2bae50e812c5d71c31f9f1dfd143333b3043f6bf906e5d91207f1d988")

# Perform the same operation using NetlogonSSP:

client = NetlogonSSP(SessionKey=SessionKey, computername="DC1", domainname="DOMAIN", AES=True)
clicontext, tok, negResult = client.GSS_Init_sec_context(None)

with mock.patch('scapy.layers.msrpce.msnrpc.os.urandom', side_effect=lambda x: Confounder):
    _msgs, sig = client.GSS_WrapEx(
        clicontext,
        [
            SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=ClearTextMessage),
        ]
    )

assert _msgs[0].data == EncryptedMessage
assert bytes(sig)[:len(FullNetlogonSignatureHeader)] == FullNetlogonSignatureHeader

= [MS-NRPC] test vectors - sect 4.3.1

from unittest import mock
from scapy.layers.msrpce.msnrpc import NetlogonSSP

# Input
RpcPDUHeader = bytes.fromhex("0500000310000000380138000c000000d400000001001500")
RpcSecTrailer = bytes.fromhex("44060c0003000000")
# Expected
FullNetlogonSignatureHeader = bytes.fromhex("13001a00ffff00005d69950dfde45ae9f092ae5c3c55aacd632d1f547d2cf6ff")

# Perform the same operation using NetlogonSSP:

client = NetlogonSSP(SessionKey=SessionKey, computername="DC1", domainname="DOMAIN", AES=True)
clicontext, tok, negResult = client.GSS_Init_sec_context(None)

with mock.patch('scapy.layers.msrpce.msnrpc.os.urandom', side_effect=lambda x: Confounder):
    _msgs, sig = client.GSS_WrapEx(
        clicontext,
        [
            SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=RpcPDUHeader),
            SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=ClearTextMessage),
            SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=RpcSecTrailer),
        ]
    )

assert _msgs[0].data == RpcPDUHeader
assert _msgs[1].data == EncryptedMessage
assert _msgs[2].data == RpcSecTrailer
assert bytes(sig)[:len(FullNetlogonSignatureHeader)] == FullNetlogonSignatureHeader

+ Dissect and Build full NRPC exchange

# XXX in the DCE/RPC spec + MS-RPCE, padding is only supposed to be zeros
# but for some reason it's weird 0xaaaa, 0xaabb... stuff in Windows.
# This is ignored by all implementations, and looks like leftovers from Microsoft debugging
# but it means parsing + rebuilding properly a packet is *slightly* different.
# In the tests you will find several instances where we manually replace the padding with 0xAA, or similar
# to make the output match, but it would be cool to reverse engineer the ndr lib in windows and copy
# exactly the same debug values

= [EXCH] - Load MSRPCE and bind

load_layer("msrpce")
bind_layers(TCP, DceRpc, sport=40564)  # the DCE/RPC port
bind_layers(TCP, DceRpc, dport=40564)

= [EXCH] - Parse NRPC exchange (pcap)

pkts = sniff(offline=scapy_path('test/pcaps/dcerpc_msnrpc.pcapng.gz'), session=DceRpcSession)

= [EXCH] - Check ept_map_Request

from scapy.layers.msrpce.ept import *

epm_req = pkts[2][DceRpc5].payload.payload
assert isinstance(epm_req, ept_map_Request)
assert epm_req.max_towers == 4
assert epm_req.map_tower.value.max_count == 75
assert epm_req.map_tower.value.tower_length == 75

twr = protocol_tower_t(epm_req.map_tower.value.tower_octet_string)
assert twr.count == 5
assert twr.floors[0].sprintf("%uuid%") == 'logon'

= [EXCH] - Re-build ept_map_Request from scratch

pkt = ept_map_Request(
    entry_handle=NDRContextHandle(attributes=0, uuid=b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
    obj=NDRPointer(
        referent_id=1,
        value=UUID(Data1=0, Data2=0, Data3=0, Data4=b'\x00\x00\x00\x00\x00\x00\x00\x00')
    ),
    map_tower=NDRPointer(
        referent_id=2,
        value=twr_p_t(tower_octet_string=b'\x05\x00\x13\x00\rxV4\x124\x12\xcd\xab\xef\x00\x01#Eg\xcf\xfb\x01\x00\x02\x00\x00\x00\x13\x00\r\x04]\x88\x8a\xeb\x1c\xc9\x11\x9f\xe8\x08\x00+\x10H`\x02\x00\x02\x00\x00\x00\x01\x00\x0b\x02\x00\x00\x00\x01\x00\x07\x02\x00\x00\x87\x01\x00\t\x04\x00\x00\x00\x00\x00')
    ),
    max_towers=4
)

output = bytearray(bytes(pkt))
assert bytes(output) == bytes(epm_req)

= [EXCH] - Check ept_map_Response

epm_resp = pkts[3][DceRpc5].payload.payload

assert epm_resp.entry_handle.attributes == 0
assert epm_resp.entry_handle.uuid == b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
assert epm_resp.ITowers.max_count == 4
assert epm_resp.ITowers.value[0].value[0].value.max_count == 75
assert epm_resp.valueof("ITowers")[0].max_count == 75
assert epm_resp.ITowers.value[0].value[0].value.tower_length == 75
assert epm_resp.valueof("ITowers")[0].tower_length == 75

twr = protocol_tower_t(epm_resp.ITowers.value[0].value[0].value.tower_octet_string)
assert twr.floors[0].sprintf("%uuid%") == 'logon'
assert twr.floors[1].sprintf("%uuid%") == 'NDR 2.0'
assert twr.floors[1].rhs == 0
assert twr.floors[2].protocol_identifier == 11
assert twr.floors[3].sprintf("%protocol_identifier%") == "NCACN_IP_TCP"
assert twr.floors[3].rhs == 49676
assert twr.floors[4].sprintf("%protocol_identifier%") == "IP"
assert twr.floors[4].rhs == "192.168.122.17"

= [EXCH] - Re-build ept_map_Response from scratch

pkt = ept_map_Response(
    entry_handle=NDRContextHandle(attributes=0),
    ITowers=[
        twr_p_t(tower_octet_string=b'\x05\x00\x13\x00\rxV4\x124\x12\xcd\xab\xef\x00\x01#Eg\xcf\xfb\x01\x00\x02\x00\x00\x00\x13\x00\r\x04]\x88\x8a\xeb\x1c\xc9\x11\x9f\xe8\x08\x00+\x10H`\x02\x00\x02\x00\x00\x00\x01\x00\x0b\x02\x00\x00\x00\x01\x00\x07\x02\x00\xc2\x0c\x01\x00\t\x04\x00\xc0\xa8z\x11'),
        twr_p_t(tower_octet_string=b'\x05\x00\x13\x00\rxV4\x124\x12\xcd\xab\xef\x00\x01#Eg\xcf\xfb\x01\x00\x02\x00\x00\x00\x13\x00\r\x04]\x88\x8a\xeb\x1c\xc9\x11\x9f\xe8\x08\x00+\x10H`\x02\x00\x02\x00\x00\x00\x01\x00\x0b\x02\x00\x00\x00\x01\x00\x07\x02\x00\xc2\x03\x01\x00\t\x04\x00\xc0\xa8z\x11')
    ],
)

pkt.ITowers.value[0].value[0].referent_id = 0x3
pkt.ITowers.value[0].value[1].referent_id = 0x4
pkt.ITowers.max_count = 4
assert bytes(pkt) == bytes(epm_resp)

= [EXCH] - Check NetrServerReqChallenge_Request

chall_req = pkts[6][NetrServerReqChallenge_Request]
assert chall_req.valueof("ComputerName") == b"WIN1"
assert chall_req.PrimaryName is None
assert chall_req.ClientChallenge.data == b"12345678"

= [EXCH] - Re-build NetrServerReqChallenge_Request from scratch

pkt = NetrServerReqChallenge_Request(
    ComputerName=b'WIN1',
    ClientChallenge=PNETLOGON_CREDENTIAL(data=b'12345678'),
    PrimaryName=None,
)

assert bytes(pkt) == bytes(chall_req)

= [EXCH] - Check NetrServerReqChallenge_Response

chall_resp = pkts[7][NetrServerReqChallenge_Response]
assert chall_resp.ServerChallenge.data == b'Zq/\xc4D\xfeRI'
assert chall_resp.status == 0

= [EXCH] - Re-build NetrServerReqChallenge_Response from scratch

pkt = NetrServerReqChallenge_Response(
    ServerChallenge=PNETLOGON_CREDENTIAL(data=b'Zq/\xc4D\xfeRI')
)

assert bytes(pkt) == bytes(chall_resp)

= [EXCH] - Check NetrServerAuthenticate3_Request

auth_req = pkts[8][NetrServerAuthenticate3_Request]
assert auth_req.PrimaryName is None
assert auth_req.valueof("AccountName") == b"WIN1$"
assert auth_req.sprintf("%SecureChannelType%") == "WorkstationSecureChannel"
assert auth_req.valueof("ComputerName") == b"WIN1"
assert auth_req.ClientCredential.data == b'd:\xb3p\xc6\x9e\xf40'
assert auth_req.NegotiateFlags == 1611661311

= [EXCH] - Re-build NetrServerAuthenticate3_Request from scratch

pkt = NetrServerAuthenticate3_Request(
    AccountName=b'WIN1$',
    ComputerName=b'WIN1',
    ClientCredential=PNETLOGON_CREDENTIAL(data=b'd:\xb3p\xc6\x9e\xf40'),
    PrimaryName=None,
    SecureChannelType="WorkstationSecureChannel",
    NegotiateFlags=1611661311,
)

output = bytearray(bytes(pkt))
assert bytes(output) == bytes(auth_req)

= [EXCH] - Check NetrServerAuthenticate3_Response

auth_resp = pkts[9][NetrServerAuthenticate3_Response]
assert auth_resp.ServerCredential.data == b'1h\x8d\xb8\xf4zH\xaf'
assert auth_resp.NegotiateFlags == 1611661311
assert auth_resp.AccountRid == 1105
assert auth_resp.status == 0

= [EXCH] - Re-build NetrServerAuthenticate3_Response from scratch

pkt = NetrServerAuthenticate3_Response(
    ServerCredential=PNETLOGON_CREDENTIAL(data=b'1h\x8d\xb8\xf4zH\xaf'),
    NegotiateFlags=1611661311,
    AccountRid=1105,
    status=0
)

assert bytes(pkt) == bytes(auth_resp)

+ GSS-API NetlogonSSP tests
~ mock

= [NetlogonSSP] - Create randomness-mock context manager

# mock the random to get consistency
from unittest import mock

def fake_urandom(x):
    # wow, impressive entropy
    return b"0" * x

_patches = [
    # Patch all the random
    mock.patch('scapy.layers.msrpce.msnrpc.os.urandom', side_effect=fake_urandom),
]

class NetlogonRandomPatcher:
    def __enter__(self):
        for p in _patches:
            p.start()
    def __exit__(self, *args, **kwargs):
        for p in _patches:
            p.stop()

= [NetlogonSSP] - RC4 - Create client and server NetlogonSSP

from scapy.layers.msrpce.msnrpc import NetlogonSSP, NL_AUTH_MESSAGE

client = NetlogonSSP(SessionKey=b"\x00\x00\x00\x00\x00\x00\x00\x00", computername="DC1", domainname="DOMAIN", AES=False)
server = NetlogonSSP(SessionKey=b"\x00\x00\x00\x00\x00\x00\x00\x00", computername="DC1", domainname="DOMAIN", AES=False)

= [NetlogonSSP] - RC4 - GSS_Init_sec_context (NL_AUTH_MESSAGE)

clicontext, tok, negResult = client.GSS_Init_sec_context(None)

assert negResult == 1
assert isinstance(tok, NL_AUTH_MESSAGE)
assert tok.MessageType == 0
assert tok.Flags == 3

bytes(tok)
assert bytes(tok) == b'\x00\x00\x00\x00\x03\x00\x00\x00DOMAIN\x00DC1\x00'

= [NetlogonSSP] - RC4 - GSS_Accept_sec_context (NL_AUTH_MESSAGE->NL_AUTH_MESSAGE)

srvcontext, tok, negResult = server.GSS_Accept_sec_context(None, tok)

assert negResult == 0
assert tok.MessageType == 1

bytes(tok)
assert bytes(tok) == b'\x01\x00\x00\x00\x00\x00\x00\x00'

= [NetlogonSSP] - RC4 - GSS_Init_sec_context (NL_AUTH_MESSAGE->OK)

clicontext, tok, negResult = client.GSS_Init_sec_context(clicontext, tok)

assert negResult == 0
assert tok is None

= [NetlogonSSP] - RC4 - GSS_WrapEx/GSS_UnwrapEx: client sends a encrypted payload

data_header = b"header"  # signed but not encrypted
data = b"testAAAAAAAAAABBBBBBBBBCCCCCCCCCDDDDDDDDDEEEEEEEEE"  # encrypted

with NetlogonRandomPatcher():
    _msgs, sig = client.GSS_WrapEx(
        clicontext,
        [
            SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
            SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=data)
        ]
    )

encrypted = _msgs[1].data
assert bytes(encrypted) == b'~\x82\xda\x9e>t?QA\xe7\x06B\x87\x01\x03\x97\xea\xd2\xe9\xc4\xbfM$\x95VKxivff\x93\x9a\xe8\rbe#\xe6W\xb4\x82A\xd8\xa7\xf7]\xf3\xb0\x88'
assert bytes(sig) == b'w\x00z\x00\xff\xff\x00\x00\x9f\xcb\xb6s\x8c\x8c\x0c*\xa9E\xa4\xd1\x85\xee.\xa2:\xd7\x99\xdaO\x05N '

decrypted = server.GSS_UnwrapEx(
    srvcontext,
    [
        SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
        SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=encrypted),
    ],
    sig
)[1].data
assert decrypted == data

= [NetlogonSSP] - RC4 - GSS_WrapEx/GSS_UnwrapEx: server answers back

with NetlogonRandomPatcher():
    _msgs, sig = server.GSS_WrapEx(
        srvcontext,
        [
            SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
            SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=data)
        ]
    )

re_encrypted = _msgs[1].data
assert bytes(re_encrypted) == b'\x9b\xc7c\x81\xfbF(\x19\xb6>\x08i\x7f\x18~H\xd6m~\x11K\x83\xb6\x15\x9a\xceP\xa1K\x8d\x83\xbb\xa7\x0fR*J\x89-\xec!\xde\xffs)\xd8F\x9c@^'
assert bytes(sig) == b'w\x00z\x00\xff\xff\x00\x00\x9f\xcb\xb6r\x0c\x8c\x0c*\xa9E\xa4\xd1\x85\xee.\xa2\xdf\x92 \xc5\x8a7Yh'

decrypted = client.GSS_UnwrapEx(
    clicontext,
    [
        SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
        SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=re_encrypted),
    ],
    sig
)[1].data
assert decrypted == data

= [NetlogonSSP] - RC4 - GSS_WrapEx/GSS_UnwrapEx: inject fault

_msgs, sig = client.GSS_WrapEx(
    clicontext,
    [
        SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
        SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=data)
    ]
)
encrypted = _msgs[1].data
assert encrypted != data
bad_data_header = data_header[:-3] + b"hey"
try:
    server.GSS_UnwrapEx(srvcontext,
        [
            SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=bad_data_header),
            SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=encrypted),
        ],
        sig
    )
    assert False, "No error was reported, but there should have been one"
except ValueError:
    pass

= [NetlogonSSP] - AES - Create client and server NetlogonSSP

from scapy.layers.msrpce.msnrpc import NetlogonSSP, NL_AUTH_MESSAGE

client = NetlogonSSP(SessionKey=b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", computername="DC1", domainname="DOMAIN", AES=True)
server = NetlogonSSP(SessionKey=b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00", computername="DC1", domainname="DOMAIN", AES=True)

= [NetlogonSSP] - AES - GSS_Init_sec_context (NL_AUTH_MESSAGE)

clicontext, tok, negResult = client.GSS_Init_sec_context(None)

assert negResult == 1
assert isinstance(tok, NL_AUTH_MESSAGE)
assert tok.MessageType == 0
assert tok.Flags == 3

bytes(tok)
assert bytes(tok) == b'\x00\x00\x00\x00\x03\x00\x00\x00DOMAIN\x00DC1\x00'

= [NetlogonSSP] - AES - GSS_Accept_sec_context (NL_AUTH_MESSAGE->NL_AUTH_MESSAGE)

srvcontext, tok, negResult = server.GSS_Accept_sec_context(None, tok)

assert negResult == 0
assert tok.MessageType == 1

bytes(tok)
assert bytes(tok) == b'\x01\x00\x00\x00\x00\x00\x00\x00'

= [NetlogonSSP] - AES - GSS_Init_sec_context (NL_AUTH_MESSAGE->OK)

clicontext, tok, negResult = client.GSS_Init_sec_context(clicontext, tok)

assert negResult == 0
assert tok is None

= [NetlogonSSP] - AES - GSS_WrapEx/GSS_UnwrapEx: client sends a encrypted payload

data_header = b"header"  # signed but not encrypted
data = b"testAAAAAAAAAABBBBBBBBBCCCCCCCCCDDDDDDDDDEEEEEEEEE"  # encrypted

with NetlogonRandomPatcher():
    _msgs, sig = client.GSS_WrapEx(
        clicontext,
        [
            SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
            SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=data)
        ]
    )

encrypted = _msgs[1].data
assert bytes(encrypted) == b'\xbf\x1aP\xb4\xb54\xe4^\x1a\xfe\xf3\x1f(\xfa[\xc4\x06\xdb_\x1a9\x90<r\xe7Q\x97\xacR\x823\xee]b\xf5\xa0w#4n\xaa#j\xf0\xc0pOe\x88\xf3'
assert bytes(sig) == b'\x13\x00\x1a\x00\xff\xff\x00\x00.\n\x8e\xce\xd2\x14\x06W\x978\xe2\xad\x8c\xdd\x8ef\xeba\xa5\x15\xb2\xc2\xce?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

decrypted = server.GSS_UnwrapEx(
    srvcontext,
    [
        SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
        SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=encrypted),
    ],
    sig
)[1].data
assert decrypted == data

= [NetlogonSSP] - AES - GSS_WrapEx/GSS_UnwrapEx: server answers back

with NetlogonRandomPatcher():
    _msgs, sig = server.GSS_WrapEx(
        srvcontext,
        [
            SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
            SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=data)
        ]
    )

re_encrypted = _msgs[1].data
assert bytes(re_encrypted) == b'\xf9\xb1g\xaf\xb8\x87\x1f\xd5\xe0\x12).\x8dW\xf1\x0cG\x16\xf5\xb4:\xde\x91\xd5\x03\x8a#\xa6\xe1j[*U\xfc\xdb\xfa\x02\xcd\x85\x82O\x11\x908\xbd\xf3q\xd6>P'
assert bytes(sig) == b'\x13\x00\x1a\x00\xff\xff\x00\x00.\n\x8e\xcf\xbek \x84\x978\xe2\xad\x8c\xdd\x8efS\x9b\xf3DG\xf4[\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

decrypted = client.GSS_UnwrapEx(
    clicontext,
    [
        SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
        SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=re_encrypted),
    ],
    sig
)[1].data
assert decrypted == data

= [NetlogonSSP] - AES - GSS_WrapEx/GSS_UnwrapEx: inject fault

_msgs, sig = client.GSS_WrapEx(
    clicontext,
    [
        SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=data_header),
        SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=data)
    ]
)
encrypted = _msgs[1].data
assert encrypted != data
bad_data_header = data_header[:-3] + b"hey"
try:
    server.GSS_UnwrapEx(srvcontext,
        [
            SSP.WRAP_MSG(conf_req_flag=False, sign=True, data=bad_data_header),
            SSP.WRAP_MSG(conf_req_flag=True, sign=True, data=encrypted),
        ],
        sig
    )
    assert False, "No error was reported, but there should have been one"
except ValueError:
    pass
