% Scapy ISAKMP layer tests


############
############
+ ISAKMP tests
~ ISAKMP 

= ISAKMP_payload_Transform
p=IP(src='192.168.8.14',dst='10.0.0.1')/UDP()/ISAKMP()/ISAKMP_payload_SA(doi=0, prop=ISAKMP_payload_Proposal(trans=ISAKMP_payload_Transform(transforms=[('Encryption', 'AES-CBC'), ('Hash', 'MD5'), ('Authentication', 'PSK'), ('GroupDesc', '1536MODPgr'), ('KeyLength', 256), ('LifeType', 'Seconds'), ('LifeDuration', 86400)])/ISAKMP_payload_Transform(res2=12345,transforms=[('Encryption', '3DES-CBC'), ('Hash', 'SHA'), ('Authentication', 'PSK'), ('GroupDesc', '1024MODPgr'), ('LifeType', 'Seconds'), ('LifeDuration', 86400)])))

r = p[ISAKMP_payload_Transform:2]
r
r.res2 == 12345

= ISAKMP_payload_Transform build
hexdump(p)
assert raw(p) == b"E\x00\x00\x96\x00\x01\x00\x00@\x11\xa7\x9f\xc0\xa8\x08\x0e\n\x00\x00\x01\x01\xf4\x01\xf4\x00\x82\xbf\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00z\x00\x00\x00^\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00R\x01\x01\x00\x00\x03\x00\x00'\x00\x01\x00\x00\x80\x01\x00\x07\x80\x02\x00\x01\x80\x03\x00\x01\x80\x04\x00\x05\x80\x0e\x01\x00\x80\x0b\x00\x01\x00\x0c\x00\x03\x01Q\x80\x00\x00\x00#\x00\x0109\x80\x01\x00\x05\x80\x02\x00\x02\x80\x03\x00\x01\x80\x04\x00\x02\x80\x0b\x00\x01\x00\x0c\x00\x03\x01Q\x80"

= ISAKMP_payload_Transform dissection
q=IP(raw(p))
q.show()
r = q[ISAKMP_payload_Transform:2]
r
r.res2 == 12345

= ISAKMP_payload_Notify

pkt = ISAKMP()/ISAKMP_payload_Notify(
    notify_msg_type="INVALID-FLAGS",
    notify_data="Erreur",
)/ISAKMP_payload_Notify()

assert bytes(pkt) == b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0b\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00:\x0b\x00\x00\x12\x00\x00\x00\x00\x01\x00\x00\x08Erreur\x00\x00\x00\x0c\x00\x00\x00\x00\x01\x00\x00\x00'

pkt = ISAKMP(bytes(pkt))
assert pkt[ISAKMP_payload_Notify].notify_data == b"Erreur"
assert not pkt[ISAKMP_payload_Notify:2].next_payload

= ISAKMP_payload_delete

pkt = ISAKMP()/ISAKMP_payload_Delete()
pkt.SPIs = [b"A" * 16, b"B" * 16]
assert raw(pkt) == b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c\x10\x00\x00\x00\x00\x00\x00\x00\x00\x00H\x00\x00\x00,\x00\x00\x00\x00\x01\x10\x00\x02AAAAAAAAAAAAAAAABBBBBBBBBBBBBBBB'
pkt = ISAKMP(raw(pkt))
assert pkt.SPIcount == 2
assert pkt.SPIsize == 16
assert pkt.length == 72
assert pkt[ISAKMP_payload_Delete].length == 44
