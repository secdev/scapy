% EAP regression tests for Scapy

############
############
+ EAPOL class tests

= EAPOL - Basic Instantiation
raw(EAPOL()) == b'\x01\x00\x00\x00'

= EAPOL - Instantiation with specific values
raw(EAPOL(version = 3, type = 5)) == b'\x03\x05\x00\x00'

= EAPOL - Dissection (1)
s = b'\x03\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
eapol = EAPOL(s)
assert eapol.version == 3
assert eapol.type == 1
assert eapol.len == 0

= EAPOL - Dissection (2)
s = b'\x03\x00\x00\x05\x01\x01\x00\x05\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
eapol = EAPOL(s)
assert eapol.version == 3
assert eapol.type == 0
assert eapol.len == 5

= EAPOL - Dissection (3)
s = b'\x03\x00\x00\x0e\x02\x01\x00\x0e\x01anonymous\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
eapol = EAPOL(s)
assert eapol.version == 3
assert eapol.type == 0
assert eapol.len == 14

= EAPOL - Dissection (4)
req = EAPOL(b'\x03\x00\x00\x05\x01\x01\x00\x05\x01')
ans = EAPOL(b'\x03\x00\x00\x0e\x02\x01\x00\x0e\x01anonymous')
ans.answers(req)

= EAPOL - Dissection (5)
s = b'\x02\x00\x00\x06\x01\x01\x00\x06\r '
eapol = EAPOL(s)
assert eapol.version == 2
assert eapol.type == 0
assert eapol.len == 6
assert eapol.haslayer(EAP_TLS)

= EAPOL - Dissection (6)
s = b'\x03\x00\x00<\x02\x9e\x00<+\x01\x16\x03\x01\x001\x01\x00\x00-\x03\x01dr1\x93ZS\x0en\xad\x1f\xbaH\xbb\xfe6\xe6\xd0\xcb\xec\xd7\xc0\xd7\xb9\xa5\xc9\x0c\xfd\x98o\xa7T \x00\x00\x04\x004\x00\x00\x01\x00\x00\x00'
eapol = EAPOL(s)
assert eapol.version == 3
assert eapol.type == 0
assert eapol.len == 60
assert eapol.haslayer(EAP_FAST)

############
############
+ EAPOL-Key class tests

= EAPOK-Key - over 802.11 - Dissection
s = b'\x08\x02:\x01\x00\xc0\xcab\xa4\xf6\x00"k\xfbI+\x00"k\xfbI+\xa0[\xaa\xaa\x03\x00\x00\x00\x88\x8e\x02\x03\x00u\x02\x00\x8a\x00\x10\x00\x00\x00\x00\x00\x00\x00\x04\x95X{I5\':3\x8f\x90\xb1I\xae\x1f\xd7-"\x82\x1e\\$\xefC=\x83\x97?M\xd6\xdf>\x9b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\xdd\x14\x00\x0f\xac\x04\x03\xca?d\xca\xed\xdd\xef\xf69;\xefX\xd4\x97w'
wifi = Dot11(s)
assert wifi[EAPOL].key_descriptor_type == 2
assert wifi[EAPOL].key_type == 0
assert wifi[EAPOL].has_key_mic == 1
assert wifi[EAPOL].encrypted_key_data == 1
assert wifi[EAPOL].key_replay_counter == 4
assert wifi[EAPOL].key_mic == b"\x00" * 16
assert wifi[EAPOL].key_length == 22
assert len(wifi[EAPOL].key) == 22

############
############
+ EAPOL-MKA class tests

= EAPOL-MKA - With Basic parameter set - Dissection
eapol = None
s = b'\x03\x05\x00T\x01\xff\xf0<\x00Bh\xa8\x1e\x03\x00\n\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7\x00\x00\x00\x01\x00\x80\xc2\x01\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\xff\x00\x00\x10\xe5\xf5j\x86V\\\xb1\xcc\xa9\xb95\x04m*Cj'
eapol = EAPOL(s)
assert eapol.version == 3
assert eapol.type == 5
assert eapol.len == 84
assert eapol.haslayer(MKAPDU)
assert eapol[MKAPDU].basic_param_set.actor_member_id == b"\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7"
assert eapol[MKAPDU].haslayer(MKAICVSet)
assert eapol[MKAPDU][MKAICVSet].icv == b"\xe5\xf5j\x86V\\\xb1\xcc\xa9\xb95\x04m*Cj"


= EAPOL-MKA - With Potential Peer List parameter set - Dissection
eapol = None
s = b'\x03\x05\x00h\x01\x10\xe0<\xccN$\xc4\xf7\x7f\x00\x80q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6\x00\x00\x00}\x00\x80\xc2\x01\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x02\x00\x00\x10\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7\x00\x00\x00\x01\xff\x00\x00\x105\x01\xdc)\xfd\xd1\xff\xd55\x9c_o\xc9\x9c\xca\xc0'
eapol = EAPOL(s)
assert eapol.version == 3
assert eapol.type == 5
assert eapol.len == 104
assert eapol.haslayer(MKAPDU)
assert eapol[MKAPDU].basic_param_set.actor_member_id == b"q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6"
assert eapol.haslayer(MKAPotentialPeerListParamSet)
assert eapol[MKAPDU][MKAPotentialPeerListParamSet].member_id_message_num[0].member_id == b"\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7"
assert eapol[MKAPDU].haslayer(MKAICVSet)
assert eapol[MKAPDU][MKAICVSet].icv == b"5\x01\xdc)\xfd\xd1\xff\xd55\x9c_o\xc9\x9c\xca\xc0"

= EAPOL-MKA - With Live Peer List parameter set - Dissection
eapol = None
s = b"\x03\x05\x00h\x01\xffp<\x00Bh\xa8\x1e\x03\x00\n\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7\x00\x00\x00\x02\x00\x80\xc2\x01\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x01\x00\x00\x10q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6\x00\x00\x00\x80\xff\x00\x00\x10\xf4\xa1d\x18\tD\xa2}\x8e'\x0c/\xda,\xea\xb7"
eapol = EAPOL(s)
assert eapol.version == 3
assert eapol.type == 5
assert eapol.len == 104
assert eapol.haslayer(MKAPDU)
assert eapol[MKAPDU].basic_param_set.actor_member_id == b'\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7'
assert eapol.haslayer(MKALivePeerListParamSet)
assert eapol[MKAPDU][MKALivePeerListParamSet].member_id_message_num[0].member_id == b"q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6"
assert eapol[MKAPDU].haslayer(MKAICVSet)
assert eapol[MKAPDU][MKAICVSet].icv == b"\xf4\xa1d\x18\tD\xa2}\x8e'\x0c/\xda,\xea\xb7"

= EAPOL-MKA - With SAK Use parameter set - Dissection
eapol = None
s = b'\x03\x05\x00\x94\x01\xffp<\x00Bh\xa8\x1e\x03\x00\n\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7\x00\x00\x00\x03\x00\x80\xc2\x01\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x03\x10\x00(q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6\x00\x00\x00\x01\x00\x00\x00\x00q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6\x00\x00\x00\x01\x00\x00\x00\x00\x01\x00\x00\x10q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6\x00\x00\x00\x83\xff\x00\x00\x10OF\x84\xf1@%\x95\xe6Fw9\x1a\xfa\x03(\xae'
eapol = EAPOL(s)
assert eapol.version == 3
assert eapol.type == 5
assert eapol.len == 148
assert eapol.haslayer(MKAPDU)
assert eapol[MKAPDU].basic_param_set.actor_member_id == b'\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7'
assert eapol.haslayer(MKASAKUseParamSet)
assert eapol[MKAPDU][MKASAKUseParamSet].latest_key_key_server_member_id == b"q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6"
assert eapol.haslayer(MKALivePeerListParamSet)
assert eapol[MKAPDU][MKALivePeerListParamSet].member_id_message_num[0].member_id == b"q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6"
assert eapol[MKAPDU].haslayer(MKAICVSet)
assert eapol[MKAPDU][MKAICVSet].icv == b"OF\x84\xf1@%\x95\xe6Fw9\x1a\xfa\x03(\xae"

= EAPOL-MKA - With Distributed SAK parameter set - Dissection
eapol = None
s = b"\x03\x05\x00\xb4\x01\x10\xe0<\xccN$\xc4\xf7\x7f\x00\x80q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6\x00\x00\x00\x81\x00\x80\xc2\x01\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x01\x00\x00\x10\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7\x00\x00\x00\x02\x03\x10\x00(q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x10\x00\x1c\x00\x00\x00\x01Cz\x05\x88\x9f\xe8-\x94W+?\x13~\xfb\x016yVB?\xbd\xa1\x9fu\xff\x00\x00\x10\xb0H\xcf\xe0:\xa1\x94RD'\x03\xe67\xe1Ur"
eapol = EAPOL(s)
assert eapol.version == 3
assert eapol.type == 5
assert eapol.len == 180
assert eapol.haslayer(MKAPDU)
assert eapol[MKAPDU].basic_param_set.actor_member_id == b"q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6"
assert eapol.haslayer(MKASAKUseParamSet)
assert eapol[MKAPDU][MKASAKUseParamSet].latest_key_key_server_member_id == b"q\x8b\x8a9\x86k/X\x14\xc9\xdc\xf6"
assert eapol.haslayer(MKALivePeerListParamSet)
assert eapol[MKAPDU][MKALivePeerListParamSet].member_id_message_num[0].member_id == b"\xbcj\x00\x96Ywz\x82:\x90\xd9\xe7"
assert eapol.haslayer(MKADistributedSAKParamSet)
assert eapol[MKADistributedSAKParamSet].sak_aes_key_wrap == b"Cz\x05\x88\x9f\xe8-\x94W+?\x13~\xfb\x016yVB?\xbd\xa1\x9fu"
assert eapol[MKAPDU].haslayer(MKAICVSet)
assert eapol[MKAPDU][MKAICVSet].icv == b"\xb0H\xcf\xe0:\xa1\x94RD'\x03\xe67\xe1Ur"


############
############
############
+ EAP class tests

= EAP - Basic Instantiation
raw(EAP()) == b'\x04\x00\x00\x04'

= EAP - Instantiation with specific values
raw(EAP(code = 1, id = 1, len = 5, type = 1)) == b'\x01\x01\x00\x05\x01'

= EAP - Instantiation - Multiple desired authentication types
raw(EAP(code=2, type=3, desired_auth_types=[13,21,25,43])) == b'\x02\x00\x00\t\x03\r\x15\x19+'

= EAP - Dissection (1)
s = b'\x01\x01\x00\x05\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
eap = EAP(s)
assert eap.code == 1
assert eap.id == 1
assert eap.len == 5
assert hasattr(eap, "type")
assert eap.type == 1

= EAP - Dissection (2)
s = b'\x02\x01\x00\x0e\x01anonymous\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
eap = EAP(s)
assert eap.code == 2
assert eap.id == 1
assert eap.len == 14
assert eap.type == 1
assert hasattr(eap, 'identity')
assert eap.identity == b'anonymous'

= EAP - Dissection (3)
s = b'\x01\x01\x00\x06\r '
eap = EAP(s)
assert eap.code == 1
assert eap.id == 1
assert eap.len == 6
assert eap.type == 13
assert eap.haslayer(EAP_TLS)
assert eap[EAP_TLS].L == 0
assert eap[EAP_TLS].M == 0
assert eap[EAP_TLS].S == 1

= EAP - Dissection (4)
s = b'\x02\x01\x00\xd1\r\x00\x16\x03\x01\x00\xc6\x01\x00\x00\xc2\x03\x01UK\x02\xdf\x1e\xde5\xab\xfa[\x15\xef\xbe\xa2\xe4`\xc6g\xb9\xa8\xaa%vAs\xb2\x1cXt\x1c0\xb7\x00\x00P\xc0\x14\xc0\n\x009\x008\x00\x88\x00\x87\xc0\x0f\xc0\x05\x005\x00\x84\xc0\x12\xc0\x08\x00\x16\x00\x13\xc0\r\xc0\x03\x00\n\xc0\x13\xc0\t\x003\x002\x00\x9a\x00\x99\x00E\x00D\xc0\x0e\xc0\x04\x00/\x00\x96\x00A\xc0\x11\xc0\x07\xc0\x0c\xc0\x02\x00\x05\x00\x04\x00\x15\x00\x12\x00\t\x00\xff\x01\x00\x00I\x00\x0b\x00\x04\x03\x00\x01\x02\x00\n\x004\x002\x00\x0e\x00\r\x00\x19\x00\x0b\x00\x0c\x00\x18\x00\t\x00\n\x00\x16\x00\x17\x00\x08\x00\x06\x00\x07\x00\x14\x00\x15\x00\x04\x00\x05\x00\x12\x00\x13\x00\x01\x00\x02\x00\x03\x00\x0f\x00\x10\x00\x11\x00#\x00\x00\x00\x0f\x00\x01\x01'
eap = EAP(s)
assert eap.code == 2
assert eap.id == 1
assert eap.len == 209
assert eap.type == 13
assert eap.haslayer(EAP_TLS)
assert eap[EAP_TLS].L == 0
assert eap[EAP_TLS].M == 0
assert eap[EAP_TLS].S == 0

= EAP - Dissection (5)
s = b'\x02\x9e\x00<+\x01\x16\x03\x01\x001\x01\x00\x00-\x03\x01dr1\x93ZS\x0en\xad\x1f\xbaH\xbb\xfe6\xe6\xd0\xcb\xec\xd7\xc0\xd7\xb9\xa5\xc9\x0c\xfd\x98o\xa7T \x00\x00\x04\x004\x00\x00\x01\x00\x00\x00'
eap = EAP(s)
assert eap.code == 2
assert eap.id == 158
assert eap.len == 60
assert eap.type == 43
assert eap.haslayer(EAP_FAST)
assert eap[EAP_FAST].L == 0
assert eap[EAP_FAST].M == 0
assert eap[EAP_FAST].S == 0
assert eap[EAP_FAST].version == 1

= EAP - Dissection (6)
s = b'\x02\x9f\x01L+\x01\x16\x03\x01\x01\x06\x10\x00\x01\x02\x01\x00Y\xc9\x8a\tcw\t\xdcbU\xfd\x035\xcd\x1a\t\x10f&[(9\xf6\x88W`\xc6\x0f\xb3\x84\x15\x19\xf5\tk\xbd\x8fp&0\xb0\xa4B\x85\x0c<:s\xf2zT\xc3\xbd\x8a\xe4D{m\xe7\x97\xfe>\xda\x14\xb8T1{\xd7H\x9c\xa6\xcb\xe3,u\xdf\xe0\x82\xe5R\x1e<\xe5\x03}\xeb\x98\xe2\xf7\x8d3\xc6\x83\xac"\x8f\xd7\x12\xe5{:"\x84A\xd9\x14\xc2cZF\xd4\t\xab\xdar\xc7\xe0\x0e\x00o\xce\x05g\xdc?\xcc\xf7\xe83\x83E\xb3>\xe8<3-QB\xfd$C/\x1be\xcf\x03\xd6Q4\xbe\\h\xba)<\x99N\x89\xd9\xb1\xfa!\xd7a\xef\xa3\xd3o\xed8Uz\xb5k\xb0`\xfeC\xbc\xb3aS,d\xe6\xdc\x13\xa4A\x1e\x9b\r{\xd6s \xd0cQ\x95y\xc8\x1d\xc3\xd9\x87\xf2=\x81\x96q~\x99E\xc3\x97\xa8px\xe2\xc7\x92\xeb\xff/v\x84\x1e\xfb\x00\x95#\xba\xfb\xd88h\x90K\xa7\xbd9d\xb4\xf2\xf2\x14\x02vtW\xaa\xadY\x14\x03\x01\x00\x01\x01\x16\x03\x01\x000\x97\xc5l\xd6\xef\xffcM\x81\x90Q\x96\xf6\xfeX1\xf7\xfc\x84\xc6\xa0\xf6Z\xcd\xb6\xe1\xd4\xdb\x88\xf9t%Q!\xe7,~#2G-\xdf\x83\xbf\x86Q\xa2$'
eap = EAP(s)
assert eap.code == 2
assert eap.id == 159
assert eap.len == 332
assert eap.type == 43
assert eap.haslayer(EAP_FAST)
assert eap[EAP_FAST].L == 0
assert eap[EAP_FAST].M == 0
assert eap[EAP_FAST].S == 0
assert eap[EAP_FAST].version == 1

= EAP - Dissection (7)
s = b'\x02\xf1\x00\t\x03\r\x15\x19+'
eap = EAP(s)
assert eap.code == 2
assert eap.id == 241
assert eap.len == 9
assert eap.type == 3
assert hasattr(eap, 'desired_auth_types')
assert eap.desired_auth_types == [13,21,25,43]

= EAP - Dissection (8)
s = b"\x02\x03\x01\x15\x15\x00\x16\x03\x01\x01\n\x01\x00\x01\x06\x03\x03\xd5\xd9\xd5rT\x9e\xb8\xbe,>\xcf!\xcf\xc7\x02\x8c\xb1\x1e^F\xf7\xc84\x8c\x01t4\x91[\x02\xc8/\x00\x00\x8c\xc00\xc0,\xc0(\xc0$\xc0\x14\xc0\n\x00\xa5\x00\xa3\x00\xa1\x00\x9f\x00k\x00j\x00i\x00h\x009\x008\x007\x006\x00\x88\x00\x87\x00\x86\x00\x85\xc02\xc0.\xc0*\xc0&\xc0\x0f\xc0\x05\x00\x9d\x00=\x005\x00\x84\xc0/\xc0+\xc0'\xc0#\xc0\x13\xc0\t\x00\xa4\x00\xa2\x00\xa0\x00\x9e\x00g\x00@\x00?\x00>\x003\x002\x001\x000\x00\x9a\x00\x99\x00\x98\x00\x97\x00E\x00D\x00C\x00B\xc01\xc0-\xc0)\xc0%\xc0\x0e\xc0\x04\x00\x9c\x00<\x00/\x00\x96\x00A\x00\xff\x01\x00\x00Q\x00\x0b\x00\x04\x03\x00\x01\x02\x00\n\x00\x1c\x00\x1a\x00\x17\x00\x19\x00\x1c\x00\x1b\x00\x18\x00\x1a\x00\x16\x00\x0e\x00\r\x00\x0b\x00\x0c\x00\t\x00\n\x00\r\x00 \x00\x1e\x06\x01\x06\x02\x06\x03\x05\x01\x05\x02\x05\x03\x04\x01\x04\x02\x04\x03\x03\x01\x03\x02\x03\x03\x02\x01\x02\x02\x02\x03\x00\x0f\x00\x01\x01"
eap = EAP(s)
assert eap.code == 2
assert eap.id == 3
assert eap.len == 277
assert eap.type == 21
assert eap.haslayer(EAP_TTLS)
assert eap[EAP_TTLS].L == 0
assert eap[EAP_TTLS].M == 0
assert eap[EAP_TTLS].S == 0
assert eap[EAP_TTLS].version == 0

= EAP - EAP_TLS - Basic Instantiation
raw(EAP_TLS()) == b'\x01\x00\x00\x06\r\x00'

= EAP - EAP_FAST - Basic Instantiation
raw(EAP_FAST()) == b'\x01\x00\x00\x06+\x00'

= EAP - EAP_TTLS - Basic Instantiation
raw(EAP_TTLS()) == b'\x01\x00\x00\x06\x15\x00'

= EAP - EAP_PEAP - Basic Instantiation
raw(EAP_PEAP()) == b'\x01\x00\x00\x06\x19\x01'

= EAP - EAP_MD5 - Basic Instantiation
raw(EAP_MD5()) == b'\x01\x00\x00\x06\x04\x00'

= EAP - EAP_MD5 - Request - Dissection (8)
s = b'\x01\x02\x00\x16\x04\x10\x86\xf9\x89\x94\x81\x01\xb3 nHh\x1b\x8d\xe7^\xdb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
eap = EAP(s)
assert eap.code == 1
assert eap.id == 2
assert eap.len == 22
assert eap.type == 4
assert eap.haslayer(EAP_MD5)
assert eap[EAP_MD5].value_size == 16
assert eap[EAP_MD5].value == b'\x86\xf9\x89\x94\x81\x01\xb3 nHh\x1b\x8d\xe7^\xdb'
assert eap[EAP_MD5].optional_name == b''

= EAP - EAP_MD5 - Response - Dissection (9)
s = b'\x02\x02\x00\x16\x04\x10\xfd\x1e\xffe\xf5\x80y\xa8\xe3\xc8\xf1\xbd\xc2\x85\xae\xcf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
eap = EAP(s)
assert eap.code == 2
assert eap.id == 2
assert eap.len == 22
assert eap.type == 4
assert eap.haslayer(EAP_MD5)
assert eap[EAP_MD5].value_size == 16
assert eap[EAP_MD5].value == b'\xfd\x1e\xffe\xf5\x80y\xa8\xe3\xc8\xf1\xbd\xc2\x85\xae\xcf'
assert eap[EAP_MD5].optional_name == b''

= EAP - LEAP - Basic Instantiation
raw(LEAP()) == b'\x01\x00\x00\x08\x11\x01\x00\x00'

= EAP - LEAP - Request - Dissection (10)
s = b'\x01D\x00\x1c\x11\x01\x00\x088\xb6\xd7\xa1E<!\x15supplicant-1'
eap = LEAP(s)
assert eap.code == 1
assert eap.id == 68
assert eap.len == 28
assert eap.type == 17
assert eap.haslayer(LEAP)
assert eap[LEAP].version == 1
assert eap[LEAP].count == 8
assert eap[LEAP].challenge_response == b'8\xb6\xd7\xa1E<!\x15'
assert eap[LEAP].username == b"supplicant-1"

= EAP - LEAP - Response - Dissection (11)
s = b'\x02D\x00,\x11\x01\x00\x18\xb3\x82[\x82\x8a\xc8M*\xf3\xe7\xb3\xad,7\x8b\xbfG\x81\xda\xbf\xe6\xc1\x9b\x95supplicant-1'
eap = LEAP(s)
assert eap.code == 2
assert eap.id == 68
assert eap.len == 44
assert eap.type == 17
assert eap.haslayer(LEAP)
assert eap[LEAP].version == 1
assert eap[LEAP].count == 24
assert eap[LEAP].challenge_response == b'\xb3\x82[\x82\x8a\xc8M*\xf3\xe7\xb3\xad,7\x8b\xbfG\x81\xda\xbf\xe6\xc1\x9b\x95'
assert eap[LEAP].username == b"supplicant-1"

= EAP - PEAP - Request - Dissection
s = b'\x01\x03\x00\x06\x19 '
eap = EAP_PEAP(s)
assert eap.code == 1
assert eap.id == 3
assert eap.len == 6
assert eap.type == 25
assert eap.haslayer(EAP_PEAP)
assert eap[EAP_PEAP].S == 1
assert eap[EAP_PEAP].version == 0

= EAP - PEAP - Response - Dissection
s = b'\x02\x03\x008\x19\x01\x16\x03\x03\x00-\x01\x00\x00)\x03\x03Zt9\xb6\xdem\xb9\xd4\x00\xed\xa5Bp>\x9a9\x8a[\x91\xe1U\xfa\xb6H\xd1\xbd\x9b\xd5\xadl\rV\x00\x00\x02\x00/\x01\x00'
eap = EAP_PEAP(s)
assert eap.code == 2
assert eap.id == 3
assert eap.len == 56
assert eap.type == 25
assert eap.haslayer(EAP_PEAP)
assert eap[EAP_PEAP].S == 0
assert eap[EAP_PEAP].version == 1
assert hasattr(eap[EAP_PEAP], "tls_data")

= EAP - Layers (1)
eap = EAP_MD5()
assert EAP_MD5 in eap
assert not EAP_TLS in eap
assert not EAP_FAST in eap
assert not LEAP in eap
assert EAP in eap
eap = EAP_TLS()
assert EAP_TLS in eap
assert not EAP_MD5 in eap
assert not EAP_FAST in eap
assert not LEAP in eap
assert EAP in eap
eap = EAP_FAST()
assert EAP_FAST in eap
assert not EAP_MD5 in eap
assert not EAP_TLS in eap
assert not LEAP in eap
assert EAP in eap
eap = EAP_TTLS()
assert EAP_TTLS in eap
assert not EAP_MD5 in eap
assert not EAP_TLS in eap
assert not EAP_FAST in eap
assert not LEAP in eap
assert EAP in eap
eap = EAP_PEAP()
assert EAP_PEAP in eap
assert EAP in eap
eap = LEAP()
assert not EAP_MD5 in eap
assert not EAP_TLS in eap
assert not EAP_FAST in eap
assert LEAP in eap
assert EAP in eap

= EAP - Layers (2)
eap = EAP_MD5()
assert type(eap[EAP]) == EAP_MD5
eap = EAP_TLS()
assert type(eap[EAP]) == EAP_TLS
eap = EAP_FAST()
assert type(eap[EAP]) == EAP_FAST
eap = EAP_TTLS()
assert type(eap[EAP]) == EAP_TTLS
eap = EAP_PEAP()
assert type(eap[EAP]) == EAP_PEAP
eap = LEAP()
assert type(eap[EAP]) == LEAP

= EAP - sessions (1)
p = IP()/TCP()/EAP()
l = PacketList(p)
s = l.sessions()  # Crashed on commit: e42ecdc54556c4852ca06b1a6da6c1ccbf3f522e
assert len(s) == 1

= EAP - sessions (2)
p = IP()/UDP()/EAP()
l = PacketList(p)
s = l.sessions()  # Crashed on commit: e42ecdc54556c4852ca06b1a6da6c1ccbf3f522e
assert len(s) == 1
