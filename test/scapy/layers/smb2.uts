+ SMB2 Header

= SMB2 Header dissecting

# OK test
rawpkt = b'\x45\x00\x01\x18\x16\x2c\x40\x00\x37\x06\xc4\x14\x91\xdc\x18\x13\xc0\xa8\xfe\x07\x9d\x76\x01\xbd\x37\x06\x5e\x82\xa3\xca\x83\xd2\x50\x18\x01\xf6\x11\x5b\x00\x00\x00\x00\x00\xec\xfe\x53\x4d\x42\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x24\x00\x04\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x59\x9e\x84\xf1\x9d\x61\xce\x99\x1f\x50\x5c\x04\x44\x74\xb1\x0a\x70\x00\x00\x00\x04\x00\x00\x00\x10\x02\x00\x03\x02\x03\x11\x03\x00\x00\x00\x00\x01\x00\x26\x00\x00\x00\x00\x00\x01\x00\x20\x00\x01\x00\x75\x06\x05\xed\x60\x88\x9e\xcb\x5e\x79\xbb\xe8\x44\x59\xc5\x5c\xd2\x82\x51\x06\x32\x7a\x6e\x2e\x41\xc5\xa8\x3f\xdd\xf2\xc5\x18\x00\x00\x02\x00\x06\x00\x00\x00\x00\x00\x02\x00\x01\x00\x02\x00\x00\x00\x03\x00\x10\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x1c\x00\x00\x00\x00\x00\x31\x00\x39\x00\x32\x00\x2e\x00\x31\x00\x36\x00\x38\x00\x2e\x00\x31\x00\x37\x00\x38\x00\x2e\x00\x32\x00\x31\x00'
pkt = IP(rawpkt)
# Check layers
assert TCP in pkt
assert NBTSession in pkt
assert pkt[NBTSession].LENGTH == 236
assert SMB2_Header in pkt
smb2 = pkt[SMB2_Header]
# Check header values

assert smb2.Start == b'\xfeSMB'
assert smb2.StructureSize == 64
assert smb2.CreditCharge == 1
assert smb2.CreditsRequested == 0
assert smb2.Command == 0
assert smb2.CreditsRequested == 0
assert smb2.Flags == 0
assert smb2.NextCommand == 0
assert smb2.MID == 0
assert smb2.SessionId == 0
assert smb2.SecuritySignature == b'\x00\x11"3DUfw\x88\x99\xaa\xbb\xcc\xdd\xee\xff'

# KO test
rawpkt = b'\x45\x00\x01\x18\x16\x2c\x40\x00\x37\x06\xc4\x14\x91\xdc\x18\x13\xc0\xa8\xfe\x07\x9d\x76\x01\xbd\x37\x06\x5e\x82\xa3\xca\x83\xd2\x50\x18\x01\xf6\x11\x5b\x00\x00\x00\x00\x00\xec\xf0\x53\x4d\x42\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x24\x00\x04\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x59\x9e\x84\xf1\x9d\x61\xce\x99\x1f\x50\x5c\x04\x44\x74\xb1\x0a\x70\x00\x00\x00\x04\x00\x00\x00\x10\x02\x00\x03\x02\x03\x11\x03\x00\x00\x00\x00\x01\x00\x26\x00\x00\x00\x00\x00\x01\x00\x20\x00\x01\x00\x75\x06\x05\xed\x60\x88\x9e\xcb\x5e\x79\xbb\xe8\x44\x59\xc5\x5c\xd2\x82\x51\x06\x32\x7a\x6e\x2e\x41\xc5\xa8\x3f\xdd\xf2\xc5\x18\x00\x00\x02\x00\x06\x00\x00\x00\x00\x00\x02\x00\x01\x00\x02\x00\x00\x00\x03\x00\x10\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x1c\x00\x00\x00\x00\x00\x31\x00\x39\x00\x32\x00\x2e\x00\x31\x00\x36\x00\x38\x00\x2e\x00\x31\x00\x37\x00\x38\x00\x2e\x00\x32\x00\x31\x00'
pkt = IP(rawpkt)
# Check layers
assert TCP in pkt
assert NBTSession in pkt
assert pkt[NBTSession].LENGTH == 236
# Should not have a proper SMB2 Header as magic is \xf0SMB (not valid)
assert SMB2_Header not in pkt

# KO test with compression header
rawpkt = b'\x45\x00\x01\x18\x16\x2c\x40\x00\x37\x06\xc4\x14\x91\xdc\x18\x13\xc0\xa8\xfe\x07\x9d\x76\x01\xbd\x37\x06\x5e\x82\xa3\xca\x83\xd2\x50\x18\x01\xf6\x11\x5b\x00\x00\x00\x00\x00\xec\xfc\x53\x4d\x42\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x24\x00\x04\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x59\x9e\x84\xf1\x9d\x61\xce\x99\x1f\x50\x5c\x04\x44\x74\xb1\x0a\x70\x00\x00\x00\x04\x00\x00\x00\x10\x02\x00\x03\x02\x03\x11\x03\x00\x00\x00\x00\x01\x00\x26\x00\x00\x00\x00\x00\x01\x00\x20\x00\x01\x00\x75\x06\x05\xed\x60\x88\x9e\xcb\x5e\x79\xbb\xe8\x44\x59\xc5\x5c\xd2\x82\x51\x06\x32\x7a\x6e\x2e\x41\xc5\xa8\x3f\xdd\xf2\xc5\x18\x00\x00\x02\x00\x06\x00\x00\x00\x00\x00\x02\x00\x01\x00\x02\x00\x00\x00\x03\x00\x10\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x1c\x00\x00\x00\x00\x00\x31\x00\x39\x00\x32\x00\x2e\x00\x31\x00\x36\x00\x38\x00\x2e\x00\x31\x00\x37\x00\x38\x00\x2e\x00\x32\x00\x31\x00'
pkt = IP(rawpkt)
# Check layers
assert TCP in pkt
assert NBTSession in pkt
assert pkt[NBTSession].LENGTH == 236
# Should not have a proper SMB2 Header as magic is \xfcSMB (compressed version)
assert SMB2_Header not in pkt


= SMB2 Header assembling

pkt = IP() / TCP() / NBTSession() / SMB2_Header()
assert pkt[NBTSession].TYPE == 0x00         # session message
smb2 = pkt[SMB2_Header]
assert smb2.Start == b'\xfeSMB'

+ SMB2 Negotiate Procotol Request Header dissecting

= Common fields in header

# OK test
rawpkt = b'\x45\x00\x01\x18\x16\x2c\x40\x00\x37\x06\xc4\x14\x91\xdc\x18\x13\xc0\xa8\xfe\x07\x9d\x76\x01\xbd\x37\x06\x5e\x82\xa3\xca\x83\xd2\x50\x18\x01\xf6\x11\x5b\x00\x00\x00\x00\x00\xec\xfe\x53\x4d\x42\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x24\x00\x04\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x59\x9e\x84\xf1\x9d\x61\xce\x99\x1f\x50\x5c\x04\x44\x74\xb1\x0a\x70\x00\x00\x00\x04\x00\x00\x00\x10\x02\x00\x03\x02\x03\x11\x03\x00\x00\x00\x00\x01\x00\x26\x00\x00\x00\x00\x00\x01\x00\x20\x00\x01\x00\x75\x06\x05\xed\x60\x88\x9e\xcb\x5e\x79\xbb\xe8\x44\x59\xc5\x5c\xd2\x82\x51\x06\x32\x7a\x6e\x2e\x41\xc5\xa8\x3f\xdd\xf2\xc5\x18\x00\x00\x02\x00\x06\x00\x00\x00\x00\x00\x02\x00\x01\x00\x02\x00\x00\x00\x03\x00\x10\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x1c\x00\x00\x00\x00\x00\x31\x00\x39\x00\x32\x00\x2e\x00\x31\x00\x36\x00\x38\x00\x2e\x00\x31\x00\x37\x00\x38\x00\x2e\x00\x32\x00\x31\x00'
pkt = IP(rawpkt)
# Check layers
assert TCP in pkt
assert NBTSession in pkt
assert pkt[NBTSession].LENGTH == 236
assert SMB2_Header in pkt
assert SMB2_Negotiate_Protocol_Request in pkt
nego_req = pkt[SMB2_Negotiate_Protocol_Request]
# Check field values
assert nego_req.StructureSize == 0x24
assert nego_req.DialectCount == 4
assert nego_req.SecurityMode == 0
assert nego_req.Capabilities == 0x7f
assert str(nego_req.ClientGUID) == 'f1849e59-619d-99ce-1f50-5c044474b10a'
assert nego_req.NegotiateContextOffset == 0x70
assert nego_req.NegotiateCount == 4
for dialect in nego_req.Dialects:
    assert dialect in SMB_DIALECTS.keys()

# Check SMB 2.1
assert 0x210 in nego_req.Dialects
# Check SMB 3.0
assert 0x300 in nego_req.Dialects
# Check SMB 3.0.2
assert 0x302 in nego_req.Dialects
# Check SMB 3.1.1
assert 0x311 in nego_req.Dialects
assert len(nego_req.NegotiateContexts) == nego_req.NegotiateCount

= SMB2 Negotiate Context in Request - type PREAUTH - disassemble

preauth = nego_req.NegotiateContexts[0]
assert preauth.ContextType == 0x1
assert preauth.DataLength == 38
assert preauth.HashAlgorithmCount == 1
assert preauth.SaltLength == 32
assert preauth.Salt == b'\x75\x06\x05\xed\x60\x88\x9e\xcb\x5e\x79\xbb\xe8\x44\x59\xc5\x5c\xd2\x82\x51\x06\x32\x7a\x6e\x2e\x41\xc5\xa8\x3f\xdd\xf2\xc5\x18'
assert len(preauth.HashAlgorithms) == 1
assert preauth.HashAlgorithms[0] == 0x1

= SMB2 Negotiate Context in Request - type ENCRYPTION disassemble

enc = nego_req.NegotiateContexts[1]
assert enc.ContextType == 0x2
assert enc.DataLength == 6
assert enc.CipherCount == 2
assert len(enc.Ciphers) == 2
assert enc.Ciphers[0] == 1
assert enc.Ciphers[1] == 2


= SMB2 Negotiate Context in Request - type COMPRESSION

comp = nego_req.NegotiateContexts[2]
assert comp.ContextType == 0x3
assert comp.DataLength == 16
assert comp.CompressionAlgorithmCount == 4
assert len(comp.CompressionAlgorithms) == 4
assert comp.CompressionAlgorithms[0] == 1
assert comp.CompressionAlgorithms[1] == 2
assert comp.CompressionAlgorithms[2] == 3
assert comp.CompressionAlgorithms[3] == 4


= SMB2 Negotiate Context in Request - type NETNAME NEGOCIATE

netname = nego_req.NegotiateContexts[3]
assert netname.ContextType == 0x5
assert netname.DataLength == 28
assert netname.NetName == '192.168.178.21'

= test SMB2 Negotiate Protocol Request Header - assembling

pkt = IP() / TCP() / NBTSession() / SMB2_Header() / SMB2_Negotiate_Protocol_Request()
pkt = IP(raw(pkt))
assert SMB2_Negotiate_Protocol_Request in pkt

= Request with no 0x0311 in dialects

preauth = SMB2_Preauth_Integrity_Capabilities()
preauth_context = SMB2_Negotiate_Context(ContextType = 1, DataLength = len(preauth)) / preauth

pkt = SMB2_Negotiate_Protocol_Request(Dialects=[0x0202], NegotiateContexts=[preauth_context])
assert pkt.__class__(raw(pkt)).NegotiateContexts is None

+ SMB2 Negotiate Protocol Response Header dissecting

= Common fields in header

rawpkt = b'\x45\x00\x02\x3e\x84\xa6\x40\x00\x80\x06\x0b\x74\xc0\xa8\xfe\x07\x91\xdc\x18\x13\x01\xbd\x9d\x76\xa3\xca\x83\xd2\x37\x06\x5f\x72\x50\x18\x04\x01\xe3\x14\x00\x00\x00\x00\x02\x12\xfe\x53\x4d\x42\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x41\x00\x01\x00\x11\x03\x03\x00\x53\x6d\xdd\x1c\x30\x1f\x44\x42\xa5\xc8\x88\x73\x7a\x68\x05\xe1\x2f\x00\x00\x00\x00\x00\x80\x00\x00\x00\x80\x00\x00\x00\x80\x00\xe9\xbe\x9e\x6c\xa4\xf8\xd5\x01\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x40\x01\xc0\x01\x00\x00\x60\x82\x01\x3c\x06\x06\x2b\x06\x01\x05\x05\x02\xa0\x82\x01\x30\x30\x82\x01\x2c\xa0\x1a\x30\x18\x06\x0a\x2b\x06\x01\x04\x01\x82\x37\x02\x02\x1e\x06\x0a\x2b\x06\x01\x04\x01\x82\x37\x02\x02\x0a\xa2\x82\x01\x0c\x04\x82\x01\x08\x4e\x45\x47\x4f\x45\x58\x54\x53\x01\x00\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x70\x00\x00\x00\x11\x70\xff\xd0\xfa\xf1\x4f\xa2\x6f\x40\x5c\x94\x55\x68\x53\xcf\xa1\x77\x02\x7a\x32\xa9\x62\x78\x0a\x21\xfb\x9e\x2c\x5e\xe9\x78\xeb\xab\xee\x91\xfd\xfc\xda\x0f\xc5\x91\x03\x6e\xf8\xfd\x4c\x08\x00\x00\x00\x00\x00\x00\x00\x00\x60\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x5c\x33\x53\x0d\xea\xf9\x0d\x4d\xb2\xec\x4a\xe3\x78\x6e\xc3\x08\x4e\x45\x47\x4f\x45\x58\x54\x53\x03\x00\x00\x00\x01\x00\x00\x00\x40\x00\x00\x00\x98\x00\x00\x00\x11\x70\xff\xd0\xfa\xf1\x4f\xa2\x6f\x40\x5c\x94\x55\x68\x53\xcf\x5c\x33\x53\x0d\xea\xf9\x0d\x4d\xb2\xec\x4a\xe3\x78\x6e\xc3\x08\x40\x00\x00\x00\x58\x00\x00\x00\x30\x56\xa0\x54\x30\x52\x30\x27\x80\x25\x30\x23\x31\x21\x30\x1f\x06\x03\x55\x04\x03\x13\x18\x54\x6f\x6b\x65\x6e\x20\x53\x69\x67\x6e\x69\x6e\x67\x20\x50\x75\x62\x6c\x69\x63\x20\x4b\x65\x79\x30\x27\x80\x25\x30\x23\x31\x21\x30\x1f\x06\x03\x55\x04\x03\x13\x18\x54\x6f\x6b\x65\x6e\x20\x53\x69\x67\x6e\x69\x6e\x67\x20\x50\x75\x62\x6c\x69\x63\x20\x4b\x65\x79\x01\x00\x26\x00\x00\x00\x00\x00\x01\x00\x20\x00\x01\x00\x09\x33\xe9\xe8\xcb\xf4\x8a\x5c\x61\x4d\x38\x42\xa1\x53\x41\x18\x1b\xeb\x99\x78\x0b\x19\x6f\x5c\xef\xdd\x02\x51\x07\x3b\xc6\xcc\x00\x00\x02\x00\x04\x00\x00\x00\x00\x00\x01\x00\x01\x00\x00\x00\x00\x00\x03\x00\x0a\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x01\x00'
pkt = IP(rawpkt)
# Check layers
assert TCP in pkt
assert NBTSession in pkt
assert pkt[NBTSession].LENGTH == 530
assert SMB2_Header in pkt
assert SMB2_Negotiate_Protocol_Response in pkt
nego_resp = pkt[SMB2_Negotiate_Protocol_Response]
# check field values

assert nego_resp.StructureSize == 0x41
assert str(nego_resp.SecurityMode) == 'Signing Required'
assert nego_resp.DialectRevision == 0x0311
assert nego_resp.NegotiateCount == 0x3
assert str(nego_resp.GUID) == '1cdd6d53-1f30-4244-a5c8-88737a6805e1'
assert nego_resp.Capabilities == 0x2f
assert nego_resp.MaxTransactionSize == 0x00800000
assert nego_resp.MaxReadSize == 0x00800000
assert nego_resp.MaxWriteSize == 0x00800000
assert nego_resp.SecurityBlobOffset == 0x00000080
assert nego_resp.SecurityBlobLength == 320
assert nego_resp.NegotiateContextOffset == 0x1c0
assert bytes(nego_resp.SecurityBlob.innerContextToken.token.mechToken.value) == b"NEGOEXTS\x01\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00p\x00\x00\x00\x11p\xff\xd0\xfa\xf1O\xa2o@\\\x94UhS\xcf\xa1w\x02z2\xa9bx\n!\xfb\x9e,^\xe9x\xeb\xab\xee\x91\xfd\xfc\xda\x0f\xc5\x91\x03n\xf8\xfdL\x08\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\3S\r\xea\xf9\rM\xb2\xecJ\xe3xn\xc3\x08NEGOEXTS\x03\x00\x00\x00\x01\x00\x00\x00@\x00\x00\x00\x98\x00\x00\x00\x11p\xff\xd0\xfa\xf1O\xa2o@\\\x94UhS\xcf\\3S\r\xea\xf9\rM\xb2\xecJ\xe3xn\xc3\x08@\x00\x00\x00X\x00\x00\x000V\xa0T0R0'\x80%0#1!0\x1f\x06\x03U\x04\x03\x13\x18Token Signing Public Key0'\x80%0#1!0\x1f\x06\x03U\x04\x03\x13\x18Token Signing Public Key"
assert len(nego_resp.NegotiateContexts) == 3

= SMB2 Negotiate Context in Response - Type PREAUTH

preauth = nego_resp.NegotiateContexts[0]
assert preauth.ContextType == 0x0001
assert preauth.DataLength == 38
assert preauth.HashAlgorithmCount == 1
assert preauth.SaltLength == 32
assert preauth.Salt == b"\x09\x33\xe9\xe8\xcb\xf4\x8a\x5c\x61\x4d\x38\x42\xa1\x53\x41\x18\x1b\xeb\x99\x78\x0b\x19\x6f\x5c\xef\xdd\x02\x51\x07\x3b\xc6\xcc"
assert len(preauth.HashAlgorithms) == 1
assert preauth.HashAlgorithms[0] == 0x1

= SMB2 Negotiate Context in Response - Type ENCRYPTION

enc = nego_resp.NegotiateContexts[1]
assert enc.ContextType == 0x0002
assert enc.DataLength == 4
assert enc.CipherCount == 1
assert len(enc.Ciphers) == 1
assert enc.Ciphers[0] == 1

= SMB2 Negotiate Context in Response - Type COMPRESSION

comp = nego_resp.NegotiateContexts[2]
assert comp.ContextType == 0x0003
assert comp.DataLength  == 10
assert comp.CompressionAlgorithmCount == 1
assert len(comp.CompressionAlgorithms) == 1
assert comp.CompressionAlgorithms[0] == 1

= SMB2 Negotiate Protocol Response Header assembling

pkt = IP() / TCP() / NBTSession() / SMB2_Header() / SMB2_Negotiate_Protocol_Response()
pkt = IP(raw(pkt))
assert SMB2_Negotiate_Protocol_Response in pkt

= Response with dialect different from 0x0311

preauth = SMB2_Preauth_Integrity_Capabilities()
preauth_context = SMB2_Negotiate_Context(ContextType = 1, DataLength = len(preauth)) / preauth

pkt = SMB2_Negotiate_Protocol_Response(DialectRevision=0x0202, NegotiateContexts=[preauth_context])
assert pkt.__class__(raw(pkt)).NegotiateContexts is None

+ SMB2 Negotiate Procotol Request Header with 1 dialect

= Common fields in header

# OK test
rawpkt = b'\x45\x00\x01\x10\x16\x2c\x40\x00\x37\x06\xc4\x14\x91\xdc\x18\x13\xc0\xa8\xfe\x07\x9d\x76\x01\xbd\x37\x06\x5e\x82\xa3\xca\x83\xd2\x50\x18\x01\xf6\x11\x5b\x00\x00\x00\x00\x00\xe4\xfe\x53\x4d\x42\x40\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x22\x33\x44\x55\x66\x77\x88\x99\xaa\xbb\xcc\xdd\xee\xff\x24\x00\x01\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x59\x9e\x84\xf1\x9d\x61\xce\x99\x1f\x50\x5c\x04\x44\x74\xb1\x0a\x68\x00\x00\x00\x04\x00\x00\x00\x11\x03\x00\x00\x01\x00\x26\x00\x00\x00\x00\x00\x01\x00\x20\x00\x01\x00\x75\x06\x05\xed\x60\x88\x9e\xcb\x5e\x79\xbb\xe8\x44\x59\xc5\x5c\xd2\x82\x51\x06\x32\x7a\x6e\x2e\x41\xc5\xa8\x3f\xdd\xf2\xc5\x18\x00\x00\x02\x00\x06\x00\x00\x00\x00\x00\x02\x00\x01\x00\x02\x00\x00\x00\x03\x00\x10\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x1c\x00\x00\x00\x00\x00\x31\x00\x39\x00\x32\x00\x2e\x00\x31\x00\x36\x00\x38\x00\x2e\x00\x31\x00\x37\x00\x38\x00\x2e\x00\x32\x00\x31\x00'
pkt = IP(rawpkt)
# Check layers
assert TCP in pkt
assert NBTSession in pkt
assert pkt[NBTSession].LENGTH == 228
assert SMB2_Header in pkt
assert SMB2_Negotiate_Protocol_Request in pkt
nego_req = pkt[SMB2_Negotiate_Protocol_Request]
# Check field values
assert nego_req.StructureSize == 0x24
assert nego_req.DialectCount == 1
assert nego_req.SecurityMode == 0
assert nego_req.Capabilities == 0x7f
assert str(nego_req.ClientGUID) == 'f1849e59-619d-99ce-1f50-5c044474b10a'
assert nego_req.NegotiateContextOffset == 0x68
assert nego_req.NegotiateCount == 4
for dialect in nego_req.Dialects:
    assert dialect in SMB_DIALECTS.keys()

# Check SMB 3.1.1
assert 0x311 in nego_req.Dialects
assert len(nego_req.NegotiateContexts) == nego_req.NegotiateCount

= SMB2 Negotiate Context in Request - type PREAUTH - disassemble

preauth = nego_req.NegotiateContexts[0]
assert preauth.ContextType == 0x1
assert preauth.DataLength == 38
assert preauth.HashAlgorithmCount == 1
assert preauth.SaltLength == 32
assert preauth.Salt == b'\x75\x06\x05\xed\x60\x88\x9e\xcb\x5e\x79\xbb\xe8\x44\x59\xc5\x5c\xd2\x82\x51\x06\x32\x7a\x6e\x2e\x41\xc5\xa8\x3f\xdd\xf2\xc5\x18'
assert len(preauth.HashAlgorithms) == 1
assert preauth.HashAlgorithms[0] == 0x1

= SMB2 Negotiate Context in Request - type ENCRYPTION disassemble

enc = nego_req.NegotiateContexts[1]
assert enc.ContextType == 0x2
assert enc.DataLength == 6
assert enc.CipherCount == 2
assert len(enc.Ciphers) == 2
assert enc.Ciphers[0] == 1
assert enc.Ciphers[1] == 2


= SMB2 Negotiate Context in Request - type COMPRESSION

comp = nego_req.NegotiateContexts[2]
assert comp.ContextType == 0x3
assert comp.DataLength == 16
assert comp.CompressionAlgorithmCount == 4
assert len(comp.CompressionAlgorithms) == 4
assert comp.CompressionAlgorithms[0] == 1
assert comp.CompressionAlgorithms[1] == 2
assert comp.CompressionAlgorithms[2] == 3
assert comp.CompressionAlgorithms[3] == 4


= SMB2 Negotiate Context in Request - type NETNAME NEGOCIATE

netname = nego_req.NegotiateContexts[3]
assert netname.ContextType == 0x5
assert netname.DataLength == 28
assert netname.NetName == '192.168.178.21'

+ SMB2 Negotiate Protocol Request Header default values

= Default DialectCount

pkt = SMB2_Negotiate_Protocol_Request()
assert len(pkt.Dialects) == pkt.__class__(raw(pkt)).DialectCount

= Default NegotiateCount

preauth = SMB2_Preauth_Integrity_Capabilities()
preauth_context = SMB2_Negotiate_Context(ContextType = 1, DataLength = len(preauth)) / preauth

pkt = SMB2_Negotiate_Protocol_Request(Dialects=[0x0311], NegotiateContexts=[preauth_context], NegotiateContextOffset=0x68)
assert len(pkt.NegotiateContexts) == pkt.__class__(raw(pkt)).NegotiateCount

+ Negotiate Request without manual padding of Negotiate Contexts

= SMB2 Negotiate Context in Request - type PREAUTH - disassemble

preauth = SMB2_Preauth_Integrity_Capabilities()
preauth_context = SMB2_Negotiate_Context(ContextType = 1, DataLength = len(preauth)) / preauth

enc = SMB2_Encryption_Capabilities()
enc_context = SMB2_Negotiate_Context(ContextType = 2, DataLength = len(enc)) / enc

comp = SMB2_Compression_Capabilities()
comp_context = SMB2_Negotiate_Context(ContextType = 3, DataLength = len(comp)) / comp

netname = SMB2_Netname_Negotiate_Context_ID("192.168.178.21".encode("utf-16le"))
netname_context = SMB2_Negotiate_Context(ContextType = 5, DataLength = len(netname)) / netname

pkt = SMB2_Header() / SMB2_Negotiate_Protocol_Request(Dialects=[0x0311], NegotiateContexts=[preauth_context, enc_context, comp_context, netname_context], NegotiateContextOffset=0x68)

pkt = SMB2_Header(raw(pkt))

nego_req = pkt[SMB2_Negotiate_Protocol_Request]

preauth_dissected = nego_req.NegotiateContexts[0]
assert preauth_dissected.ContextType == preauth_context.ContextType
assert preauth_dissected.DataLength == preauth_context.DataLength
assert preauth_dissected.HashAlgorithmCount == preauth_context.HashAlgorithmCount
assert preauth_dissected.SaltLength == preauth_context.SaltLength
assert len(preauth_dissected.HashAlgorithms) == len(preauth_context.HashAlgorithms)
assert preauth_dissected.HashAlgorithms[0] == preauth_context.HashAlgorithms[0]

= SMB2 Negotiate Context in Request - type ENCRYPTION disassemble

enc_dissected = nego_req.NegotiateContexts[1]
assert enc_dissected.ContextType == enc_context.ContextType
assert enc_dissected.DataLength == enc_context.DataLength
assert enc_dissected.CipherCount == enc_context.CipherCount
assert len(enc_dissected.Ciphers) == len(enc_context.Ciphers)
assert enc_dissected.Ciphers[0] == enc_context.Ciphers[0]

= SMB2 Negotiate Context in Request - type COMPRESSION

comp_dissected = nego_req.NegotiateContexts[2]
assert comp_dissected.ContextType == comp_context.ContextType
assert comp_dissected.DataLength == comp_context.DataLength
assert comp_dissected.CompressionAlgorithmCount == comp_context.CompressionAlgorithmCount
assert len(comp_dissected.CompressionAlgorithms) == len(comp_context.CompressionAlgorithms)

= SMB2 Negotiate Context in Request - type NETNAME NEGOCIATE

netname_dissected = nego_req.NegotiateContexts[3]
assert netname_dissected.ContextType == netname_context.ContextType
assert netname_dissected.DataLength == netname_context.DataLength
assert netname_dissected.NetName == netname_context.NetName

+ SMB 2 Setup Session

= Setup Session Request

from scapy.layers.ntlm import *

setup_sess = NBTSession(b'\x00\x00\x00\xa2\xfeSMB@\x00\x01\x00\x00\x00\x00\x00\x01\x00!\x00\x10\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00X\x00J\x00\x00\x00\x00\x00\x00\x00\x00\x00`H\x06\x06+\x06\x01\x05\x05\x02\xa0>0<\xa0\x0e0\x0c\x06\n+\x06\x01\x04\x01\x827\x02\x02\n\xa2*\x04(NTLMSSP\x00\x01\x00\x00\x00\x97\x82\x08\xe2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\x00aJ\x00\x00\x00\x0f')
assert isinstance(setup_sess.Buffer[0][1].innerContextToken.token.mechToken.value, NTLM_NEGOTIATE)
assert setup_sess.Buffer[0][1].innerContextToken.token.mechToken.value.ProductBuild == 19041

= Setup Session Response

from scapy.layers.ntlm import *

setup_sess = NBTSession(b'\x00\x00\x00\xe7\xfeSMB@\x00\x01\x00\x16\x00\x00\xc0\x01\x00\x01\x00\x11\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\xff\xfe\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00H\x00\x9f\x00\xa1\x81\x9c0\x81\x99\xa0\x03\n\x01\x01\xa1\x0c\x06\n+\x06\x01\x04\x01\x827\x02\x02\n\xa2\x81\x83\x04\x81\x80NTLMSSP\x00\x02\x00\x00\x00\x08\x00\x08\x008\x00\x00\x00\x15\x82\x8a\xe2\xe0\x14\xe7\xbf\xfd@\x01+\x00\x00\x00\x00\x00\x00\x00\x00@\x00@\x00@\x00\x00\x00\n\x00aJ\x00\x00\x00\x0fW\x00I\x00N\x001\x00\x02\x00\x08\x00W\x00I\x00N\x001\x00\x01\x00\x08\x00W\x00I\x00N\x001\x00\x04\x00\x08\x00W\x00I\x00N\x001\x00\x03\x00\x08\x00W\x00I\x00N\x001\x00\x07\x00\x08\x00\xef\x1f\x0e\tE\xe6\xd7\x01\x00\x00\x00\x00')
assert isinstance(setup_sess.Buffer[0][1].token.responseToken.value, NTLM_CHALLENGE)
assert setup_sess.Buffer[0][1].token.responseToken.value
assert setup_sess.Buffer[0][1].token.responseToken.value.Payload[0] == ('TargetName', 'WIN1')
assert setup_sess.Buffer[0][1].token.responseToken.value.Payload[1][1][-1].AvId == 0


= SMB2 IOCTL Request

ioctl_req = Ether(b'RT\x00<?\x1cRT\x00\x0cG\xab\x08\x00E\x00\x00\xc6\x88\x1f@\x00\x80\x06\xfc\xb9\xc0\xa8z\x06\xc0\xa8z\x01\xc2\xb3\x01\xbd\x04)\xc4a\t\xda\x92\xdbP\x18 \x12o\xb3\x00\x00\x00\x00\x00\x9a\xfeSMB@\x00\x01\x00\x00\x00\x00\x00\x0b\x00!\x00\x08\x00\x00\x00\x00\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00\xff\xfe\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd8a\x1c\xc86\x0f\xc4\xec\x98$\x08\x038\xe6\x82\x039\x00\x00\x00\x04\x02\x14\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffx\x00\x00\x00"\x00\x00\x00\x00\x00\x00\x00x\x00\x00\x00\x00\x00\x00\x00\x18\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x9b\x9c\xaa3\xf0\xe6\xec\x11\x8c\x12RT\x00\x0cG\xab\x01\x00\x05\x00\x02\x02\x10\x02\x00\x03\x02\x03\x11\x03')
assert ioctl_req.CtlCode == 1311236
assert ioctl_req.InputBufferOffset == 120
assert ioctl_req.InputLen == 34
validate_neg = ioctl_req.Buffer[0][1]
assert isinstance(validate_neg, SMB2_IOCTL_Validate_Negotiate_Info_Request)
assert validate_neg.SecurityMode.SMB2_NEGOTIATE_SIGNING_ENABLED
assert validate_neg.Dialects == [514, 528, 768, 770, 785]

c = ioctl_req.copy()
c.InputLen = None
c.InputBufferOffset = None
c = Ether(raw(c))
assert c.InputBufferOffset == 120
assert c.InputLen == 34
assert len(c.Buffer[0][1]) == 34

= SMB2 Create Request with Contexts

sess_create_context = NBTSession(b'\x00\x00\x01D\xfeSMB@\x00\x01\x00\x00\x00\x00\x00\x05\x00\x00\x000\x00\x00\x00\x00\x00\x00\x00\x80\xcd\t\x00\x00\x00\x00\x00\xff\xfe\x00\x00\x9bk>\xb6[=\x16\xb4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x009\x00\x00\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x89\x00\x12\x00\x00\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00d\x00\x00\x00x\x00\x16\x00\x90\x00\x00\x00\xb4\x00\x00\x00d\x00e\x00s\x00k\x00t\x00o\x00p\x00.\x00i\x00n\x00i\x00\x00\x008\x00\x00\x00\x10\x00\x04\x00\x00\x00\x18\x00 \x00\x00\x00DH2Q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\x1d\xb3\xc8\xfa\r\xed\x11\xb7R\x808\xfb\xd6\xa0~\x18\x00\x00\x00\x10\x00\x04\x00\x00\x00\x18\x00\x00\x00\x00\x00MxAc\x00\x00\x00\x00\x18\x00\x00\x00\x10\x00\x04\x00\x00\x00\x18\x00\x00\x00\x00\x00QFid\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x04\x00\x00\x00\x18\x004\x00\x00\x00RqLs\x00\x00\x00\x00\xc8\x9bA\xdb\x8e\xd1\x19\xf4\\;\x846;\xf6\xca\xe0\x07\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
assert sess_create_context.Name == "desktop.ini"
assert isinstance(sess_create_context.CreateContexts[0].Data, SMB2_CREATE_DURABLE_HANDLE_REQUEST_V2)
assert sess_create_context.CreateContexts[1].Name == b"MxAc"
assert sess_create_context.CreateContexts[2].Name == b"QFid"
assert isinstance(sess_create_context.CreateContexts[3].Data, SMB2_CREATE_REQUEST_LEASE_V2)

sess_create_context_response = NBTSession(b"\x00\x00\x00\xf0\xfeSMB@\x00\x01\x00\x00\x00\x00\x00\x05\x00\x01\x001\x00\x00\x00\x00\x00\x00\x00\x7f\xcd\t\x00\x00\x00\x00\x00\xff\xfe\x00\x00\x9bk>\xb6[=\x16\xb4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Y\x00\x00\x00\x01\x00\x00\x00\x9d\x89JH\xbe\xa1\xd8\x01\x9d\x89JH\xbe\xa1\xd8\x01{\x0f$W\x06\xa2\xd8\x01{\x0f$W\x06\xa2\xd8\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00\x00\x00\x13\x17\xe8L\x00\x00\x00\x00'\x1aT\xad\x00\x00\x00\x00\x98\x00\x00\x00X\x00\x00\x00 \x00\x00\x00\x10\x00\x04\x00\x00\x00\x18\x00\x08\x00\x00\x00MxAc\x00\x00\x00\x00\x00\x00\x00\x00\xff\x01\x1f\x00\x00\x00\x00\x00\x10\x00\x04\x00\x00\x00\x18\x00 \x00\x00\x00QFid\x00\x00\x00\x00\x01\x00$\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00")
assert sess_create_context_response.CreateContexts[0].Data.QueryStatus == 0
assert sess_create_context_response.CreateContexts[1].Data.DiskFileId == 2359297
assert sess_create_context_response.CreateContexts[1].Data.Reserved == b'\x00' * 16

