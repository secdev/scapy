% Regression tests for the PFLog layer

# More information at http://www.secdev.org/projects/UTscapy/


############
############

+ Multiple operations of PFLog packets dissections

= Load module

load_layer("pflog")
from io import BytesIO

= Dissect PFLog packet of a IP()/TCP() dropped packet

pcap_pflog_tcp = BytesIO(b'\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00u\x00\x00\x00\x89*\xce_}\xcf\x07\x00\xa4\x00\x00\x00\xa4\x00\x00\x00d\x02\x01\x00vio0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x86\x01\x00\x00\x00\x00\x00\x84S\x01\x00\x01\x00\x02\x00\n\xc8\xc8\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\xc8\xc8\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa3\xbd\x00\x17E\x00\x00@c\xae@\x00@\x06/\xe1\n\xc8\xc8\xfe\n\xc8\xc8\x9a\xa3\xbd\x00\x17\xc8\xc9\xd9\xf2\x00\x00\x00\x00\xb0\x02@\x00.l\x00\x00\x02\x04\x05\xb4\x01\x01\x04\x02\x01\x03\x03\x06\x01\x01\x08\n\x86\xb8S\x1c\x00\x00\x00\x00')
pflog_tcp_packets = rdpcap(pcap_pflog_tcp)
# PFLog Layer
assert pflog_tcp_packets[0][PFLog].hdrlen == 100
assert pflog_tcp_packets[0][PFLog].addrfamily == 2 # IPv4
assert pflog_tcp_packets[0][PFLog].action == 1 # drop
assert pflog_tcp_packets[0][PFLog].saddr == '10.200.200.254'
assert pflog_tcp_packets[0][PFLog].daddr == '10.200.200.154'
# IP Layer
assert pflog_tcp_packets[0][IP].proto == 6
assert pflog_tcp_packets[0][IP].src == '10.200.200.254'
assert pflog_tcp_packets[0][IP].dst == '10.200.200.154'
# TCP Layer
assert pflog_tcp_packets[0][TCP].dport == 23

= Dissect PFLog packet of a IP()/UDP() dropped packet

pcap_pflog_udp = BytesIO(b'\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00u\x00\x00\x00O*\xce_?\x1d\x05\x00\x82\x00\x00\x00\x82\x00\x00\x00d\x02\x01\x00vio0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x86\x01\x00\x00\x00\x00\x00{\xdb\x00\x00\x01\x00\x02\x00\n\xc8\xc8\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\xc8\xc8\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa9\x0b\x00\x17E\x00\x00\x1e\xdd\x1c\x00\x00@\x11\xf6\x89\n\xc8\xc8\xfe\n\xc8\xc8\x9a\xa9\x0b\x00\x17\x00\nN\x84')
pflog_udp_packets = rdpcap(pcap_pflog_udp)
# PFLog Layer
assert pflog_udp_packets[0][PFLog].hdrlen == 100
assert pflog_udp_packets[0][PFLog].addrfamily == 2 # IPv4
assert pflog_udp_packets[0][PFLog].action == 1 # drop
assert pflog_udp_packets[0][PFLog].saddr == '10.200.200.254'
assert pflog_udp_packets[0][PFLog].daddr == '10.200.200.154'
# IP Layer
assert pflog_udp_packets[0][IP].proto == 17
assert pflog_udp_packets[0][IP].src ==  '10.200.200.254'
assert pflog_udp_packets[0][IP].dst ==  '10.200.200.154'
# UDP Layer
assert pflog_udp_packets[0][UDP].dport == 23

= Dissect PFLog packet of a IP()/ICMP() echo-request dropped packet

pcap_pflog_icmp = BytesIO(b'\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00u\x00\x00\x00\x8d*\xce_\x16[\x0c\x00\xb8\x00\x00\x00\xb8\x00\x00\x00d\x02\x01\x00vio0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x86\x01\x00\x00\x00\x00\x00\x84S\x01\x00\x01\x00\x02\x00\n\xc8\xc8\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\xc8\xc8\x9a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16K\x00\x08E\x00\x00T.\x88\x00\x00\xff\x01\xe5\xf7\n\xc8\xc8\xfe\n\xc8\xc8\x9a\x08\x00\xabD\x16K\x00\x00')
pflog_icmp_packets = rdpcap(pcap_pflog_icmp)
# PFLog Layer
assert pflog_icmp_packets[0][PFLog].hdrlen == 100
assert pflog_icmp_packets[0][PFLog].addrfamily == 2 # IPv4
assert pflog_icmp_packets[0][PFLog].action == 1 # drop
assert pflog_icmp_packets[0][PFLog].saddr == '10.200.200.254'
assert pflog_icmp_packets[0][PFLog].daddr == '10.200.200.154'
# IP Layer
assert pflog_icmp_packets[0][IP].proto == 1
assert pflog_icmp_packets[0][IP].src ==  '10.200.200.254'
assert pflog_icmp_packets[0][IP].dst ==  '10.200.200.154'
# ICMP Layer
assert pflog_icmp_packets[0][ICMP].type == 8 and pflog_icmp_packets[0][ICMP].code == 0

= Dissect PFLog packet of a IPv6()/TCP() dropped packet

pcap_pflog_tcp_ipv6_drop = BytesIO(b'\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00u\x00\x00\x00\x9dA\xce_\x98P\x08\x00\xb8\x00\x00\x00\xb8\x00\x00\x00d\x18\x01\x00vlan3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x86\x01\x00\x00\x00\x00\x00\xd9\x08\x00\x00\x01\x00\x18\x00\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x04\xe9\x00\x17`\n\xb8\x13\x00,\x06@\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x04\xe9\x00\x17\xd6\xc3:\xd6\x00\x00\x00\x00\xb0\x02@\x00\xf7\xeb\x00\x00\x02\x04\x05\xa0\x01\x01\x04\x02\x01\x03\x03\x06\x01\x01\x08\nS\xd6,P\x00\x00\x00\x00')
pflog_tcp_ipv6_drop_packets = rdpcap(pcap_pflog_tcp_ipv6_drop)
# PFLog Layer
assert pflog_tcp_ipv6_drop_packets[0][PFLog].hdrlen == 100
assert pflog_tcp_ipv6_drop_packets[0][PFLog].addrfamily == 24 # IPv6
assert pflog_tcp_ipv6_drop_packets[0][PFLog].action == 1
assert pflog_tcp_ipv6_drop_packets[0][PFLog].saddr == '1111:1111:1111::1'
assert pflog_tcp_ipv6_drop_packets[0][PFLog].daddr == '1111:1111:1111::fc'
# IP Layer
assert pflog_tcp_ipv6_drop_packets[0][IPv6].nh == 6
assert pflog_tcp_ipv6_drop_packets[0][IPv6].src == '1111:1111:1111::1'
assert pflog_tcp_ipv6_drop_packets[0][IPv6].dst == '1111:1111:1111::fc'
# TCP Layer
assert pflog_tcp_ipv6_drop_packets[0][TCP].dport == 23

= Dissect PFLog packet of a IPv6()/TCP() passed packet

pcap_pflog_tcp_ipv6_pass = BytesIO(b'\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00u\x00\x00\x00$B\xce_\x8e\xc1\x01\x00\xb8\x00\x00\x00\xb8\x00\x00\x00d\x18\x00\x00vlan3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x86\x01\x00\x00\x00\x00\x00\xa4\x85\x00\x00\x01\x00\x18\x00\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfczw\x00\x16`\x02\x82\x85\x00,\x06@\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfczw\x00\x16\xa3\x9d\x059\x00\x00\x00\x00\xb0\x02@\x00\xd9\xf1\x00\x00\x02\x04\x05\xa0\x01\x01\x04\x02\x01\x03\x03\x06\x01\x01\x08\nu[\x1b\xfb\x00\x00\x00\x00')
pflog_tcp_ipv6_pass_packets = rdpcap(pcap_pflog_tcp_ipv6_pass)
# PFLog Layer
assert pflog_tcp_ipv6_pass_packets[0][PFLog].hdrlen == 100
assert pflog_tcp_ipv6_pass_packets[0][PFLog].addrfamily == 24 # IPv6
assert pflog_tcp_ipv6_pass_packets[0][PFLog].action == 0
assert pflog_tcp_ipv6_pass_packets[0][PFLog].saddr == '1111:1111:1111::1'
assert pflog_tcp_ipv6_pass_packets[0][PFLog].daddr == '1111:1111:1111::fc'
# IP Layer
assert pflog_tcp_ipv6_pass_packets[0][IPv6].nh == 6
assert pflog_tcp_ipv6_pass_packets[0][IPv6].src == '1111:1111:1111::1'
assert pflog_tcp_ipv6_pass_packets[0][IPv6].dst == '1111:1111:1111::fc'
# TCP Layer
assert pflog_tcp_ipv6_pass_packets[0][TCP].dport == 22

= Dissect PFLog packet of a IPv6()/UDP() dropped packet

pcap_pflog_udp_ipv6_drop = BytesIO(b'\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00u\x00\x00\x00\xccA\xce_\xf8\x10\x03\x00\x95\x00\x00\x00\x95\x00\x00\x00d\x18\x01\x00vlan3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x86\x01\x00\x00\x00\x00\x00\xd9\x08\x00\x00\x01\x00\x18\x00\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc[U\x00\x16`\x0f\x1b\x84\x00\t\x11@\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc[U\x00\x16\x00\t\xe4\xeeX')
pflog_udp_ipv6_drop_packets = rdpcap(pcap_pflog_udp_ipv6_drop)
# PFLog Layer
assert pflog_udp_ipv6_drop_packets[0][PFLog].hdrlen == 100
assert pflog_udp_ipv6_drop_packets[0][PFLog].addrfamily == 24 # IPv6
assert pflog_udp_ipv6_drop_packets[0][PFLog].action == 1
assert pflog_udp_ipv6_drop_packets[0][PFLog].saddr == '1111:1111:1111::1'
assert pflog_udp_ipv6_drop_packets[0][PFLog].daddr == '1111:1111:1111::fc'
# IP Layer
assert pflog_udp_ipv6_drop_packets[0][IPv6].nh == 17
assert pflog_udp_ipv6_drop_packets[0][IPv6].src == '1111:1111:1111::1'
assert pflog_udp_ipv6_drop_packets[0][IPv6].dst == '1111:1111:1111::fc'
# UDP Layer
assert pflog_udp_ipv6_drop_packets[0][UDP].dport == 22

= Dissect PFLog packet of a IPv6()/ICMP6() dropped packet

pcap_pflog_icmp6_drop = BytesIO(b'\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00u\x00\x00\x005A\xce_\xa5\x06\x05\x00\xac\x00\x00\x00\xac\x00\x00\x00d\x18\x01\x00vlan3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x86\x01\x00\x00\x00\x00\x00\x89\xa0\x00\x00\x01\x00\x18\x00\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x00\x00\xfc\x11\xed\x00\x87`\x00\x00\x00\x00 :\xff\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xff\x00\x00\xfc\x87\x00\xf0\xf2\x00\x00\x00\x00\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x01\x01RT\x00]\xcd\x9b')
pflog_icmp6_drop_packets = rdpcap(pcap_pflog_icmp6_drop)
# PFLog Layer
assert pflog_icmp6_drop_packets[0][PFLog].hdrlen == 100
assert pflog_icmp6_drop_packets[0][PFLog].addrfamily == 24 # IPv6
assert pflog_icmp6_drop_packets[0][PFLog].action == 1
assert pflog_icmp6_drop_packets[0][PFLog].saddr == '1111:1111:1111::1'
assert pflog_icmp6_drop_packets[0][PFLog].daddr == 'ff02::1:ff00:fc'
# IP Layer
assert pflog_icmp6_drop_packets[0][IPv6].nh == 58
assert pflog_icmp6_drop_packets[0][IPv6].src == '1111:1111:1111::1'
assert pflog_icmp6_drop_packets[0][IPv6].dst == 'ff02::1:ff00:fc'
# ICMP6 Layer
assert pflog_icmp6_drop_packets[0][ICMPv6ND_NS].type == 135 and pflog_icmp6_drop_packets[0][ICMPv6ND_NS].code == 0
assert pflog_icmp6_drop_packets[0][ICMPv6ND_NS].tgt == '1111:1111:1111::fc'

= Dissect PFLog packet of a IPv6()/ICMP6() passed packet

pcap_pflog_icmp6_pass = BytesIO(b'\xd4\xc3\xb2\xa1\x02\x00\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00u\x00\x00\x00 B\xce_\xf4\x05\x05\x00\xac\x00\x00\x00\xac\x00\x00\x00d\x18\x00\x00vlan3\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\xff\xff\xff\xff\xff\xff\xff\xff\xa0\x86\x01\x00\x00\x00\x00\x00\xa4\x85\x00\x00\x01\x00\x18\x00\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x11\xed\x00\x87`\x00\x00\x00\x00 :\xff\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x87\x00\xbb\xc4\x00\x00\x00\x00\x11\x11\x11\x11\x11\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\xfc\x01\x01RT\x00]\xcd\x9b')
pflog_icmp6_pass_packets = rdpcap(pcap_pflog_icmp6_pass)
# PFLog Layer
assert pflog_icmp6_pass_packets[0][PFLog].hdrlen == 100
assert pflog_icmp6_pass_packets[0][PFLog].addrfamily == 24 # IPv6
assert pflog_icmp6_pass_packets[0][PFLog].action == 0
assert pflog_icmp6_pass_packets[0][PFLog].saddr == '1111:1111:1111::1'
assert pflog_icmp6_pass_packets[0][PFLog].daddr == '1111:1111:1111::fc'
# IP Layer
assert pflog_icmp6_pass_packets[0][IPv6].nh == 58
assert pflog_icmp6_pass_packets[0][IPv6].src == '1111:1111:1111::1'
assert pflog_icmp6_pass_packets[0][IPv6].dst == '1111:1111:1111::fc'
# ICMP6 Layer
assert pflog_icmp6_pass_packets[0][ICMPv6ND_NS].type == 135 and pflog_icmp6_pass_packets[0][ICMPv6ND_NS].code == 0
assert pflog_icmp6_pass_packets[0][ICMPv6ND_NS].tgt == '1111:1111:1111::fc'
