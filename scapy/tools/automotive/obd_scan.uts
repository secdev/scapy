% Regression tests for obd_scan
~ python3_only

# More information at http://www.secdev.org/projects/UTscapy/


############
############
+ Load general modules
= Load contribution layer

load_contrib('automotive.obd.obd')

+ Configuration of CAN virtual sockets
~ conf command linux

= Load module

conf.contribs['ISOTP'] = {'use-can-isotp-kernel-module': True}
load_contrib('isotp')

= Load os

import os

= Setup vcan0
~ needs_root

bashCommand = "/bin/bash -c 'sudo modprobe vcan; sudo ip link add name vcan0 type vcan; sudo ip link set dev vcan0 up'"
0 == os.system(bashCommand)

+ Load OBD scan
= imports

import queue
from threading import Event

from automotive.obd_scan import obd_scan
from automotive.obd_scan import _supported_id_numbers

= Create answers

s1_pid00 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID00(supported_pids="PID03+PID0B+PID0F")])
s1_pid03 = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID03(fuel_system1=0, fuel_system2=2)])
s1_pid0B = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID0B(data=100)])
s1_pid0F = OBD()/OBD_S01_PR(data_records=[OBD_S01_PR_Record()/OBD_PID0F(data=50)])
s1_queue = queue.Queue()
s1_queue.put(s1_pid00)
s1_queue.put(s1_pid00)
s1_queue.put(s1_pid0F)
s1_queue.put(s1_pid0B)
s1_queue.put(s1_pid03)

s3 = OBD()/OBD_S03_PR(dtcs=[OBD_DTC()])
s3_queue = queue.Queue()
s3_queue.put(s3)

+ Simulate scanner
~ linux needs_root

= Create socket

socket = ISOTPSocket("vcan0", 0x7e0, 0x7e8, basecls=OBD, padding=True)

= Create responder
# Ensures the responder is running before sending the first request
ready = Event()

class MockResponder(Thread):
    def __init__(self):
        Thread.__init__(self)
        self._stopped = Event()
    def process_request(self, req, sock):
        if req.service == 1:
            resp = s1_queue.get()
            sock.send(resp)
        elif req.service == 3:
            resp = s3_queue.get()
            sock.send(resp)
    def run(self):
        with ISOTPSocket("vcan0", 0x7e8, 0x7e0, basecls=OBD, padding=True) as sock:
            ready.set()
            while not self._stopped.is_set() or not s1_queue.empty() or not s3_queue.empty():
                sniff(opened_socket=sock,
                               timeout=0.2,
                               store=False,
                               prn=lambda p: self.process_request(p, sock))
    def stop(self):
        self._stopped.set()

responder = MockResponder()
responder.start()

= Get ids
all_ids_set = set(range(1, 256))
supported_ids = _supported_id_numbers(socket, 0.1, OBD_S01, 'pid')
unsupported_ids = all_ids_set - supported_ids

= Run scanner
# timeout to avoid a deadlock if the test which sets this event fails
ready.wait(timeout=5)
data = obd_scan(socket, 0.1, True, False)
dtc = data[0]
supported = data[1]
unsupported = data[2]

= Cleanup
socket.close()
responder.stop()

+ Check results
~ linux needs_root

= Check supported ids
supported_ids_set = set([3, 11, 15])
unsupported_ids_set = all_ids_set - supported_ids_set
assert supported_ids == supported_ids_set
assert unsupported_ids == unsupported_ids_set

= Check service 1
assert len(supported[1]) == 3

= Check service 3
assert dtc[3] == bytes(s3)

= Check empty services
assert len(supported[6]) == 0
assert len(supported[8]) == 0
assert len(supported[9]) == 0
assert dtc[7] == None
assert dtc[10] == None

# = Check unsupported services
# assert unsupported[1][0x01] == bytes(s1_pid01)
