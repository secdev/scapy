% Regression tests for the OBD layer

# More information at http://www.secdev.org/projects/UTscapy/


############
############

+ Basic operations

= Load module

load_contrib("automotive.obd.obd")


= Check if positive response answers

req = OBD(b'\x01\x2f')
res = OBD(b'\x41\x2f\x1a')
assert res.answers(req)


= Check hashret

assert req.hashret() == res.hashret()


= Check dissecting a request for Service 01 Pid 00

p = OBD(b'\x01\x00')
assert p.service == 0x01
assert p.pid[0] == 0x00


= Check dissecting a request for Service 01 Pid 75

p = OBD(b'\x01\x75')
assert p.service == 0x01
assert p.pid[0] == 0x75


= Check dissecting a request for Service 01 Pid 78


p = OBD(b'\x01\x78')
assert p.service == 0x01
assert p.pid[0] == 0x78


= Check dissecting a request for Service 01 Pid 7F

p = OBD(b'\x01\x7F')
assert p.service == 0x01
assert p.pid[0] == 0x7F


= Check dissecting a request for Service 01 Pid 89

p = OBD(b'\x01\x89')
assert p.service == 0x01
assert p.pid[0] == 0x89


= Check dissecting a request for Service 02 Pid 00

p = OBD(b'\x02\x00\x01')
assert p.service == 0x02
assert p.requests[0].pid == 0x00
assert p.requests[0].frameNo == 0x01


= Check dissecting a request for Service 02 Pid 75

p = OBD(b'\x02\x75\x01')
assert p.service == 0x02
assert p.requests[0].pid == 0x75
assert p.requests[0].frameNo == 0x01


= Check dissecting a request for Service 02 Pid 78

p = OBD(b'\x02\x78\x01')
assert p.service == 0x02
assert p.requests[0].pid == 0x78
assert p.requests[0].frameNo == 0x01


= Check dissecting a request for Service 02 Pid 7F

p = OBD(b'\x02\x7F\x01')
assert p.service == 0x02
assert p.requests[0].pid == 0x7F
assert p.requests[0].frameNo == 0x01


= Check dissecting a request for Service 02 Pid 89

p = OBD(b'\x02\x89\x01')
assert p.service == 0x02
assert p.requests[0].pid == 0x89
assert p.requests[0].frameNo == 0x01


= Check dissecting a request for Service 03

p = OBD(b'\x03')
assert p.service == 0x03


= Check dissecting a request for Service 06

p = OBD(b'\x06\x01')
assert p.service == 0x06
assert p.mid[0] == 0x01


= Check dissecting a request for Service 06 MID 00

p = OBD(b'\x06\x00')
assert p.service == 0x06
assert p.mid[0] == 0x00


= Check dissecting a request for Service 06 MID 00,01,02,03,04

p = OBD(b'\x06\x00\x01\x02\x03\x04')
assert p.service == 0x06
assert p.mid[0] == 0x00
assert p.mid[1] == 0x01
assert p.mid[2] == 0x02
assert p.mid[3] == 0x03
assert p.mid[4] == 0x04


= Check dissecting a response for Service 06 MID 00

p = OBD(b'\x46\x00\x00\x00\x00\x00')
assert p.service == 0x46
assert p.data_records[0].mid == 0x00
assert p.data_records[0].supportedMIDs == ""


= Check dissecting a response for Service 06 MID 00 and MID 20

p = OBD(b'\x46\x00\x01\x02\x03\x04\x20\x01\x02\x03\x04')
assert p.service == 0x46
assert p.data_records[0].mid == 0x00
assert p.data_records[0].supportedMIDs == "MID1E+MID18+MID17+MID0F+MID08"
assert p.data_records[1].mid == 0x20
assert p.data_records[1].supportedMIDs == "MID3E+MID38+MID37+MID2F+MID28"


= Check dissecting a response for Service 06 MID 00, 20, 40, 60, 80, A0

p = OBD(b'\x46\x00\x01\x02\x03\x04\x20\x01\x02\x03\x04\x40\x01\x02\x03\x04\x60\x01\x02\x03\x04\x80\x01\x02\x03\x04\xA0\x01\x02\x03\x04')
assert p.service == 0x46
assert p.data_records[0].mid == 0x00
assert p.data_records[0].supportedMIDs == "MID1E+MID18+MID17+MID0F+MID08"
assert p.data_records[1].mid == 0x20
assert p.data_records[1].supportedMIDs == "MID3E+MID38+MID37+MID2F+MID28"
assert p.data_records[2].mid == 0x40
assert p.data_records[2].supportedMIDs == "MID5E+MID58+MID57+MID4F+MID48"
assert p.data_records[3].mid == 0x60
assert p.data_records[3].supportedMIDs == "MID7E+MID78+MID77+MID6F+MID68"
assert p.data_records[4].mid == 0x80
assert p.data_records[4].supportedMIDs == "MID9E+MID98+MID97+MID8F+MID88"
assert p.data_records[5].mid == 0xA0
assert p.data_records[5].supportedMIDs == "MIDBE+MIDB8+MIDB7+MIDAF+MIDA8"
assert len(p.data_records) == 6


= Check dissecting a response for Service 06 MID 01

p = OBD(b'\x46\x01\x01\x0A\x0B\xB0\x0B\xB0\x0B\xB0\x01\x05\x10\x00\x48\x00\x00\x00\x64\x01\x85\x24\x00\x96\x00\x4B\xFF\xFF')
assert p.service == 0x46
assert p.data_records[0].mid == 0x01
assert p.data_records[0].standardized_test_id == 1
assert p.data_records[0].unit_and_scaling_id == 10
assert p.data_records[0].test_value == 365.024
assert p.data_records[0].min_limit == 365.024
assert p.data_records[0].max_limit == 365.024
assert "Voltage" in p.data_records[0].__repr__()
assert "365.024 mV" in p.data_records[0].__repr__()
assert p.data_records[1].mid == 0x01
assert p.data_records[1].standardized_test_id == 5
assert p.data_records[1].unit_and_scaling_id == 16
assert p.data_records[1].test_value == 72
assert p.data_records[1].min_limit == 0
assert p.data_records[1].max_limit == 100
assert "Time" in p.data_records[1].__repr__()
assert "72 ms" in p.data_records[1].__repr__()
assert p.data_records[2].mid == 0x01
assert p.data_records[2].standardized_test_id == 0x85
assert p.data_records[2].unit_and_scaling_id == 0x24
assert p.data_records[2].test_value == 150
assert p.data_records[2].min_limit == 75
assert p.data_records[2].max_limit == 65535
assert "Counts" in p.data_records[2].__repr__()
assert "150 counts" in p.data_records[2].__repr__()
assert len(p.data_records) == 3


= Check dissecting a response for Service 06 MID 21

p = OBD(b'\x46\x21\x87\x2F\x00\x00\x00\x00\x00\x00')
p.show()
assert p.service == 0x46
assert p.data_records[0].mid == 0x21
assert p.data_records[0].standardized_test_id == 135
assert p.data_records[0].unit_and_scaling_id == 0x2F
assert p.data_records[0].test_value == 0
assert p.data_records[0].min_limit == 0
assert p.data_records[0].max_limit == 0
assert "Percent" in p.data_records[0].__repr__()
assert "0 %" in p.data_records[0].__repr__()
assert len(p.data_records) == 1


= Check dissecting a request for Service 09 Pid 00

p = OBD(b'\x09\x00')
assert p.service == 0x09
assert p.iid == 0x00


= Check dissecting a request for Service 09 Pid 02

p = OBD(b'\x09\x02')
assert p.service == 0x09
assert p.iid == 0x02


= Check dissecting a request for Service 09 Pid 04

p = OBD(b'\x09\x04')
assert p.service == 0x09
assert p.iid == 0x04


= Check dissecting a request for Service 09 Pid 0A

p = OBD(b'\x09\x0A')
assert p.service == 0x09
assert p.iid == 0x0A


= Check dissecting a response for Service 01 Pid 75

p = OBD(b'\x41\x75\xa0\x00\x11\x22\x33\x44\x55')
assert p.service == 0x41
assert p.data_records[0].pid == 0x75
assert p.data_records[0].turbo_a_compressor_inlet_temperature_supported == 1
assert p.data_records[0].turbo_a_compressor_outlet_temperature_supported == 0
assert p.data_records[0].turbo_a_turbine_inlet_temperature_supported == 1
assert p.data_records[0].turbo_a_turbine_outlet_temperature_supported == 0
assert p.data_records[0].reserved == 0
assert p.data_records[0].turbocharger_a_compressor_inlet_temperature == 0x00-40
assert p.data_records[0].turbocharger_a_compressor_outlet_temperature == 0x11-40
assert p.data_records[0].turbocharger_a_turbine_inlet_temperature == \
       round((0x2233 * 0.1) - 40, 3)
assert p.data_records[0].turbocharger_a_turbine_outlet_temperature == \
       round((0x4455 * 0.1) - 40, 3)


= Check dissecting a response for Service 01 Pid 00 and Pid 20

p = OBD(b'\x41\x00\xBF\xBF\xA8\x91\x20\x80\x00\x00\x00')
assert p.service == 0x41
assert p.data_records[0].pid == 0
assert p.data_records[0].supportedPIDs == "PID20+PID1C+PID19+PID15+PID13+PID11+PID10+PID0F+PID0E+PID0D+PID0C+PID0B+PID09+PID08+PID07+PID06+PID05+PID04+PID03+PID01"
assert p.data_records[1].pid == 0x20
assert p.data_records[1].supportedPIDs == "PID21"
assert len(p.data_records) == 2


= Check dissecting a response for Service 01 Pid 05,01,15,0C,03

p = OBD(b'\x41\x05\x6e\x01\x83\x33\xff\x63\x15\xa0\x78\x0c\x0a\x6b\x03\x02\x00')
p.show()
assert p.service == 0x41
assert p.data_records[0].pid == 5
assert p.data_records[0].data == 70.0
assert p.data_records[1].pid == 0x1
assert p.data_records[2].pid == 0x15
assert p.data_records[2].outputVoltage == 0.8
assert p.data_records[2].trim == -6.25
assert p.data_records[3].pid == 12
assert p.data_records[3].data == 666.75
assert p.data_records[4].pid == 3
assert p.data_records[4].fuelSystem1 == 0x02
assert p.data_records[4].fuelSystem2 == 0
assert len(p.data_records) == 5

p = OBD(b'\x41\x00\xBF\xBF\xA8\x91\x20\x80\x00\x00\x00')
p.show()
assert p.service == 0x41
assert p.data_records[0].pid == 0
assert p.data_records[0].supportedPIDs == "PID20+PID1C+PID19+PID15+PID13+PID11+PID10+PID0F+PID0E+PID0D+PID0C+PID0B+PID09+PID08+PID07+PID06+PID05+PID04+PID03+PID01"
assert p.data_records[1].pid == 0x20
assert p.data_records[1].supportedPIDs == "PID21"
assert len(p.data_records) == 2


= Check dissecting a response for Service 01 Pid 78

p = OBD(b'\x41\x78ABCDEFGHI')
assert p.service == 0x41
assert p.data_records[0].pid == 0x78
assert p.data_records[0].sensor_1_supported == 0
assert p.data_records[0].sensor_2_supported == 1
assert p.data_records[0].sensor_3_supported == 0
assert p.data_records[0].sensor_4_supported == 0
assert p.data_records[0].reserved == 1
assert p.data_records[0].sensor_1 == 1656.3
assert p.data_records[0].sensor_2 == 1707.7
assert p.data_records[0].sensor_3 == 1759.1
assert p.data_records[0].sensor_4 == 1810.5


= Check dissecting a response for Service 01 Pid 7F

p = OBD(b'\x41\x7F\xa0'
        b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF'
        b'\x01\x02\x03\x04\x05\x06\x07\x08'
        b'\x00\x11\x22\x33\x44\x55\x66\x77')
assert p.service == 0x41
assert p.data_records[0].pid == 0x7F
assert p.data_records[0].total_supported == 1
assert p.data_records[0].total_idle_supported == 0
assert p.data_records[0].total_with_pto_active_supported == 1
assert p.data_records[0].reserved == 0
assert p.data_records[0].total == 0xFFFFFFFFFFFFFFFF
assert p.data_records[0].total_idle == 0x0102030405060708
assert p.data_records[0].total_with_pto_active == 0x0011223344556677


= Check dissecting a response for Service 01 Pid 89

p = OBD(b'\x41\x89ABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP')
assert p.service == 0x41
assert p.data_records[0].pid == 0x89
assert p.data_records[0].data == b'ABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP'


= Check dissecting a response for Service 02 Pid 75

p = OBD(b'\x42\x75\x01\xa0\x00\x11\x22\x33\x44\x55')
assert p.service == 0x42
assert p.data_records[0].pid == 0x75
assert p.data_records[0].frameNo == 0x01
assert p.data_records[0].turbo_a_compressor_inlet_temperature_supported == 1
assert p.data_records[0].turbo_a_compressor_outlet_temperature_supported == 0
assert p.data_records[0].turbo_a_turbine_inlet_temperature_supported == 1
assert p.data_records[0].turbo_a_turbine_outlet_temperature_supported == 0
assert p.data_records[0].reserved == 0
assert p.data_records[0].turbocharger_a_compressor_inlet_temperature == 0x00-40
assert p.data_records[0].turbocharger_a_compressor_outlet_temperature == 0x11-40
assert p.data_records[0].turbocharger_a_turbine_inlet_temperature == \
       round((0x2233 * 0.1) - 40, 3)
assert p.data_records[0].turbocharger_a_turbine_outlet_temperature == \
       round((0x4455 * 0.1) - 40, 3)


= Check dissecting a response for Service 02 Pid 78

p = OBD(b'\x42\x78\x01ABCDEFGHI')
assert p.service == 0x42
assert p.data_records[0].pid == 0x78
assert p.data_records[0].frameNo == 0x01
assert p.data_records[0].sensor_1_supported == 0
assert p.data_records[0].sensor_2_supported == 1
assert p.data_records[0].sensor_3_supported == 0
assert p.data_records[0].sensor_4_supported == 0
assert p.data_records[0].reserved == 1
assert p.data_records[0].sensor_1 == 1656.3
assert p.data_records[0].sensor_2 == 1707.7
assert p.data_records[0].sensor_3 == 1759.1
assert p.data_records[0].sensor_4 == 1810.5


= Check dissecting a response for Service 02 Pid 7F

p = OBD(b'\x42\x7F\x01\xa0'
        b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF'
        b'\x01\x02\x03\x04\x05\x06\x07\x08'
        b'\x00\x11\x22\x33\x44\x55\x66\x77')
assert p.service == 0x42
assert p.data_records[0].pid == 0x7F
assert p.data_records[0].frameNo == 0x01
assert p.data_records[0].total_supported == 1
assert p.data_records[0].total_idle_supported == 0
assert p.data_records[0].total_with_pto_active_supported == 1
assert p.data_records[0].reserved == 0
assert p.data_records[0].total == 0xFFFFFFFFFFFFFFFF
assert p.data_records[0].total_idle == 0x0102030405060708
assert p.data_records[0].total_with_pto_active == 0x0011223344556677


= Check dissecting a response for Service 02 Pid 89

p = OBD(b'\x42\x89\x01ABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP')
assert p.service == 0x42
assert p.data_records[0].pid == 0x89
assert p.data_records[0].frameNo == 0x01
assert p.data_records[0].data == b'ABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP'


= Check dissecting a response for Service 02 Pid 0C, 05, 04

p = OBD(b'\x42\x0c\x00\x20\x80\x04\x00\x80\x05\x00\x28')
assert p.service == 0x42
assert p.data_records[0].pid == 0x0C
assert p.data_records[0].frameNo == 0x0
assert p.data_records[0].data == 2080
assert p.data_records[1].pid == 0x04
assert p.data_records[1].frameNo == 0x0
assert p.data_records[1].data == 50.196
assert p.data_records[2].pid == 0x05
assert p.data_records[2].frameNo == 0x0
assert p.data_records[2].data == 0.0


= Check dissecting a response for Service 03

p = OBD(b'\x43\x06\x01\x43\x01\x96\x02\x34\x02\xcd\x03\x57\x0a\x24')
assert p.service == 0x43
assert p.count == 6
assert bytes(p.DTCs[0]) == b'\x01\x43'
assert bytes(p.DTCs[1]) == b'\x01\x96'
assert bytes(p.DTCs[2]) == b'\x02\x34'
assert bytes(p.DTCs[3]) == b'\x02\xcd'
assert bytes(p.DTCs[4]) == b'\x03\x57'
assert bytes(p.DTCs[5]) == b'\x0a\x24'


= Check dissecting a response for Service 08 Tid 01

p = OBD(b'\x48\x01\x00\x00"\xffd')
assert p.service == 0x48
assert p.tid == 0x01
assert p.data_A == 0.0
assert p.data_B == 0.0
assert p.data_C == 0.17
assert p.data_D == 1.275
assert p.data_E == 0.5


= Check dissecting a response for Service 08 Tid 05

p = OBD(b'\x48\x05\x00\x00\x2b\xff\x7d')
assert p.service == 0x48
assert p.tid == 0x05
assert p.data_A == 0.0
assert p.data_B == 0.0
assert p.data_C == 0.172
assert p.data_D == 1.02
assert p.data_E == 0.5


= Check dissecting a response for Service 08 Tid 09

p = OBD(b'\x48\x09\x00\x00\x04\x1a\x0c')
assert p.service == 0x48
assert p.tid == 0x09
assert p.data_A == 0.0
assert p.data_B == 0.0
assert p.data_C == 0.16
assert p.data_D == 1.04
assert p.data_E == 0.48


= Check dissecting a response for Service 09 Pid 00

p = OBD(b'\x49\x00ABCD')
assert p.service == 0x49
assert p.iid == 0x00
assert p.supportedIIDs == "IID1E+IID1A+IID18+IID17+IID12+IID0F+IID0A+IID08+IID02"


= Check dissecting a response for Service 09 Pid 02 with one VIN

p = OBD(b'\x49\x02\x01W0L000051T2123456')
assert p.service == 0x49
assert p.iid == 0x02
assert p.count == 0x01
assert p.vehicleIdentificationNumbers[0] == b'W0L000051T2123456'


= Check dissecting a response for Service 09 Pid 02 with two VINs

p = OBD(b'\x49\x02\x02W0L000051T2123456W0L000051T2123456')
assert p.service == 0x49
assert p.iid == 0x02
assert p.count == 0x02
assert p.vehicleIdentificationNumbers[0] == b'W0L000051T2123456'
assert p.vehicleIdentificationNumbers[1] == b'W0L000051T2123456'


= Check dissecting a response for Service 09 Pid 04 with one CID

p = OBD(b'\x49\x04\x01ABCDEFGHIJKLMNOP')
assert p.service == 0x49
assert p.iid == 0x04
assert p.count == 0x01
assert p.calibrationIdentifications[0] == b'ABCDEFGHIJKLMNOP'


= Check dissecting a response for Service 09 Pid 04 with two CID

p = OBD(b'\x49\x04\x02ABCDEFGHIJKLMNOPABCDEFGHIJKLMNOP')
assert p.service == 0x49
assert p.iid == 0x04
assert p.count == 0x02
assert p.calibrationIdentifications[0] == b'ABCDEFGHIJKLMNOP'
assert p.calibrationIdentifications[1] == b'ABCDEFGHIJKLMNOP'


= Check dissecting a response for Service 09 Pid 06

p = OBD(b'\x49\x06\x02ABCDEFGH')
assert p.service == 0x49
assert p.iid == 0x06
assert p.count == 0x02
assert p.calibrationVerificationNumbers[0] == b'ABCD'
assert p.calibrationVerificationNumbers[1] == b'EFGH'


= Check dissecting a response for Service 09 Pid 08

p = OBD(b'\x49\x08\x09\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x00\x08\xFF\xFF')
assert p.service == 0x49
assert p.iid == 0x08
assert p.count == 0x09
assert p.data[0] == 1
assert p.data[1] == 2
assert p.data[2] == 3
assert p.data[3] == 4
assert p.data[4] == 5
assert p.data[5] == 6
assert p.data[6] == 7
assert p.data[7] == 8
assert p.data[8] == 65535


= Check dissecting a response for Service 09 Pid 0A

p = OBD(b'\x49\x0A\x01ECM\x00-Engine Control\x00')
assert p.service == 0x49
assert p.iid == 0x0A
assert p.count == 0x01
assert p.ecuNames[0] == b'ECM\x00-Engine Control\x00'


= Check dissecting a response for Service 09 Pid 0B

p = OBD(b'\x49\x0B\x05\x00\x01\x00\x02\x00\x03\x00\x04\xFF\xFF')
assert p.service == 0x49
assert p.iid == 0x0B
assert p.count == 0x05
assert p.data[0] == 1
assert p.data[1] == 2
assert p.data[2] == 3
assert p.data[3] == 4
assert p.data[4] == 65535


= Check building a request for Service 01 Pid 00

p = OBD()/OBD_S01(pid=0x00)
b = bytes(p)
assert b[0:1] == b'\x01'
assert b[1:2] == b'\x00'


= Check building a request for Service 01 Pid 75

p = OBD()/OBD_S01(pid=0x75)
b = bytes(p)
assert b[0:1] == b'\x01'
assert b[1:2] == b'\x75'


= Check building a request for Service 01 Pid 78

p = OBD()/OBD_S01(pid=0x78)
b = bytes(p)
assert b[0:1] == b'\x01'
assert b[1:2] == b'\x78'


= Check building a request for Service 01 Pid 7F

p = OBD()/OBD_S01(pid=0x7F)
b = bytes(p)
assert b[0:1] == b'\x01'
assert b[1:2] == b'\x7F'


= Check building a request for Service 01 Pid 89

p = OBD()/OBD_S01(pid=0x89)
b = bytes(p)
assert b[0:1] == b'\x01'
assert b[1:2] == b'\x89'


= Check building a request for Service 02 Pid 00

p = OBD()/OBD_S02(requests=[OBD_S02_Req(pid=0x00, frameNo=0x01)])
b = bytes(p)
assert b[0:1] == b'\x02'
assert b[1:2] == b'\x00'
assert b[2:3] == b'\x01'


= Check building a request for Service 02 Pid 75

p = OBD()/OBD_S02(requests=[OBD_S02_Req(pid=0x75, frameNo=0x01)])
b = bytes(p)
assert b[0:1] == b'\x02'
assert b[1:2] == b'\x75'
assert b[2:3] == b'\x01'


= Check building a request for Service 02 Pid 78

p = OBD()/OBD_S02(requests=[OBD_S02_Req(pid=0x78, frameNo=0x01)])
b = bytes(p)
assert b[0:1] == b'\x02'
assert b[1:2] == b'\x78'
assert b[2:3] == b'\x01'


= Check building a request for Service 02 Pid 7F

p = OBD()/OBD_S02(requests=[OBD_S02_Req(pid=0x7F, frameNo=0x01)])
b = bytes(p)
assert b[0:1] == b'\x02'
assert b[1:2] == b'\x7F'
assert b[2:3] == b'\x01'


= Check building a request for Service 02 Pid 89

p = OBD()/OBD_S02(requests=[OBD_S02_Req(pid=0x89, frameNo=0x01)])
b = bytes(p)
assert b[0:1] == b'\x02'
assert b[1:2] == b'\x89'
assert b[2:3] == b'\x01'


= Check building a request for Service 03

p = OBD()/OBD_S03()
assert p.service == 0x03
#fixme
#assert p.data == b''


= Check building a request for Service 02 Pid 7F

p = OBD()/OBD_S02(requests=[OBD_S02_Req(pid=0x7F, frameNo=0x01)])
b = bytes(p)
assert b[0:1] == b'\x02'
assert b[1:2] == b'\x7F'
assert b[2:3] == b'\x01'


= Check building a request for Service 09 Pid 00

p = OBD()/OBD_S09(iid=0x00)
b = bytes(p)
assert b[0:1] == b'\x09'
assert b[1:2] == b'\x00'


= Check building a request for Service 09 Pid 02

p = OBD()/OBD_S09(iid=0x02)
b = bytes(p)
assert b[0:1] == b'\x09'
assert b[1:2] == b'\x02'


= Check building a request for Service 09 Pid 04

p = OBD()/OBD_S09(iid=0x04)
b = bytes(p)
assert b[0:1] == b'\x09'
assert b[1:2] == b'\x04'


= Check building a request for Service 09 Pid 0A

p = OBD()/OBD_S09(iid=0x0A)
b = bytes(p)
assert b[0:1] == b'\x09'
assert b[1:2] == b'\x0A'


# fixme
# = Check building a response for Service 01 Pid 75
#
# p = OBD(service=0x41)/OBD_S01()/OBD_PID75(
#     turbo_a_compressor_inlet_temperature_supported=0,
#     turbo_a_compressor_outlet_temperature_supported=1,
#     turbo_a_turbine_inlet_temperature_supported=0,
#     turbo_a_turbine_outlet_temperature_supported=1,
#     reserved=0,
#     turbocharger_a_compressor_inlet_temperature=25,
#     turbocharger_a_compressor_outlet_temperature=45,
#     turbochar# ger_a_turbine_inlet_temperature=40,
#     turbocharger_a_turbine_outlet_temperature=100)
#
# b = bytes(p)
# assert b[0:1] == b'\x41'
# assert b[1:2] == b'\x75'
# assert b[2:3] == 0b01010000
# assert b[3:4] == 25 - 40
# assert b[4:5] == 45 - 40
# assert b[5:7] == round(40 * 0.1 - 40, 3)
# assert b[7:9] == round(100 * 0.1 - 40, 3)


# fixme
#= Check building a response for Service 01 Pid 78

#p = OBD(service=0x41)/OBD_S01()/OBD_PID78(data=b'ABCDEFGHI')
#b = bytes(p)
#assert b[0:1] == b'\x41'
#assert b[1:2] == b'\x78'
#assert b[2:] == b'ABCDEFGHI'


# fixme
# = Check building a response for Service 01 Pid 7F
#
# p = OBD(service=0x41)/OBD_S01()/OBD_PID7F(
#     total_supported=0,
#     total_idle_supported=1,
#     total_with_pto_active_supported=1,
#     reserved=0,
#     total=b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF',
#     total_idle=0,
#     total_with_pto_active=5)
# b = bytes(p)
# assert b[0:1] == b'\x41'
# assert b[1:2] == b'\x7F'
# assert b[2:3] == 0b01100000
# assert b[3:11] == 0xFFFFFFFFFFFFFFFF
# assert b[11:19] == 0
# assert b[19:27] == 5

# fixme
#= Check building a response for Service 01 Pid 89

#p = OBD(service=0x41)/OBD_S01()/OBD_PID89(data=b'ABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP')
#b = bytes(p)
#assert b[0:1] == b'\x41'
#assert b[1:2] == b'\x89'
#assert b[2:] == b'ABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP'


# fixme
# = Check building a response for Service 02 Pid 75
#
# p = OBD(service=0x42)/OBD_S02(frameNo=0x01)/OBD_PID75(
#     turbo_a_compressor_inlet_temperature_supported=0,
#     turbo_a_compressor_outlet_temperature_supported=1,
#     turbo_a_turbine_inlet_temperature_supported=0,
#     turbo_a_turbine_outlet_temperature_supported=1,
#     reserved=0,
#     turbocharger_a_compressor_inlet_temperature=25,
#     turbocharger_a_compressor_outlet_temperature=45,
#     turbocharger_a_turbine_inlet_temperature=40,
#     turbocharger_a_turbine_outlet_temperature=100)
#
# b = bytes(p)
# assert b[0:1] == b'\x42'
# assert b[1:2] == b'\x75'
# assert b[2:3] == b'\x01'
# assert b[3:4] == 0b01010000
# assert b[4:5] == 25 - 40
# assert b[5:6] == 45 - 40
# assert b[6:8] == round(40 * 0.1 - 40, 3)
# assert b[8:10] == round(100 * 0.1 - 40, 3)

# fixme
# = Check building a response for Service 02 Pid 78
#
# p = OBD(service=0x42)/OBD_S02(frameNo=0x01)/OBD_PID78(sensor_1_supported=1, sensor_3_supported=1, sensor_1=20, sensor_3=40)
# b = bytes(p)
# assert b[0:1] == b'\x42'
# assert b[1:2] == b'\x78'
# assert b[2:3] == b'\x01'
# assert b[3:] == b'\xa0\x02\x58\x00\x00\x03\x20\x00\x00'


# fixme
# = Check building a response for Service 02 Pid 7F
#
# p = OBD(service=0x42)/OBD_S02(frameNo=1)/OBD_PID7F(
#     total_supported=0,
#     total_idle_supported=1,
#     total_with_pto_active_supported=1,
#     reserved=0,
#     total=b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF',
#     total_idle=0,
#     total_with_pto_active=5)
# b = bytes(p)
# assert b[0:1] == b'\x42'
# assert b[1:2] == b'\x7F'
# assert b[2:3] == b'\x01'
# assert b[3:4] == 0b01100000
# assert b[4:12] == 0xFFFFFFFFFFFFFFFF
# assert b[12:20] == 0
# assert b[20:28] == 5

# fixme
# = Check building a response for Service 02 Pid 89
#
# p = OBD(service=0x42)/OBD_S02(frameNo=0x01)/OBD_PID89(data=b'ABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP')
# b = bytes(p)
# assert b[0:1] == b'\x42'
# assert b[1:2] == b'\x89'
# assert b[2:3] == b'\x01'
# assert b[3:] == b'ABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOP'


# fixme
#= Check building a response for Service 03
#
#p = OBD(service=0x43)/OBD_S03(data=b'0123456789')
#assert p.service == 0x43
#assert p.data == b'0123456789'


= Check building a response for Service 09 Pid 00

p = OBD(service=0x49)/OBD_S09()/OBD_IID00(b'ABCD')
b = bytes(p)
assert b[0:1] == b'\x49'
assert b[1:2] == b'\x00'
assert b[2:] == b'ABCD'


= Check building a response for Service 09 Pid 02 with one VIN

p = OBD(service=0x49)/OBD_S09()/OBD_IID02(vehicleIdentificationNumbers=b'W0L000051T2123456')
b = bytes(p)
assert b[0:1] == b'\x49'
assert b[1:2] == b'\x02'
assert b[2:3] == b'\x01'
assert b[3:] == b'W0L000051T2123456'


= Check building a response for Service 09 Pid 02 with two VINs

p = OBD(service=0x49)/OBD_S09()/OBD_IID02(vehicleIdentificationNumbers=[b'W0L000051T2123456', b'W0L000051T2123456'])
b = bytes(p)
assert b[0:1] == b'\x49'
assert b[1:2] == b'\x02'
assert b[2:3] == b'\x02'
assert b[3:20] == b'W0L000051T2123456'
assert b[20:] == b'W0L000051T2123456'


= Check building a response for Service 09 Pid 04 with one CID

p = OBD(service=0x49)/OBD_S09()/OBD_IID04(calibrationIdentifications=b'ABCDEFGHIJKLMNOP')
b = bytes(p)
assert b[0:1] == b'\x49'
assert b[1:2] == b'\x04'
assert b[2:3] == b'\x01'
assert b[3:] == b'ABCDEFGHIJKLMNOP'


= Check building a response for Service 09 Pid 04 with two CID

p = OBD(service=0x49)/OBD_S09()/OBD_IID04(calibrationIdentifications=[b'ABCDEFGHIJKLMNOP', b'ABCDEFGHIJKLMNOP'])
b = bytes(p)
assert b[0:1] == b'\x49'
assert b[1:2] == b'\x04'
assert b[2:3] == b'\x02'
assert b[3:19] == b'ABCDEFGHIJKLMNOP'
assert b[19:] == b'ABCDEFGHIJKLMNOP'


= Check building a response for Service 09 Pid 0A

p = OBD(service=0x49)/OBD_S09()/OBD_IID0A(ecuNames=b'ABCDEFGHIJKLMNOPQRST')
b = bytes(p)
assert b[0:1] == b'\x49'
assert b[1:2] == b'\x0A'
assert b[2:3] == b'\x01'
assert b[3:] == b'ABCDEFGHIJKLMNOPQRST'
