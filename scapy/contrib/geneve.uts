# GENEVE unit tests
#
# Type the following command to launch start the tests:
# $ test/run_tests -P "load_contrib('geneve')" -t scapy/contrib/geneve.uts

+ GENEVE

= Build & dissect - GENEVE encapsulates Ether
if WINDOWS:
    route_add_loopback()

s = raw(IP()/UDP(sport=10000)/GENEVE()/Ether(dst='00:01:00:11:11:11',src='00:02:00:22:22:22'))
assert(s == b'E\x00\x002\x00\x01\x00\x00@\x11|\xb8\x7f\x00\x00\x01\x7f\x00\x00\x01\'\x10\x17\xc1\x00\x1e\x9a\x1c\x00\x00eX\x00\x00\x00\x00\x00\x01\x00\x11\x11\x11\x00\x02\x00"""\x90\x00')

p = IP(s)
assert(GENEVE in p and Ether in p[GENEVE].payload)


= Build & dissect - GENEVE with options encapsulates Ether
if WINDOWS:
    route_add_loopback()

s = raw(IP()/UDP(sport=10000)/GENEVE(critical=1, options=b'\x00\x01\x81\x02\x0a\x0a\x0b\x0b')/Ether(dst='00:01:00:11:11:11',src='00:02:00:22:22:22'))
assert(s == b'E\x00\x00:\x00\x01\x00\x00@\x11|\xb0\x7f\x00\x00\x01\x7f\x00\x00\x01\'\x10\x17\xc1\x00&\x01\xb4\x02@eX\x00\x00\x00\x00\x00\x01\x81\x02\n\n\x0b\x0b\x00\x01\x00\x11\x11\x11\x00\x02\x00"""\x90\x00')

p = IP(s)
assert(GENEVE in p and Ether in p[GENEVE].payload and p[GENEVE].critical == 1 and p[GENEVE].optionlen == 2)


= Build & dissect - GENEVE encapsulates IPv4
if WINDOWS:
    route_add_loopback()

s = raw(IP()/UDP(sport=10000)/GENEVE()/IP())
assert(s == b"E\x00\x008\x00\x01\x00\x00@\x11|\xb2\x7f\x00\x00\x01\x7f\x00\x00\x01'\x10\x17\xc1\x00$\xba\xd2\x00\x00\x08\x00\x00\x00\x00\x00E\x00\x00\x14\x00\x01\x00\x00@\x00|\xe7\x7f\x00\x00\x01\x7f\x00\x00\x01")

p = IP(s)
assert(GENEVE in p and IP in p[GENEVE].payload)


= Build & dissect - GENEVE encapsulates IPv6
s = raw(IP()/UDP(sport=10000)/GENEVE()/IPv6())
assert(s == b"E\x00\x00L\x00\x01\x00\x00@\x11|\x9e\x7f\x00\x00\x01\x7f\x00\x00\x01'\x10\x17\xc1\x008\xa0\x8a\x00\x00\x86\xdd\x00\x00\x00\x00`\x00\x00\x00\x00\x00;@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01")

p = IP(s)
assert(GENEVE in p and IPv6 in p[GENEVE].payload)
